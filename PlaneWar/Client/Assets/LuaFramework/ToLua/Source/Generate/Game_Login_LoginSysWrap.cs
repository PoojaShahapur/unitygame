//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Game_Login_LoginSysWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game.Login.LoginSys), typeof(System.Object));
		L.RegFunction("Start", Start);
		L.RegFunction("initGVar", initGVar);
		L.RegFunction("loadScene", loadScene);
		L.RegFunction("onResLoadScene", onResLoadScene);
		L.RegFunction("connectLoginServer", connectLoginServer);
		L.RegFunction("getLoginState", getLoginState);
		L.RegFunction("setLoginState", setLoginState);
		L.RegFunction("unload", unload);
		L.RegFunction("getUserID", getUserID);
		L.RegFunction("New", _CreateGame_Login_LoginSys);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mLoginFlowHandle", get_mLoginFlowHandle, set_mLoginFlowHandle);
		L.RegVar("mLoginState", get_mLoginState, set_mLoginState);
		L.RegVar("mLoginRouteCB", get_mLoginRouteCB, set_mLoginRouteCB);
		L.RegVar("mLoginNetHandleCB_KBE", get_mLoginNetHandleCB_KBE, set_mLoginNetHandleCB_KBE);
		L.RegVar("mLoginNetHandleCB", get_mLoginNetHandleCB, set_mLoginNetHandleCB);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGame_Login_LoginSys(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Game.Login.LoginSys obj = new Game.Login.LoginSys();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Game.Login.LoginSys.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			obj.Start();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int initGVar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			obj.initGVar();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			obj.loadScene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onResLoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			SDK.Lib.IDispatchObject arg0 = (SDK.Lib.IDispatchObject)ToLua.CheckObject(L, 2, typeof(SDK.Lib.IDispatchObject));
			obj.onResLoadScene(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int connectLoginServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			SDK.Lib.SelectEnterMode arg2 = (SDK.Lib.SelectEnterMode)ToLua.CheckObject(L, 4, typeof(SDK.Lib.SelectEnterMode));
			obj.connectLoginServer(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLoginState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			SDK.Lib.LoginState o = obj.getLoginState();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoginState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			SDK.Lib.LoginState arg0 = (SDK.Lib.LoginState)ToLua.CheckObject(L, 2, typeof(SDK.Lib.LoginState));
			obj.setLoginState(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int unload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			obj.unload();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getUserID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)ToLua.CheckObject(L, 1, typeof(Game.Login.LoginSys));
			uint o = obj.getUserID();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLoginFlowHandle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginFlowHandle ret = obj.mLoginFlowHandle;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginFlowHandle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLoginState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			SDK.Lib.LoginState ret = obj.mLoginState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLoginRouteCB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginRouteCB ret = obj.mLoginRouteCB;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginRouteCB on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLoginNetHandleCB_KBE(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginNetHandleCB_KBE ret = obj.mLoginNetHandleCB_KBE;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginNetHandleCB_KBE on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mLoginNetHandleCB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginNetHandleCB ret = obj.mLoginNetHandleCB;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginNetHandleCB on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLoginFlowHandle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginFlowHandle arg0 = (Game.Login.LoginFlowHandle)ToLua.CheckObject(L, 2, typeof(Game.Login.LoginFlowHandle));
			obj.mLoginFlowHandle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginFlowHandle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLoginState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			SDK.Lib.LoginState arg0 = (SDK.Lib.LoginState)ToLua.CheckObject(L, 2, typeof(SDK.Lib.LoginState));
			obj.mLoginState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLoginRouteCB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginRouteCB arg0 = (Game.Login.LoginRouteCB)ToLua.CheckObject(L, 2, typeof(Game.Login.LoginRouteCB));
			obj.mLoginRouteCB = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginRouteCB on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLoginNetHandleCB_KBE(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginNetHandleCB_KBE arg0 = (Game.Login.LoginNetHandleCB_KBE)ToLua.CheckObject(L, 2, typeof(Game.Login.LoginNetHandleCB_KBE));
			obj.mLoginNetHandleCB_KBE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginNetHandleCB_KBE on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mLoginNetHandleCB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Login.LoginSys obj = (Game.Login.LoginSys)o;
			Game.Login.LoginNetHandleCB arg0 = (Game.Login.LoginNetHandleCB)ToLua.CheckObject(L, 2, typeof(Game.Login.LoginNetHandleCB));
			obj.mLoginNetHandleCB = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mLoginNetHandleCB on a nil value" : e.Message);
		}
	}
}

