//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_AuxDownloaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.AuxDownloader), typeof(SDK.Lib.AuxLoaderBase));
		L.RegFunction("getBytes", getBytes);
		L.RegFunction("isSuccessLoaded", isSuccessLoaded);
		L.RegFunction("download", download);
		L.RegFunction("onDownloaded", onDownloaded);
		L.RegFunction("New", _CreateSDK_Lib_AuxDownloader);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_AuxDownloader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.AuxDownloader obj = new SDK.Lib.AuxDownloader();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.AuxDownloader.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.AuxDownloader obj = (SDK.Lib.AuxDownloader)ToLua.CheckObject(L, 1, typeof(SDK.Lib.AuxDownloader));
			byte[] o = obj.getBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isSuccessLoaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.AuxDownloader obj = (SDK.Lib.AuxDownloader)ToLua.CheckObject(L, 1, typeof(SDK.Lib.AuxDownloader));
			bool o = obj.isSuccessLoaded();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int download(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(SDK.Lib.AuxDownloader), typeof(string), typeof(SDK.Lib.MAction<SDK.Lib.IDispatchObject>), typeof(SDK.Lib.MAction<SDK.Lib.IDispatchObject>), typeof(long), typeof(bool), typeof(int)))
			{
				SDK.Lib.AuxDownloader obj = (SDK.Lib.AuxDownloader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				SDK.Lib.MAction<SDK.Lib.IDispatchObject> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (SDK.Lib.MAction<SDK.Lib.IDispatchObject>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(SDK.Lib.MAction<SDK.Lib.IDispatchObject>), func) as SDK.Lib.MAction<SDK.Lib.IDispatchObject>;
				}

				SDK.Lib.MAction<SDK.Lib.IDispatchObject> arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (SDK.Lib.MAction<SDK.Lib.IDispatchObject>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(SDK.Lib.MAction<SDK.Lib.IDispatchObject>), func) as SDK.Lib.MAction<SDK.Lib.IDispatchObject>;
				}

				long arg3 = LuaDLL.tolua_toint64(L, 5);
				bool arg4 = LuaDLL.lua_toboolean(L, 6);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 7);
				obj.download(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(SDK.Lib.AuxDownloader), typeof(string), typeof(LuaInterface.LuaTable), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaFunction), typeof(long), typeof(bool), typeof(int)))
			{
				SDK.Lib.AuxDownloader obj = (SDK.Lib.AuxDownloader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaTable arg1 = ToLua.ToLuaTable(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				long arg4 = LuaDLL.tolua_toint64(L, 6);
				bool arg5 = LuaDLL.lua_toboolean(L, 7);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 8);
				obj.download(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SDK.Lib.AuxDownloader.download");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onDownloaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.AuxDownloader obj = (SDK.Lib.AuxDownloader)ToLua.CheckObject(L, 1, typeof(SDK.Lib.AuxDownloader));
			SDK.Lib.IDispatchObject arg0 = (SDK.Lib.IDispatchObject)ToLua.CheckObject(L, 2, typeof(SDK.Lib.IDispatchObject));
			obj.onDownloaded(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

