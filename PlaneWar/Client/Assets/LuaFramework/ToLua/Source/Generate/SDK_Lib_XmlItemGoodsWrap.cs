//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_XmlItemGoodsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.XmlItemGoods), typeof(SDK.Lib.XmlItemBase));
		L.RegFunction("parseXml", parseXml);
		L.RegFunction("New", _CreateSDK_Lib_XmlItemGoods);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mID", get_mID, set_mID);
		L.RegVar("mName", get_mName, set_mName);
		L.RegVar("mNeedID", get_mNeedID, set_mNeedID);
		L.RegVar("mNeedNum", get_mNeedNum, set_mNeedNum);
		L.RegVar("mHot", get_mHot, set_mHot);
		L.RegVar("mOnly", get_mOnly, set_mOnly);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_XmlItemGoods(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.XmlItemGoods obj = new SDK.Lib.XmlItemGoods();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.XmlItemGoods.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int parseXml(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)ToLua.CheckObject(L, 1, typeof(SDK.Lib.XmlItemGoods));
			System.Security.SecurityElement arg0 = (System.Security.SecurityElement)ToLua.CheckObject(L, 2, typeof(System.Security.SecurityElement));
			obj.parseXml(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			uint ret = obj.mID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			string ret = obj.mName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mNeedID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			uint ret = obj.mNeedID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mNeedID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mNeedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			uint ret = obj.mNeedNum;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mNeedNum on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mHot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			string ret = obj.mHot;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mHot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			string ret = obj.mOnly;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mOnly on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.mID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mNeedID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.mNeedID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mNeedID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mNeedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.mNeedNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mNeedNum on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mHot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mHot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mHot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.XmlItemGoods obj = (SDK.Lib.XmlItemGoods)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mOnly = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mOnly on a nil value" : e.Message);
		}
	}
}

