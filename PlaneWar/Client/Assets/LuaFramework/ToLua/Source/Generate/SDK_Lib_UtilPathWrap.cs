//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_UtilPathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.UtilPath), typeof(System.Object));
		L.RegFunction("normalPath", normalPath);
		L.RegFunction("deleteDirectory", deleteDirectory);
		L.RegFunction("existDirectory", existDirectory);
		L.RegFunction("existFile", existFile);
		L.RegFunction("move", move);
		L.RegFunction("deleteFile", deleteFile);
		L.RegFunction("copyFile", copyFile);
		L.RegFunction("createDirectory", createDirectory);
		L.RegFunction("renameFile", renameFile);
		L.RegFunction("combine", combine);
		L.RegFunction("getFileExt", getFileExt);
		L.RegFunction("getFileNameWithExt", getFileNameWithExt);
		L.RegFunction("getFileNameNoExt", getFileNameNoExt);
		L.RegFunction("getFilePathNoName", getFilePathNoName);
		L.RegFunction("getFilePathNoExt", getFilePathNoExt);
		L.RegFunction("getFileParentDirName", getFileParentDirName);
		L.RegFunction("getAllFile", getAllFile);
		L.RegFunction("versionPath", versionPath);
		L.RegFunction("delFileNoVer", delFileNoVer);
		L.RegFunction("fileExistNoVer", fileExistNoVer);
		L.RegFunction("saveTex2File", saveTex2File);
		L.RegFunction("saveStr2File", saveStr2File);
		L.RegFunction("saveByte2File", saveByte2File);
		L.RegFunction("copyDirectory", copyDirectory);
		L.RegFunction("traverseDirectory", traverseDirectory);
		L.RegFunction("deleteFiles", deleteFiles);
		L.RegFunction("deleteSubDirsAndFiles", deleteSubDirsAndFiles);
		L.RegFunction("isSubStrInList", isSubStrInList);
		L.RegFunction("isEqualStrInList", isEqualStrInList);
		L.RegFunction("modifyFileNameToCapital", modifyFileNameToCapital);
		L.RegFunction("toLower", toLower);
		L.RegFunction("recureCreateSubDir", recureCreateSubDir);
		L.RegFunction("isAndroidRuntime", isAndroidRuntime);
		L.RegFunction("isWindowsRuntime", isWindowsRuntime);
		L.RegFunction("isStreamingAssetsPath", isStreamingAssetsPath);
		L.RegFunction("getCurrentDirectory", getCurrentDirectory);
		L.RegFunction("isFileNameSuffixNoExt", isFileNameSuffixNoExt);
		L.RegFunction("getFileNameRemoveSuffixNoExt", getFileNameRemoveSuffixNoExt);
		L.RegFunction("New", _CreateSDK_Lib_UtilPath);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DOT", get_DOT, null);
		L.RegVar("SLASH", get_SLASH, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_UtilPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.UtilPath obj = new SDK.Lib.UtilPath();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.UtilPath.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int normalPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.normalPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.UtilPath.deleteDirectory(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int existDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = SDK.Lib.UtilPath.existDirectory(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int existFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = SDK.Lib.UtilPath.existFile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int move(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			SDK.Lib.UtilPath.move(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = SDK.Lib.UtilPath.deleteFile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int copyFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			SDK.Lib.UtilPath.copyFile(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.UtilPath.createDirectory(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int renameFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool o = SDK.Lib.UtilPath.renameFile(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int combine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string[] arg0 = ToLua.CheckParamsString(L, 1, count);
			string o = SDK.Lib.UtilPath.combine(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFileExt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.getFileExt(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFileNameWithExt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.getFileNameWithExt(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFileNameNoExt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.getFileNameNoExt(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFilePathNoName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.getFilePathNoName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFilePathNoExt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.getFilePathNoExt(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFileParentDirName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.getFileParentDirName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getAllFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			SDK.Lib.MList<string> arg1 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 2, typeof(SDK.Lib.MList<string>));
			SDK.Lib.MList<string> arg2 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 3, typeof(SDK.Lib.MList<string>));
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			SDK.Lib.MList<string> o = SDK.Lib.UtilPath.getAllFile(arg0, arg1, arg2, arg3);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int versionPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string o = SDK.Lib.UtilPath.versionPath(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int delFileNoVer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			SDK.Lib.UtilPath.delFileNoVer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int fileExistNoVer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = SDK.Lib.UtilPath.fileExistNoVer(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int saveTex2File(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Texture2D));
			string arg1 = ToLua.CheckString(L, 2);
			SDK.Lib.UtilPath.saveTex2File(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int saveStr2File(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Text.Encoding arg2 = (System.Text.Encoding)ToLua.CheckObject(L, 3, typeof(System.Text.Encoding));
			SDK.Lib.UtilPath.saveStr2File(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int saveByte2File(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			SDK.Lib.UtilPath.saveByte2File(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int copyDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			SDK.Lib.UtilPath.copyDirectory(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int traverseDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Action<string,string,string> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<string,string,string>)ToLua.CheckObject(L, 3, typeof(System.Action<string,string,string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<string,string,string>), func) as System.Action<string,string,string>;
			}

			System.Action<string,string,string> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<string,string,string>)ToLua.CheckObject(L, 4, typeof(System.Action<string,string,string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<string,string,string>), func) as System.Action<string,string,string>;
			}

			bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
			bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
			SDK.Lib.UtilPath.traverseDirectory(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			SDK.Lib.MList<string> arg1 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 2, typeof(SDK.Lib.MList<string>));
			SDK.Lib.MList<string> arg2 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 3, typeof(SDK.Lib.MList<string>));
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			SDK.Lib.UtilPath.deleteFiles(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteSubDirsAndFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			SDK.Lib.MList<string> arg1 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 2, typeof(SDK.Lib.MList<string>));
			SDK.Lib.MList<string> arg2 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 3, typeof(SDK.Lib.MList<string>));
			SDK.Lib.UtilPath.deleteSubDirsAndFiles(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isSubStrInList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			SDK.Lib.MList<string> arg1 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 2, typeof(SDK.Lib.MList<string>));
			bool o = SDK.Lib.UtilPath.isSubStrInList(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isEqualStrInList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			SDK.Lib.MList<string> arg1 = (SDK.Lib.MList<string>)ToLua.CheckObject(L, 2, typeof(SDK.Lib.MList<string>));
			bool o = SDK.Lib.UtilPath.isEqualStrInList(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int modifyFileNameToCapital(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			SDK.Lib.UtilPath.modifyFileNameToCapital(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int toLower(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = SDK.Lib.UtilPath.toLower(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int recureCreateSubDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			SDK.Lib.UtilPath.recureCreateSubDir(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isAndroidRuntime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SDK.Lib.UtilPath.isAndroidRuntime();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isWindowsRuntime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = SDK.Lib.UtilPath.isWindowsRuntime();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isStreamingAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = SDK.Lib.UtilPath.isStreamingAssetsPath(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getCurrentDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = SDK.Lib.UtilPath.getCurrentDirectory();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isFileNameSuffixNoExt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool o = SDK.Lib.UtilPath.isFileNameSuffixNoExt(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFileNameRemoveSuffixNoExt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string o = SDK.Lib.UtilPath.getFileNameRemoveSuffixNoExt(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DOT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SDK.Lib.UtilPath.DOT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SLASH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SDK.Lib.UtilPath.SLASH);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

