//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_CamSysWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.CamSys), typeof(System.Object));
		L.RegFunction("init", init);
		L.RegFunction("dispose", dispose);
		L.RegFunction("getLocalCamera", getLocalCamera);
		L.RegFunction("setLocalCamera", setLocalCamera);
		L.RegFunction("setUiCamera", setUiCamera);
		L.RegFunction("setSceneCamera2UICamera", setSceneCamera2UICamera);
		L.RegFunction("setSceneCamera2MainCamera", setSceneCamera2MainCamera);
		L.RegFunction("getMainCamera", getMainCamera);
		L.RegFunction("setMainCamera", setMainCamera);
		L.RegFunction("getUGuiCamera", getUGuiCamera);
		L.RegFunction("setUGuiCamera", setUGuiCamera);
		L.RegFunction("setCameraActor", setCameraActor);
		L.RegFunction("getFrustumPlanes", getFrustumPlanes);
		L.RegFunction("invalidCamera", invalidCamera);
		L.RegFunction("testFrustumDir", testFrustumDir);
		L.RegFunction("ShareTo3Party", ShareTo3Party);
		L.RegFunction("New", _CreateSDK_Lib_CamSys);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mMainCamera", get_mMainCamera, set_mMainCamera);
		L.RegVar("mUguiCam", get_mUguiCam, set_mUguiCam);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_CamSys(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.CamSys obj = new SDK.Lib.CamSys();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.CamSys.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLocalCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			SDK.Lib.MCamera o = obj.getLocalCamera();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLocalCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.setLocalCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUiCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			UICamera arg0 = (UICamera)ToLua.CheckUnityObject(L, 2, typeof(UICamera));
			obj.setUiCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSceneCamera2UICamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.setSceneCamera2UICamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSceneCamera2MainCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.setSceneCamera2MainCamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getMainCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			UnityEngine.Camera o = obj.getMainCamera();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMainCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.setMainCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getUGuiCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			UnityEngine.Camera o = obj.getUGuiCamera();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUGuiCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.setUGuiCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCameraActor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(SDK.Lib.CamSys), typeof(UnityEngine.GameObject)))
			{
				SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.setCameraActor(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(SDK.Lib.CamSys), typeof(SDK.Lib.SceneEntityBase)))
			{
				SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.ToObject(L, 1);
				SDK.Lib.SceneEntityBase arg0 = (SDK.Lib.SceneEntityBase)ToLua.ToObject(L, 2);
				obj.setCameraActor(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SDK.Lib.CamSys.setCameraActor");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getFrustumPlanes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			SDK.Lib.MPlane[] o = obj.getFrustumPlanes();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int invalidCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.invalidCamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int testFrustumDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.testFrustumDir();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShareTo3Party(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.CamSys));
			obj.ShareTo3Party();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mMainCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)o;
			UnityEngine.Camera ret = obj.mMainCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mMainCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mUguiCam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)o;
			UnityEngine.Camera ret = obj.mUguiCam;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUguiCam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mMainCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.mMainCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mMainCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mUguiCam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.CamSys obj = (SDK.Lib.CamSys)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.mUguiCam = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mUguiCam on a nil value" : e.Message);
		}
	}
}

