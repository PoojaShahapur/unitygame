//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_NetModuleDispHandleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.NetModuleDispHandle), typeof(System.Object));
		L.RegFunction("addCmdHandle", addCmdHandle);
		L.RegFunction("removeCmdHandle", removeCmdHandle);
		L.RegFunction("handleMsg", handleMsg);
		L.RegFunction("New", _CreateSDK_Lib_NetModuleDispHandle);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_NetModuleDispHandle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.NetModuleDispHandle obj = new SDK.Lib.NetModuleDispHandle();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.NetModuleDispHandle.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addCmdHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			SDK.Lib.NetModuleDispHandle obj = (SDK.Lib.NetModuleDispHandle)ToLua.CheckObject(L, 1, typeof(SDK.Lib.NetModuleDispHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			SDK.Lib.NetCmdDispHandle arg1 = (SDK.Lib.NetCmdDispHandle)ToLua.CheckObject(L, 3, typeof(SDK.Lib.NetCmdDispHandle));
			SDK.Lib.MAction<SDK.Lib.IDispatchObject> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (SDK.Lib.MAction<SDK.Lib.IDispatchObject>)ToLua.CheckObject(L, 4, typeof(SDK.Lib.MAction<SDK.Lib.IDispatchObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(SDK.Lib.MAction<SDK.Lib.IDispatchObject>), func) as SDK.Lib.MAction<SDK.Lib.IDispatchObject>;
			}

			obj.addCmdHandle(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeCmdHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.NetModuleDispHandle obj = (SDK.Lib.NetModuleDispHandle)ToLua.CheckObject(L, 1, typeof(SDK.Lib.NetModuleDispHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			SDK.Lib.NetCmdDispHandle arg1 = (SDK.Lib.NetCmdDispHandle)ToLua.CheckObject(L, 3, typeof(SDK.Lib.NetCmdDispHandle));
			obj.removeCmdHandle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int handleMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.NetModuleDispHandle obj = (SDK.Lib.NetModuleDispHandle)ToLua.CheckObject(L, 1, typeof(SDK.Lib.NetModuleDispHandle));
			SDK.Lib.CmdDispInfo arg0 = (SDK.Lib.CmdDispInfo)ToLua.CheckObject(L, 2, typeof(SDK.Lib.CmdDispInfo));
			obj.handleMsg(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

