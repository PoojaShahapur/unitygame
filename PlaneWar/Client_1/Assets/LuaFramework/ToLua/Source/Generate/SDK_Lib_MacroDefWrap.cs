//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_MacroDefWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.MacroDef), typeof(System.Object));
		L.RegFunction("New", _CreateSDK_Lib_MacroDef);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DEBUG_NOTNET", get_DEBUG_NOTNET, set_DEBUG_NOTNET);
		L.RegVar("NET_MULTHREAD", get_NET_MULTHREAD, set_NET_MULTHREAD);
		L.RegVar("THREAD_CALLCHECK", get_THREAD_CALLCHECK, set_THREAD_CALLCHECK);
		L.RegVar("MSG_ENCRIPT", get_MSG_ENCRIPT, set_MSG_ENCRIPT);
		L.RegVar("MSG_COMPRESS", get_MSG_COMPRESS, set_MSG_COMPRESS);
		L.RegVar("ENABLE_WINLOG", get_ENABLE_WINLOG, set_ENABLE_WINLOG);
		L.RegVar("ENABLE_NETLOG", get_ENABLE_NETLOG, set_ENABLE_NETLOG);
		L.RegVar("ENABLE_FILELOG", get_ENABLE_FILELOG, set_ENABLE_FILELOG);
		L.RegVar("PKG_RES_LOAD", get_PKG_RES_LOAD, set_PKG_RES_LOAD);
		L.RegVar("UNPKG_RES_LOAD", get_UNPKG_RES_LOAD, set_UNPKG_RES_LOAD);
		L.RegVar("ENABLE_PROTOBUF", get_ENABLE_PROTOBUF, set_ENABLE_PROTOBUF);
		L.RegVar("ENABLE_SHARP_ZIP_LIB", get_ENABLE_SHARP_ZIP_LIB, set_ENABLE_SHARP_ZIP_LIB);
		L.RegVar("UNIT_TEST", get_UNIT_TEST, set_UNIT_TEST);
		L.RegVar("DEPRECATE_CODE", get_DEPRECATE_CODE, set_DEPRECATE_CODE);
		L.RegVar("MULTITHREADING_CULL", get_MULTITHREADING_CULL, set_MULTITHREADING_CULL);
		L.RegVar("LUA_EDITOR", get_LUA_EDITOR, set_LUA_EDITOR);
		L.RegVar("ENABLE_LOG", get_ENABLE_LOG, set_ENABLE_LOG);
		L.RegVar("ENABLE_WARN", get_ENABLE_WARN, set_ENABLE_WARN);
		L.RegVar("ENABLE_ERROR", get_ENABLE_ERROR, set_ENABLE_ERROR);
		L.RegVar("DRAW_DEBUG", get_DRAW_DEBUG, set_DRAW_DEBUG);
		L.RegVar("ENABLE_BUGLY", get_ENABLE_BUGLY, set_ENABLE_BUGLY);
		L.RegVar("XZ_MODE", get_XZ_MODE, set_XZ_MODE);
		L.RegVar("XY_MODE", get_XY_MODE, set_XY_MODE);
		L.RegVar("PHYSIX_MOVE", get_PHYSIX_MOVE, set_PHYSIX_MOVE);
		L.RegVar("ENABLE_SCENE2D_CLIP", get_ENABLE_SCENE2D_CLIP, set_ENABLE_SCENE2D_CLIP);
		L.RegVar("ENABLE_LUA_CONSOLE", get_ENABLE_LUA_CONSOLE, set_ENABLE_LUA_CONSOLE);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_MacroDef(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.MacroDef obj = new SDK.Lib.MacroDef();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.MacroDef.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEBUG_NOTNET(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.DEBUG_NOTNET);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NET_MULTHREAD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.NET_MULTHREAD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_THREAD_CALLCHECK(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.THREAD_CALLCHECK);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MSG_ENCRIPT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.MSG_ENCRIPT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MSG_COMPRESS(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.MSG_COMPRESS);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_WINLOG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_WINLOG);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_NETLOG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_NETLOG);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_FILELOG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_FILELOG);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PKG_RES_LOAD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.PKG_RES_LOAD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UNPKG_RES_LOAD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.UNPKG_RES_LOAD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_PROTOBUF(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_PROTOBUF);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_SHARP_ZIP_LIB(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_SHARP_ZIP_LIB);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UNIT_TEST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.UNIT_TEST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEPRECATE_CODE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.DEPRECATE_CODE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MULTITHREADING_CULL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.MULTITHREADING_CULL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUA_EDITOR(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.LUA_EDITOR);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_LOG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_LOG);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_WARN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_WARN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_ERROR(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_ERROR);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DRAW_DEBUG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.DRAW_DEBUG);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_BUGLY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_BUGLY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_XZ_MODE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.XZ_MODE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_XY_MODE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.XY_MODE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PHYSIX_MOVE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.PHYSIX_MOVE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_SCENE2D_CLIP(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_SCENE2D_CLIP);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENABLE_LUA_CONSOLE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, SDK.Lib.MacroDef.ENABLE_LUA_CONSOLE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DEBUG_NOTNET(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.DEBUG_NOTNET = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NET_MULTHREAD(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.NET_MULTHREAD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_THREAD_CALLCHECK(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.THREAD_CALLCHECK = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MSG_ENCRIPT(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.MSG_ENCRIPT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MSG_COMPRESS(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.MSG_COMPRESS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_WINLOG(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_WINLOG = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_NETLOG(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_NETLOG = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_FILELOG(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_FILELOG = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PKG_RES_LOAD(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.PKG_RES_LOAD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UNPKG_RES_LOAD(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.UNPKG_RES_LOAD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_PROTOBUF(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_PROTOBUF = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_SHARP_ZIP_LIB(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_SHARP_ZIP_LIB = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UNIT_TEST(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.UNIT_TEST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DEPRECATE_CODE(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.DEPRECATE_CODE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MULTITHREADING_CULL(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.MULTITHREADING_CULL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUA_EDITOR(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.LUA_EDITOR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_LOG(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_LOG = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_WARN(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_WARN = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_ERROR(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_ERROR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DRAW_DEBUG(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.DRAW_DEBUG = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_BUGLY(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_BUGLY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_XZ_MODE(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.XZ_MODE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_XY_MODE(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.XY_MODE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PHYSIX_MOVE(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.PHYSIX_MOVE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_SCENE2D_CLIP(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_SCENE2D_CLIP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENABLE_LUA_CONSOLE(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			SDK.Lib.MacroDef.ENABLE_LUA_CONSOLE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

