using Game.Msg;
using SDK.Common;
using SDK.Lib;
using System;

namespace UnitTestSrc
{
    public class UnitTestBuffer
    {
        public void run()
        {
            testMsgBuffer();
            //testBA();
            //testSend();
            testReadMsgFormHex();
            //testReceiveMsg();
        }

        protected void testMsgBuffer()
        {
            ClientBuffer pDataBuffer = new ClientBuffer();
            UnitTestStrCmd pUnitTestCmd = new UnitTestStrCmd();
            UnitTestNumCmd pUnitTesNumtCmd = new UnitTestNumCmd();

            // 发送第一个数据包
            pUnitTestCmd.testStr = "测试数据";
            pDataBuffer.sendData.clear();
            pUnitTestCmd.serialize(pDataBuffer.sendData);
            //pDataBuffer.sendData.position = 0;
            //pUnitTestCmd.derialize(pDataBuffer.sendData);
            pDataBuffer.send();

            // 发送第二个数据包
            pUnitTestCmd.testStr = "成功返回";
            pDataBuffer.sendData.clear();
            pUnitTestCmd.serialize(pDataBuffer.sendData);
            pDataBuffer.send();

            // 发送第三个数据包
            pUnitTesNumtCmd = new UnitTestNumCmd();
            pUnitTesNumtCmd.num = 2001;
            pDataBuffer.sendData.clear();
            pUnitTesNumtCmd.serialize(pDataBuffer.sendData);
            pDataBuffer.send();

            pDataBuffer.getSendData();
            ByteBuffer cryptLenBA = new ByteBuffer();
            cryptLenBA.writeUnsignedInt32(pDataBuffer.sendBuffer.length);
            pDataBuffer.rawBuffer.circuleBuffer.pushBackBA(cryptLenBA);                     // 自己补上消息头
            pDataBuffer.rawBuffer.circuleBuffer.pushBackBA(pDataBuffer.sendBuffer);         // 直接放到接收原始消息缓冲区
            pDataBuffer.moveRaw2Msg();

            ByteBuffer ba;
            ba = pDataBuffer.getMsg();
            UAssert.DebugAssert(ba != null);
            pUnitTestCmd.derialize(ba);
            UAssert.DebugAssert(pUnitTestCmd.testStr.Substring(0, 4) == "测试数据");

            pDataBuffer.getSendData();
            if (pDataBuffer.sendBuffer.length > 0)
            {
                cryptLenBA.clear();
                cryptLenBA.writeUnsignedInt32(pDataBuffer.sendBuffer.length);
                pDataBuffer.rawBuffer.circuleBuffer.pushBackBA(cryptLenBA);                     // 自己补上消息头
                pDataBuffer.rawBuffer.circuleBuffer.pushBackBA(pDataBuffer.sendBuffer);         // 直接放到接收原始消息缓冲区
                pDataBuffer.moveRaw2Msg();
            }

            ba = pDataBuffer.getMsg();
            UAssert.DebugAssert(ba != null);
            pUnitTestCmd.derialize(ba);
            UAssert.DebugAssert(pUnitTestCmd.testStr.Substring(0, 4) == "成功返回");

            pDataBuffer.getSendData();
            if (pDataBuffer.sendBuffer.length > 0)
            {
                cryptLenBA.clear();
                cryptLenBA.writeUnsignedInt32(pDataBuffer.sendBuffer.length);
                pDataBuffer.rawBuffer.circuleBuffer.pushBackBA(cryptLenBA);                     // 自己补上消息头
                pDataBuffer.rawBuffer.circuleBuffer.pushBackBA(pDataBuffer.sendBuffer);         // 直接放到接收原始消息缓冲区
                pDataBuffer.moveRaw2Msg();
            }

            ba = pDataBuffer.getMsg();
            UAssert.DebugAssert(ba != null);
            pUnitTesNumtCmd.derialize(ba);
            UAssert.DebugAssert(pUnitTesNumtCmd.num == 2001);
        }

        protected void testBA()
        {
            string str = "测试数据";
            ByteBuffer ba = new ByteBuffer();
            ba.writeMultiByte(str, GkEncode.UTF8, 24);
            ba.position = 0;
            string ret = "";
            ba.readMultiByte(ref ret, 24, GkEncode.UTF8);
        }

        protected void testSend()
        {
            ClientBuffer pDataBuffer = new ClientBuffer();
            stUseObjectPropertyUserCmd pCmd = new stUseObjectPropertyUserCmd();

            for (int idx = 0; idx < 500; ++idx)
            {
                Ctx.m_instance.m_logSys.log(string.Format("发送缓冲区测试索引 {0}", idx));
                pDataBuffer.sendData.clear();
                pCmd.serialize(pDataBuffer.sendData);
                pDataBuffer.send();
            }
        }

        // 从十六进制读取数据，看消息内容
        protected void testReadMsgFormHex()
        {
            ClientBuffer pDataBuffer = new ClientBuffer();
            byte[] key = new byte[8] { 67, 137, 94, 193, 131, 171, 134, 11 };

            byte[] hexMsg = new byte[648] { 0x11, 0xfe, 0x4a, 0x75, 0xbe, 0x88, 0xec, 0x1a, 0x0a, 0xbb, 0xab, 0x25, 0xe3, 0x4d, 0x8b, 0x52, 0xdf, 0xea, 0x93, 0x20, 0x6f, 0x25, 0xf9, 0xc5, 0x6f, 0xd8, 0x63, 0xa3, 0xe0, 0x59, 0x68, 0xdd, 0x69, 0xa9, 0x3c, 0xee, 0xf8, 0xb7, 0xb8, 0xcc, 0x1a, 0xe2, 0x67, 0xd0, 0x3e, 0xe6, 0x38, 0x8d, 0x1b, 0x62, 0x1f, 0x4f, 0x81, 0x82, 0xae, 0x98, 0x86, 0x8a, 0xbf, 0x63, 0xca, 0x2d, 0x43, 0x88, 0xe0, 0x97, 0x58, 0x89, 0x50, 0xc9, 0x84, 0x84, 0x62, 0x88, 0x9c, 0xb8, 0x69, 0x0c, 0x34, 0xac, 0x3d, 0xd9, 0x56, 0xc6, 0x83, 0xe4, 0x4f, 0x0f, 0x65, 0x02, 0x2a, 0x50, 0x3e, 0x06, 0x0d, 0x24, 0xfa, 0x62, 0x67, 0xa4, 0x73, 0x11, 0xf2, 0x19, 0x36, 0xfb, 0x13, 0x7c, 0x5b, 0xc1, 0xff, 0x7b, 0xc7, 0xbb, 0x97, 0x6f, 0x92, 0xa3, 0x08, 0xbb, 0x12, 0xfa, 0x45, 0x1f, 0xf0, 0x0e, 0x64, 0x7f, 0x85, 0x25, 0xb6, 0xe8, 0xab, 0x6d, 0x76, 0x99, 0xf3, 0x07, 0x12, 0xe5, 0x96, 0xdb, 0x23, 0x32, 0x26, 0x80, 0xb1, 0x81, 0xe8, 0xf6, 0x9f, 0xbf, 0xd4, 0xd9, 0xf9, 0xc0, 0x9b, 0xa0, 0x56, 0x3c, 0xf6, 0x9a, 0x42, 0xea, 0x19, 0x26, 0xfa, 0xe2, 0x42, 0xfc, 0x20, 0x15, 0x63, 0xe2, 0xcb, 0xf1, 0x1d, 0xe8, 0x96, 0x4a, 0xe7, 0x78, 0x82, 0x5b, 0x47, 0xab, 0x40, 0x13, 0x5d, 0x85, 0xbb, 0xdf, 0xdb, 0xd3, 0x37, 0xc8, 0x4b, 0xe7, 0x07, 0x5e, 0xf2, 0x6a, 0xcf, 0x10, 0x2c, 0x74, 0x8f, 0x70, 0x9b, 0x3a, 0xce, 0xcf, 0x43, 0x61, 0x10, 0x0a, 0xb8, 0xba, 0x41, 0x39, 0x6e, 0x5b, 0xc5, 0xf9, 0xbb, 0x95, 0x79, 0xd2, 0x24, 0x5f, 0x3c, 0x4a, 0x39, 0xaf, 0x51, 0xe7, 0x3f, 0xcc, 0x42, 0x8c, 0x69, 0x2f, 0xcb, 0xcc, 0xfb, 0xb7, 0x5f, 0x89, 0xf9, 0x10, 0xbb, 0x6d, 0xba, 0xe6, 0xbe, 0x2e, 0xfc, 0x54, 0x1f, 0x1c, 0x97, 0xff, 0xf7, 0x44, 0x0d, 0x71, 0xce, 0xaa, 0x4e, 0xfa, 0xeb, 0x7a, 0xb6, 0xf4, 0xb7, 0x20, 0xa6, 0xa5, 0x40, 0x7f, 0xcd, 0x40, 0xb5, 0xc1, 0x39, 0xe2, 0x3e, 0x56, 0xcd, 0x98, 0x58, 0x99, 0x4f, 0x01, 0x2f, 0x59, 0x50, 0x1f, 0x5d, 0xeb, 0x9f, 0x62, 0x36, 0x40, 0x67, 0x25, 0x72, 0xe1, 0xe0, 0xde, 0x4e, 0x85, 0x5d, 0x7b, 0x05, 0xef, 0x1b, 0x3b, 0x79, 0x90, 0xf4, 0x83, 0x66, 0x97, 0x4f, 0xd9, 0xb1, 0x69, 0xd8, 0xc5, 0xf4, 0x31, 0x68, 0xf0, 0xf0, 0xf3, 0xe0, 0x31, 0x42, 0x75, 0x1d, 0xf8, 0xea, 0xd3, 0x19, 0x26, 0xa4, 0xbe, 0x3a, 0x7a, 0x55, 0xa5, 0xe5, 0x04, 0x57, 0x00, 0x2d, 0xd9, 0xd2, 0x74, 0xff, 0x09, 0x6b, 0x88, 0x75, 0x94, 0x8b, 0xb9, 0xa9, 0xd5, 0x2c, 0x12, 0x30, 0x0b, 0xfe, 0x5f, 0x81, 0x8a, 0xa6, 0x26, 0xc9, 0xfb, 0x0a, 0xff, 0x2a, 0x90, 0x0d, 0x26, 0x2d, 0xcf, 0x98, 0x25, 0xa5, 0x7b, 0x23, 0x21, 0x64, 0xda, 0x08, 0x20, 0x51, 0x13, 0x1f, 0xb7, 0x81, 0x7b, 0x36, 0xf2, 0xcd, 0x6e, 0xf8, 0x10, 0x53, 0x81, 0xef, 0x72, 0xac, 0x9b, 0xa4, 0xe5, 0x26, 0x77, 0x9f, 0xc6, 0x6a, 0xd0, 0x42, 0x7e, 0xaa, 0x0e, 0xb5, 0x1d, 0x2e, 0x06, 0x96, 0x63, 0xa5, 0x18, 0xe4, 0xa8, 0x7a, 0xa9, 0xe4, 0x27, 0x15, 0x7d, 0xfd, 0x34, 0xbb, 0x7a, 0x01, 0xb9, 0xe5, 0x5a, 0x69, 0x0c, 0x1d, 0xe8, 0x96, 0x4a, 0xe7, 0x78, 0x82, 0x5b, 0xe5, 0x77, 0x27, 0x86, 0xd2, 0x77, 0xc4, 0xfd, 0x50, 0xb3, 0x78, 0xb7, 0x40, 0x8f, 0x7f, 0xb7, 0xd3, 0xf6, 0x72, 0x5f, 0x72, 0xd3, 0xec, 0x39, 0xf1, 0xa4, 0x44, 0x1e, 0xea, 0x54, 0x38, 0xbc, 0x04, 0x35, 0x2a, 0xfb, 0x1a, 0x23, 0x32, 0x32, 0xa1, 0x4a, 0x4c, 0xfa, 0x9e, 0x64, 0xde, 0x97, 0x94, 0x97, 0x60, 0x37, 0xc4, 0xe4, 0xc1, 0xc1, 0xd4, 0xd9, 0xf9, 0xc0, 0x9b, 0xa0, 0x56, 0x3c, 0xea, 0x13, 0x22, 0x6d, 0xe9, 0x44, 0x00, 0x69, 0x60, 0xb7, 0x82, 0xbf, 0xdb, 0x55, 0xcf, 0x2d, 0x3d, 0x7d, 0xe6, 0x03, 0x74, 0x7d, 0x18, 0x99, 0x9e, 0xe7, 0x09, 0x3e, 0xcf, 0xb0, 0x14, 0xcb, 0xfb, 0x00, 0xb6, 0x86, 0x33, 0xe1, 0x3d, 0xe6, 0x27, 0xf3, 0x78, 0x11, 0x37, 0x12, 0xf2, 0x89, 0xf7, 0x29, 0x04, 0x19, 0x05, 0x09, 0x5c, 0x2a, 0x97, 0xab, 0x93, 0x79, 0xa6, 0x5c, 0x9f, 0xdd, 0xba, 0x98, 0x91, 0x90, 0xcc, 0xad, 0xbb, 0xc4, 0x4f, 0xbc, 0xfa, 0x0a, 0xec, 0xe8, 0x96, 0x0d, 0x32, 0x21, 0xb8, 0x5d, 0x66, 0xe9, 0x93, 0x9d, 0x99, 0x1d, 0x1e, 0x81, 0xf1, 0xc8, 0x18, 0x4c, 0x15, 0xbe, 0x56, 0x9a, 0xdb, 0xb8, 0x5b, 0x44, 0x89, 0x52, 0xdb, 0xba, 0xcc, 0x7c, 0xee, 0xf5, 0x9b, 0x45, 0x22, 0x10, 0x11, 0xbd, 0xba, 0xc5 };

            pDataBuffer.setCryptKey(key);
            pDataBuffer.dynBuff.size = (uint)hexMsg.Length;
            Array.Copy(hexMsg, 0, pDataBuffer.dynBuff.buff, 0, hexMsg.Length);
            pDataBuffer.moveDyn2Raw();
            pDataBuffer.moveRaw2Msg();

            ByteBuffer buff;
            while((buff = pDataBuffer.getMsg()) != null)
            {
                if (null != Ctx.m_instance.m_netDispList)
                {
                    Ctx.m_instance.m_netDispList.handleMsg(buff);
                }
            }
        }

        protected void testReceiveMsg()
        {
            ClientBuffer pDataBuffer = new ClientBuffer();
            stAddBattleCardPropertyUserCmd pCmd = new stAddBattleCardPropertyUserCmd();

            for (int idx = 0; idx < 6; ++idx)
            {
                Ctx.m_instance.m_logSys.log(string.Format("接收缓冲区测试索引 {0}", idx));

                pDataBuffer.sendData.clear();
                pCmd.serialize(pDataBuffer.sendData);
                pDataBuffer.send();
                pDataBuffer.getSendData();
                pDataBuffer.dynBuff.size = pDataBuffer.sendBuffer.length;
                Array.Copy(pDataBuffer.sendBuffer.dynBuff.buff, 0, pDataBuffer.dynBuff.buff, 0, pDataBuffer.sendBuffer.length);
                pDataBuffer.moveDyn2Raw();
                pDataBuffer.moveRaw2Msg();
            }

            Ctx.m_instance.m_logSys.log(string.Format("接收缓冲区测试索引 {0}", 6));

            stRetRemoveBattleCardUserCmd pCmd_1 = new stRetRemoveBattleCardUserCmd();

            pDataBuffer.sendData.clear();
            pCmd_1.serialize(pDataBuffer.sendData);
            pDataBuffer.send();
            pDataBuffer.getSendData();
            pDataBuffer.dynBuff.size = pDataBuffer.sendBuffer.length;
            Array.Copy(pDataBuffer.sendBuffer.dynBuff.buff, 0, pDataBuffer.dynBuff.buff, 0, pDataBuffer.sendBuffer.length);
            pDataBuffer.moveDyn2Raw();
            pDataBuffer.moveRaw2Msg();

            for (int idx = 7; idx < 13; ++idx)
            {
                Ctx.m_instance.m_logSys.log(string.Format("接收缓冲区测试索引 {0}", idx));

                pDataBuffer.sendData.clear();
                pCmd.serialize(pDataBuffer.sendData);
                pDataBuffer.send();
                pDataBuffer.getSendData();
                pDataBuffer.dynBuff.size = pDataBuffer.sendBuffer.length;
                Array.Copy(pDataBuffer.sendBuffer.dynBuff.buff, 0, pDataBuffer.dynBuff.buff, 0, pDataBuffer.sendBuffer.length);
                pDataBuffer.moveDyn2Raw();
                pDataBuffer.moveRaw2Msg();
            }
        }
    }
}