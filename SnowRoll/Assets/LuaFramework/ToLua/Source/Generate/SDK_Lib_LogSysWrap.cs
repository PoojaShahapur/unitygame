//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_LogSysWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.LogSys), typeof(System.Object));
		L.RegFunction("init", init);
		L.RegFunction("dispose", dispose);
		L.RegFunction("setEnableLog", setEnableLog);
		L.RegFunction("registerFileLogDevice", registerFileLogDevice);
		L.RegFunction("debugLog_1", debugLog_1);
		L.RegFunction("formatLog", formatLog);
		L.RegFunction("catchLog", catchLog);
		L.RegFunction("fightLog", fightLog);
		L.RegFunction("lua_log", lua_log);
		L.RegFunction("log", log);
		L.RegFunction("lua_warn", lua_warn);
		L.RegFunction("warn", warn);
		L.RegFunction("lua_error", lua_error);
		L.RegFunction("error", error);
		L.RegFunction("logout", logout);
		L.RegFunction("updateLog", updateLog);
		L.RegFunction("closeDevice", closeDevice);
		L.RegFunction("logLoad", logLoad);
		L.RegFunction("New", _CreateSDK_Lib_LogSys);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mTmpStr", get_mTmpStr, set_mTmpStr);
		L.RegVar("mIsOutLog", get_mIsOutLog, set_mIsOutLog);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_LogSys(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.LogSys obj = new SDK.Lib.LogSys();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.LogSys.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			obj.init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			obj.dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEnableLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.setEnableLog(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int registerFileLogDevice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			obj.registerFileLogDevice();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int debugLog_1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			SDK.Lib.LangItemID arg0 = (SDK.Lib.LangItemID)ToLua.CheckObject(L, 2, typeof(SDK.Lib.LangItemID));
			string arg1 = ToLua.CheckString(L, 3);
			obj.debugLog_1(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int formatLog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			SDK.Lib.LangTypeId arg0 = (SDK.Lib.LangTypeId)ToLua.CheckObject(L, 2, typeof(SDK.Lib.LangTypeId));
			SDK.Lib.LangItemID arg1 = (SDK.Lib.LangItemID)ToLua.CheckObject(L, 3, typeof(SDK.Lib.LangItemID));
			string[] arg2 = ToLua.CheckParamsString(L, 4, count - 3);
			obj.formatLog(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int catchLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			obj.catchLog(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int fightLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			obj.fightLog(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int lua_log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.lua_log(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			SDK.Lib.LogTypeId arg1 = (SDK.Lib.LogTypeId)ToLua.CheckObject(L, 3, typeof(SDK.Lib.LogTypeId));
			obj.log(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int lua_warn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.lua_warn(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int warn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			SDK.Lib.LogTypeId arg1 = (SDK.Lib.LogTypeId)ToLua.CheckObject(L, 3, typeof(SDK.Lib.LogTypeId));
			obj.warn(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int lua_error(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.lua_error(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int error(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			SDK.Lib.LogTypeId arg1 = (SDK.Lib.LogTypeId)ToLua.CheckObject(L, 3, typeof(SDK.Lib.LogTypeId));
			obj.error(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int logout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			string arg0 = ToLua.CheckString(L, 2);
			SDK.Lib.LogColor arg1 = (SDK.Lib.LogColor)ToLua.CheckObject(L, 3, typeof(SDK.Lib.LogColor));
			obj.logout(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int updateLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			obj.updateLog();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int closeDevice(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			obj.closeDevice();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int logLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)ToLua.CheckObject(L, 1, typeof(SDK.Lib.LogSys));
			SDK.Lib.InsResBase arg0 = (SDK.Lib.InsResBase)ToLua.CheckObject(L, 2, typeof(SDK.Lib.InsResBase));
			obj.logLoad(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mTmpStr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)o;
			string ret = obj.mTmpStr;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mTmpStr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mIsOutLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)o;
			bool ret = obj.mIsOutLog;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mIsOutLog on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mTmpStr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.mTmpStr = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mTmpStr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mIsOutLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.Lib.LogSys obj = (SDK.Lib.LogSys)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.mIsOutLog = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mIsOutLog on a nil value" : e.Message);
		}
	}
}

