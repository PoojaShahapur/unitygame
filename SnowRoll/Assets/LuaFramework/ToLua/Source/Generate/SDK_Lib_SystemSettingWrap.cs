//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_Lib_SystemSettingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.Lib.SystemSetting), typeof(System.Object));
		L.RegFunction("setString", setString);
		L.RegFunction("getString", getString);
		L.RegFunction("New", _CreateSDK_Lib_SystemSetting);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("USERNAME", get_USERNAME, null);
		L.RegVar("PASSWORD", get_PASSWORD, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSDK_Lib_SystemSetting(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SDK.Lib.SystemSetting obj = new SDK.Lib.SystemSetting();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SDK.Lib.SystemSetting.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.Lib.SystemSetting obj = (SDK.Lib.SystemSetting)ToLua.CheckObject(L, 1, typeof(SDK.Lib.SystemSetting));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.setString(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.Lib.SystemSetting obj = (SDK.Lib.SystemSetting)ToLua.CheckObject(L, 1, typeof(SDK.Lib.SystemSetting));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.getString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_USERNAME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SDK.Lib.SystemSetting.USERNAME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PASSWORD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, SDK.Lib.SystemSetting.PASSWORD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

