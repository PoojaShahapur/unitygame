// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_cmd.proto

#ifndef PROTOBUF_test_5fcmd_2eproto__INCLUDED
#define PROTOBUF_test_5fcmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace svr {
class TestCmdRequest;
class TestCmdRequestDefaultTypeInternal;
extern TestCmdRequestDefaultTypeInternal _TestCmdRequest_default_instance_;
class TestCmdResponse;
class TestCmdResponseDefaultTypeInternal;
extern TestCmdResponseDefaultTypeInternal _TestCmdResponse_default_instance_;
}  // namespace svr

namespace svr {

namespace protobuf_test_5fcmd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_test_5fcmd_2eproto

enum TestCmdResponse_TestCmdResult {
  TestCmdResponse_TestCmdResult_OK = 0,
  TestCmdResponse_TestCmdResult_ERR = 1,
  TestCmdResponse_TestCmdResult_TestCmdResponse_TestCmdResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TestCmdResponse_TestCmdResult_TestCmdResponse_TestCmdResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TestCmdResponse_TestCmdResult_IsValid(int value);
const TestCmdResponse_TestCmdResult TestCmdResponse_TestCmdResult_TestCmdResult_MIN = TestCmdResponse_TestCmdResult_OK;
const TestCmdResponse_TestCmdResult TestCmdResponse_TestCmdResult_TestCmdResult_MAX = TestCmdResponse_TestCmdResult_ERR;
const int TestCmdResponse_TestCmdResult_TestCmdResult_ARRAYSIZE = TestCmdResponse_TestCmdResult_TestCmdResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestCmdResponse_TestCmdResult_descriptor();
inline const ::std::string& TestCmdResponse_TestCmdResult_Name(TestCmdResponse_TestCmdResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestCmdResponse_TestCmdResult_descriptor(), value);
}
inline bool TestCmdResponse_TestCmdResult_Parse(
    const ::std::string& name, TestCmdResponse_TestCmdResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestCmdResponse_TestCmdResult>(
    TestCmdResponse_TestCmdResult_descriptor(), name, value);
}
// ===================================================================

class TestCmdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svr.TestCmdRequest) */ {
 public:
  TestCmdRequest();
  virtual ~TestCmdRequest();

  TestCmdRequest(const TestCmdRequest& from);

  inline TestCmdRequest& operator=(const TestCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCmdRequest& default_instance();

  static inline const TestCmdRequest* internal_default_instance() {
    return reinterpret_cast<const TestCmdRequest*>(
               &_TestCmdRequest_default_instance_);
  }

  void Swap(TestCmdRequest* other);

  // implements Message ----------------------------------------------

  inline TestCmdRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TestCmdRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestCmdRequest& from);
  void MergeFrom(const TestCmdRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestCmdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:svr.TestCmdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  mutable int _cached_size_;
  friend struct  protobuf_test_5fcmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestCmdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svr.TestCmdResponse) */ {
 public:
  TestCmdResponse();
  virtual ~TestCmdResponse();

  TestCmdResponse(const TestCmdResponse& from);

  inline TestCmdResponse& operator=(const TestCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCmdResponse& default_instance();

  static inline const TestCmdResponse* internal_default_instance() {
    return reinterpret_cast<const TestCmdResponse*>(
               &_TestCmdResponse_default_instance_);
  }

  void Swap(TestCmdResponse* other);

  // implements Message ----------------------------------------------

  inline TestCmdResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TestCmdResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestCmdResponse& from);
  void MergeFrom(const TestCmdResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestCmdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TestCmdResponse_TestCmdResult TestCmdResult;
  static const TestCmdResult OK =
    TestCmdResponse_TestCmdResult_OK;
  static const TestCmdResult ERR =
    TestCmdResponse_TestCmdResult_ERR;
  static inline bool TestCmdResult_IsValid(int value) {
    return TestCmdResponse_TestCmdResult_IsValid(value);
  }
  static const TestCmdResult TestCmdResult_MIN =
    TestCmdResponse_TestCmdResult_TestCmdResult_MIN;
  static const TestCmdResult TestCmdResult_MAX =
    TestCmdResponse_TestCmdResult_TestCmdResult_MAX;
  static const int TestCmdResult_ARRAYSIZE =
    TestCmdResponse_TestCmdResult_TestCmdResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TestCmdResult_descriptor() {
    return TestCmdResponse_TestCmdResult_descriptor();
  }
  static inline const ::std::string& TestCmdResult_Name(TestCmdResult value) {
    return TestCmdResponse_TestCmdResult_Name(value);
  }
  static inline bool TestCmdResult_Parse(const ::std::string& name,
      TestCmdResult* value) {
    return TestCmdResponse_TestCmdResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string error_str = 3;
  void clear_error_str();
  static const int kErrorStrFieldNumber = 3;
  const ::std::string& error_str() const;
  void set_error_str(const ::std::string& value);
  #if LANG_CXX11
  void set_error_str(::std::string&& value);
  #endif
  void set_error_str(const char* value);
  void set_error_str(const char* value, size_t size);
  ::std::string* mutable_error_str();
  ::std::string* release_error_str();
  void set_allocated_error_str(::std::string* error_str);

  // .svr.TestCmdResponse.TestCmdResult result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::svr::TestCmdResponse_TestCmdResult result() const;
  void set_result(::svr::TestCmdResponse_TestCmdResult value);

  // @@protoc_insertion_point(class_scope:svr.TestCmdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr error_str_;
  int result_;
  mutable int _cached_size_;
  friend struct  protobuf_test_5fcmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TestCmdRequest

// string cmd = 1;
inline void TestCmdRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCmdRequest::cmd() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdRequest.cmd)
  return cmd_.GetNoArena();
}
inline void TestCmdRequest::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.TestCmdRequest.cmd)
}
#if LANG_CXX11
inline void TestCmdRequest::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.TestCmdRequest.cmd)
}
#endif
inline void TestCmdRequest::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.TestCmdRequest.cmd)
}
inline void TestCmdRequest::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.TestCmdRequest.cmd)
}
inline ::std::string* TestCmdRequest::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:svr.TestCmdRequest.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCmdRequest::release_cmd() {
  // @@protoc_insertion_point(field_release:svr.TestCmdRequest.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCmdRequest::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:svr.TestCmdRequest.cmd)
}

// -------------------------------------------------------------------

// TestCmdResponse

// string cmd = 1;
inline void TestCmdResponse::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCmdResponse::cmd() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdResponse.cmd)
  return cmd_.GetNoArena();
}
inline void TestCmdResponse::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.TestCmdResponse.cmd)
}
#if LANG_CXX11
inline void TestCmdResponse::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.TestCmdResponse.cmd)
}
#endif
inline void TestCmdResponse::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.TestCmdResponse.cmd)
}
inline void TestCmdResponse::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.TestCmdResponse.cmd)
}
inline ::std::string* TestCmdResponse::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:svr.TestCmdResponse.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCmdResponse::release_cmd() {
  // @@protoc_insertion_point(field_release:svr.TestCmdResponse.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCmdResponse::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:svr.TestCmdResponse.cmd)
}

// .svr.TestCmdResponse.TestCmdResult result = 2;
inline void TestCmdResponse::clear_result() {
  result_ = 0;
}
inline ::svr::TestCmdResponse_TestCmdResult TestCmdResponse::result() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdResponse.result)
  return static_cast< ::svr::TestCmdResponse_TestCmdResult >(result_);
}
inline void TestCmdResponse::set_result(::svr::TestCmdResponse_TestCmdResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:svr.TestCmdResponse.result)
}

// string error_str = 3;
inline void TestCmdResponse::clear_error_str() {
  error_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCmdResponse::error_str() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdResponse.error_str)
  return error_str_.GetNoArena();
}
inline void TestCmdResponse::set_error_str(const ::std::string& value) {
  
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.TestCmdResponse.error_str)
}
#if LANG_CXX11
inline void TestCmdResponse::set_error_str(::std::string&& value) {
  
  error_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.TestCmdResponse.error_str)
}
#endif
inline void TestCmdResponse::set_error_str(const char* value) {
  
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.TestCmdResponse.error_str)
}
inline void TestCmdResponse::set_error_str(const char* value, size_t size) {
  
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.TestCmdResponse.error_str)
}
inline ::std::string* TestCmdResponse::mutable_error_str() {
  
  // @@protoc_insertion_point(field_mutable:svr.TestCmdResponse.error_str)
  return error_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCmdResponse::release_error_str() {
  // @@protoc_insertion_point(field_release:svr.TestCmdResponse.error_str)
  
  return error_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCmdResponse::set_allocated_error_str(::std::string* error_str) {
  if (error_str != NULL) {
    
  } else {
    
  }
  error_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_str);
  // @@protoc_insertion_point(field_set_allocated:svr.TestCmdResponse.error_str)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace svr

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::svr::TestCmdResponse_TestCmdResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svr::TestCmdResponse_TestCmdResult>() {
  return ::svr::TestCmdResponse_TestCmdResult_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_5fcmd_2eproto__INCLUDED
