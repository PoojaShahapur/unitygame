// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#ifndef PROTOBUF_cluster_2eproto__INCLUDED
#define PROTOBUF_cluster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "server_empty_msg.pb.h"
// @@protoc_insertion_point(includes)
namespace svr {
class CellInfo;
class CellInfoDefaultTypeInternal;
extern CellInfoDefaultTypeInternal _CellInfo_default_instance_;
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class EmptyMsg;
class EmptyMsgDefaultTypeInternal;
extern EmptyMsgDefaultTypeInternal _EmptyMsg_default_instance_;
}  // namespace svr

namespace svr {

namespace protobuf_cluster_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cluster_2eproto

// ===================================================================


// -------------------------------------------------------------------

class ClusterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svr.ClusterInfo) */ {
 public:
  ClusterInfo();
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterInfo& default_instance();

  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }

  void Swap(ClusterInfo* other);

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .svr.CellInfo> cell_info_map = 1;
  int cell_info_map_size() const;
  void clear_cell_info_map();
  static const int kCellInfoMapFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >&
      cell_info_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >*
      mutable_cell_info_map();

  // @@protoc_insertion_point(class_scope:svr.ClusterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::svr::CellInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ClusterInfo_CellInfoMapEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::svr::CellInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cell_info_map_;
  mutable int _cached_size_;
  friend struct  protobuf_cluster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CellInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:svr.CellInfo) */ {
 public:
  CellInfo();
  virtual ~CellInfo();

  CellInfo(const CellInfo& from);

  inline CellInfo& operator=(const CellInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CellInfo& default_instance();

  static inline const CellInfo* internal_default_instance() {
    return reinterpret_cast<const CellInfo*>(
               &_CellInfo_default_instance_);
  }

  void Swap(CellInfo* other);

  // implements Message ----------------------------------------------

  inline CellInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CellInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CellInfo& from);
  void MergeFrom(const CellInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CellInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_host = 2;
  void clear_inner_host();
  static const int kInnerHostFieldNumber = 2;
  const ::std::string& inner_host() const;
  void set_inner_host(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_host(::std::string&& value);
  #endif
  void set_inner_host(const char* value);
  void set_inner_host(const char* value, size_t size);
  ::std::string* mutable_inner_host();
  ::std::string* release_inner_host();
  void set_allocated_inner_host(::std::string* inner_host);

  // uint32 cell_id = 1;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 1;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // uint32 inner_port = 3;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 3;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // uint64 start_ts = 4;
  void clear_start_ts();
  static const int kStartTsFieldNumber = 4;
  ::google::protobuf::uint64 start_ts() const;
  void set_start_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:svr.CellInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_host_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::uint32 inner_port_;
  ::google::protobuf::uint64 start_ts_;
  mutable int _cached_size_;
  friend struct  protobuf_cluster_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// ClusterInfo

// map<uint32, .svr.CellInfo> cell_info_map = 1;
inline int ClusterInfo::cell_info_map_size() const {
  return cell_info_map_.size();
}
inline void ClusterInfo::clear_cell_info_map() {
  cell_info_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >&
ClusterInfo::cell_info_map() const {
  // @@protoc_insertion_point(field_map:svr.ClusterInfo.cell_info_map)
  return cell_info_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >*
ClusterInfo::mutable_cell_info_map() {
  // @@protoc_insertion_point(field_mutable_map:svr.ClusterInfo.cell_info_map)
  return cell_info_map_.MutableMap();
}

// -------------------------------------------------------------------

// CellInfo

// uint32 cell_id = 1;
inline void CellInfo::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::google::protobuf::uint32 CellInfo::cell_id() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.cell_id)
  return cell_id_;
}
inline void CellInfo::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:svr.CellInfo.cell_id)
}

// string inner_host = 2;
inline void CellInfo::clear_inner_host() {
  inner_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CellInfo::inner_host() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.inner_host)
  return inner_host_.GetNoArena();
}
inline void CellInfo::set_inner_host(const ::std::string& value) {
  
  inner_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.CellInfo.inner_host)
}
#if LANG_CXX11
inline void CellInfo::set_inner_host(::std::string&& value) {
  
  inner_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.CellInfo.inner_host)
}
#endif
inline void CellInfo::set_inner_host(const char* value) {
  
  inner_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.CellInfo.inner_host)
}
inline void CellInfo::set_inner_host(const char* value, size_t size) {
  
  inner_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.CellInfo.inner_host)
}
inline ::std::string* CellInfo::mutable_inner_host() {
  
  // @@protoc_insertion_point(field_mutable:svr.CellInfo.inner_host)
  return inner_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CellInfo::release_inner_host() {
  // @@protoc_insertion_point(field_release:svr.CellInfo.inner_host)
  
  return inner_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CellInfo::set_allocated_inner_host(::std::string* inner_host) {
  if (inner_host != NULL) {
    
  } else {
    
  }
  inner_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_host);
  // @@protoc_insertion_point(field_set_allocated:svr.CellInfo.inner_host)
}

// uint32 inner_port = 3;
inline void CellInfo::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 CellInfo::inner_port() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.inner_port)
  return inner_port_;
}
inline void CellInfo::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:svr.CellInfo.inner_port)
}

// uint64 start_ts = 4;
inline void CellInfo::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CellInfo::start_ts() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.start_ts)
  return start_ts_;
}
inline void CellInfo::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:svr.CellInfo.start_ts)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace svr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cluster_2eproto__INCLUDED
