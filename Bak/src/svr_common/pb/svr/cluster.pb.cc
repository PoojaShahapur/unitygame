// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cluster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svr {
class ClusterInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterInfo> {
} _ClusterInfo_default_instance_;
class CellInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CellInfo> {
} _CellInfo_default_instance_;

namespace protobuf_cluster_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterInfo, cell_info_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, inner_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, inner_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, start_ts_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ClusterInfo)},
  { 5, -1, sizeof(CellInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CellInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cluster.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
  const ::google::protobuf::Descriptor* ClusterInfo_CellInfoMapEntry_descriptor = protobuf_cluster_2eproto::file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ClusterInfo_CellInfoMapEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::svr::CellInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ClusterInfo_CellInfoMapEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _ClusterInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CellInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::svr::protobuf_server_5fempty_5fmsg_2eproto::InitDefaults();
  _ClusterInfo_default_instance_.DefaultConstruct();
  _CellInfo_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rcluster.proto\022\003svr\032\026server_empty_msg.p"
      "roto\"\212\001\n\013ClusterInfo\0228\n\rcell_info_map\030\001 "
      "\003(\0132!.svr.ClusterInfo.CellInfoMapEntry\032A"
      "\n\020CellInfoMapEntry\022\013\n\003key\030\001 \001(\r\022\034\n\005value"
      "\030\002 \001(\0132\r.svr.CellInfo:\0028\001\"U\n\010CellInfo\022\017\n"
      "\007cell_id\030\001 \001(\r\022\022\n\ninner_host\030\002 \001(\t\022\022\n\nin"
      "ner_port\030\003 \001(\r\022\020\n\010start_ts\030\004 \001(\0042\215\001\n\007Clu"
      "ster\0223\n\rUpdateCluster\022\020.svr.ClusterInfo\032"
      "\020.svr.ClusterInfo\022\'\n\007AddCell\022\r.svr.CellI"
      "nfo\032\r.svr.EmptyMsg\022$\n\004Ping\022\r.svr.EmptyMs"
      "g\032\r.svr.EmptyMsgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cluster.proto", &protobuf_RegisterTypes);
  ::svr::protobuf_server_5fempty_5fmsg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cluster_2eproto


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterInfo::kCellInfoMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterInfo::ClusterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cluster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ClusterInfo)
}
ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& ClusterInfo_CellInfoMapEntry_descriptor = protobuf_cluster_2eproto::file_level_metadata[0].descriptor;
  cell_info_map_.SetAssignDescriptorCallback(
      protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce);
  cell_info_map_.SetEntryDescriptor(
      &ClusterInfo_CellInfoMapEntry_descriptor);
  cell_info_map_.MergeFrom(from.cell_info_map_);
  // @@protoc_insertion_point(copy_constructor:svr.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  const ::google::protobuf::Descriptor*& ClusterInfo_CellInfoMapEntry_descriptor = protobuf_cluster_2eproto::file_level_metadata[0].descriptor;
  cell_info_map_.SetAssignDescriptorCallback(
      protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce);
  cell_info_map_.SetEntryDescriptor(
      &ClusterInfo_CellInfoMapEntry_descriptor);
  _cached_size_ = 0;
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:svr.ClusterInfo)
  SharedDtor();
}

void ClusterInfo::SharedDtor() {
}

void ClusterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterInfo::descriptor() {
  protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cluster_2eproto::file_level_metadata[1].descriptor;
}

const ClusterInfo& ClusterInfo::default_instance() {
  protobuf_cluster_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterInfo* ClusterInfo::New(::google::protobuf::Arena* arena) const {
  ClusterInfo* n = new ClusterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.ClusterInfo)
  cell_info_map_.Clear();
}

bool ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ClusterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .svr.CellInfo> cell_info_map = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          ClusterInfo_CellInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::svr::CellInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo > > parser(&cell_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ClusterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ClusterInfo)
  return false;
#undef DO_
}

void ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ClusterInfo)
  // map<uint32, .svr.CellInfo> cell_info_map = 1;
  if (!this->cell_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->cell_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cell_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_iterator
          it = this->cell_info_map().begin();
          it != this->cell_info_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ClusterInfo_CellInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cell_info_map_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ClusterInfo_CellInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_iterator
          it = this->cell_info_map().begin();
          it != this->cell_info_map().end(); ++it) {
        entry.reset(cell_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:svr.ClusterInfo)
}

::google::protobuf::uint8* ClusterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.ClusterInfo)
  // map<uint32, .svr.CellInfo> cell_info_map = 1;
  if (!this->cell_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->cell_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cell_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_iterator
          it = this->cell_info_map().begin();
          it != this->cell_info_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ClusterInfo_CellInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cell_info_map_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ClusterInfo_CellInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_iterator
          it = this->cell_info_map().begin();
          it != this->cell_info_map().end(); ++it) {
        entry.reset(cell_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.ClusterInfo)
  size_t total_size = 0;

  // map<uint32, .svr.CellInfo> cell_info_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cell_info_map_size());
  {
    ::google::protobuf::scoped_ptr<ClusterInfo_CellInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >::const_iterator
        it = this->cell_info_map().begin();
        it != this->cell_info_map().end(); ++it) {
      entry.reset(cell_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.ClusterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.ClusterInfo)
    MergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cell_info_map_.MergeFrom(from.cell_info_map_);
}

void ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {
  return true;
}

void ClusterInfo::Swap(ClusterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterInfo::InternalSwap(ClusterInfo* other) {
  cell_info_map_.Swap(&other->cell_info_map_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterInfo::GetMetadata() const {
  protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cluster_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterInfo

// map<uint32, .svr.CellInfo> cell_info_map = 1;
int ClusterInfo::cell_info_map_size() const {
  return cell_info_map_.size();
}
void ClusterInfo::clear_cell_info_map() {
  cell_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >&
ClusterInfo::cell_info_map() const {
  // @@protoc_insertion_point(field_map:svr.ClusterInfo.cell_info_map)
  return cell_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::svr::CellInfo >*
ClusterInfo::mutable_cell_info_map() {
  // @@protoc_insertion_point(field_mutable_map:svr.ClusterInfo.cell_info_map)
  return cell_info_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CellInfo::kCellIdFieldNumber;
const int CellInfo::kInnerHostFieldNumber;
const int CellInfo::kInnerPortFieldNumber;
const int CellInfo::kStartTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CellInfo::CellInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cluster_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.CellInfo)
}
CellInfo::CellInfo(const CellInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_host().size() > 0) {
    inner_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_host_);
  }
  ::memcpy(&cell_id_, &from.cell_id_,
    reinterpret_cast<char*>(&start_ts_) -
    reinterpret_cast<char*>(&cell_id_) + sizeof(start_ts_));
  // @@protoc_insertion_point(copy_constructor:svr.CellInfo)
}

void CellInfo::SharedCtor() {
  inner_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cell_id_, 0, reinterpret_cast<char*>(&start_ts_) -
    reinterpret_cast<char*>(&cell_id_) + sizeof(start_ts_));
  _cached_size_ = 0;
}

CellInfo::~CellInfo() {
  // @@protoc_insertion_point(destructor:svr.CellInfo)
  SharedDtor();
}

void CellInfo::SharedDtor() {
  inner_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellInfo::descriptor() {
  protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cluster_2eproto::file_level_metadata[2].descriptor;
}

const CellInfo& CellInfo::default_instance() {
  protobuf_cluster_2eproto::InitDefaults();
  return *internal_default_instance();
}

CellInfo* CellInfo::New(::google::protobuf::Arena* arena) const {
  CellInfo* n = new CellInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CellInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.CellInfo)
  inner_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cell_id_, 0, reinterpret_cast<char*>(&start_ts_) -
    reinterpret_cast<char*>(&cell_id_) + sizeof(start_ts_));
}

bool CellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.CellInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cell_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner_host = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_host().data(), this->inner_host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.CellInfo.inner_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_ts = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.CellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.CellInfo)
  return false;
#undef DO_
}

void CellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.CellInfo)
  // uint32 cell_id = 1;
  if (this->cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // string inner_host = 2;
  if (this->inner_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_host().data(), this->inner_host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.CellInfo.inner_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inner_host(), output);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inner_port(), output);
  }

  // uint64 start_ts = 4;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_ts(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.CellInfo)
}

::google::protobuf::uint8* CellInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.CellInfo)
  // uint32 cell_id = 1;
  if (this->cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cell_id(), target);
  }

  // string inner_host = 2;
  if (this->inner_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_host().data(), this->inner_host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.CellInfo.inner_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inner_host(), target);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inner_port(), target);
  }

  // uint64 start_ts = 4;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_ts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.CellInfo)
  return target;
}

size_t CellInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.CellInfo)
  size_t total_size = 0;

  // string inner_host = 2;
  if (this->inner_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_host());
  }

  // uint32 cell_id = 1;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_id());
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  // uint64 start_ts = 4;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.CellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CellInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CellInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.CellInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.CellInfo)
    MergeFrom(*source);
  }
}

void CellInfo::MergeFrom(const CellInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.CellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.inner_host().size() > 0) {

    inner_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_host_);
  }
  if (from.cell_id() != 0) {
    set_cell_id(from.cell_id());
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
}

void CellInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.CellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellInfo::CopyFrom(const CellInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.CellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellInfo::IsInitialized() const {
  return true;
}

void CellInfo::Swap(CellInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CellInfo::InternalSwap(CellInfo* other) {
  inner_host_.Swap(&other->inner_host_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(inner_port_, other->inner_port_);
  std::swap(start_ts_, other->start_ts_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellInfo::GetMetadata() const {
  protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cluster_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellInfo

// uint32 cell_id = 1;
void CellInfo::clear_cell_id() {
  cell_id_ = 0u;
}
::google::protobuf::uint32 CellInfo::cell_id() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.cell_id)
  return cell_id_;
}
void CellInfo::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:svr.CellInfo.cell_id)
}

// string inner_host = 2;
void CellInfo::clear_inner_host() {
  inner_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CellInfo::inner_host() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.inner_host)
  return inner_host_.GetNoArena();
}
void CellInfo::set_inner_host(const ::std::string& value) {
  
  inner_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.CellInfo.inner_host)
}
#if LANG_CXX11
void CellInfo::set_inner_host(::std::string&& value) {
  
  inner_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.CellInfo.inner_host)
}
#endif
void CellInfo::set_inner_host(const char* value) {
  
  inner_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.CellInfo.inner_host)
}
void CellInfo::set_inner_host(const char* value, size_t size) {
  
  inner_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.CellInfo.inner_host)
}
::std::string* CellInfo::mutable_inner_host() {
  
  // @@protoc_insertion_point(field_mutable:svr.CellInfo.inner_host)
  return inner_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CellInfo::release_inner_host() {
  // @@protoc_insertion_point(field_release:svr.CellInfo.inner_host)
  
  return inner_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CellInfo::set_allocated_inner_host(::std::string* inner_host) {
  if (inner_host != NULL) {
    
  } else {
    
  }
  inner_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_host);
  // @@protoc_insertion_point(field_set_allocated:svr.CellInfo.inner_host)
}

// uint32 inner_port = 3;
void CellInfo::clear_inner_port() {
  inner_port_ = 0u;
}
::google::protobuf::uint32 CellInfo::inner_port() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.inner_port)
  return inner_port_;
}
void CellInfo::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:svr.CellInfo.inner_port)
}

// uint64 start_ts = 4;
void CellInfo::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CellInfo::start_ts() const {
  // @@protoc_insertion_point(field_get:svr.CellInfo.start_ts)
  return start_ts_;
}
void CellInfo::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:svr.CellInfo.start_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace svr

// @@protoc_insertion_point(global_scope)
