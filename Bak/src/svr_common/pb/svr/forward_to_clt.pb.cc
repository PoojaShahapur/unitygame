// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forward_to_clt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "forward_to_clt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svr {
class ForwardToCltRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardToCltRequest> {
} _ForwardToCltRequest_default_instance_;
class ForwardToCltResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardToCltResponse> {
} _ForwardToCltResponse_default_instance_;

namespace protobuf_forward_5fto_5fclt_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltRequest, base_rpc_clt_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltRequest, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltRequest, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltRequest, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToCltResponse, content_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ForwardToCltRequest)},
  { 8, -1, sizeof(ForwardToCltResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardToCltRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardToCltResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "forward_to_clt.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ForwardToCltRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ForwardToCltResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ForwardToCltRequest_default_instance_.DefaultConstruct();
  _ForwardToCltResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024forward_to_clt.proto\022\003svr\"`\n\023ForwardTo"
      "CltRequest\022\027\n\017base_rpc_clt_id\030\001 \001(\004\022\017\n\007s"
      "ervice\030\002 \001(\t\022\016\n\006method\030\003 \001(\t\022\017\n\007content\030"
      "\004 \001(\014\"\'\n\024ForwardToCltResponse\022\017\n\007content"
      "\030\001 \001(\0142S\n\014ForwardToClt\022C\n\014ForwardToClt\022\030"
      ".svr.ForwardToCltRequest\032\031.svr.ForwardTo"
      "CltResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "forward_to_clt.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_forward_5fto_5fclt_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardToCltRequest::kBaseRpcCltIdFieldNumber;
const int ForwardToCltRequest::kServiceFieldNumber;
const int ForwardToCltRequest::kMethodFieldNumber;
const int ForwardToCltRequest::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardToCltRequest::ForwardToCltRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_forward_5fto_5fclt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ForwardToCltRequest)
}
ForwardToCltRequest::ForwardToCltRequest(const ForwardToCltRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  base_rpc_clt_id_ = from.base_rpc_clt_id_;
  // @@protoc_insertion_point(copy_constructor:svr.ForwardToCltRequest)
}

void ForwardToCltRequest::SharedCtor() {
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_rpc_clt_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ForwardToCltRequest::~ForwardToCltRequest() {
  // @@protoc_insertion_point(destructor:svr.ForwardToCltRequest)
  SharedDtor();
}

void ForwardToCltRequest::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForwardToCltRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToCltRequest::descriptor() {
  protobuf_forward_5fto_5fclt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5fto_5fclt_2eproto::file_level_metadata[0].descriptor;
}

const ForwardToCltRequest& ForwardToCltRequest::default_instance() {
  protobuf_forward_5fto_5fclt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardToCltRequest* ForwardToCltRequest::New(::google::protobuf::Arena* arena) const {
  ForwardToCltRequest* n = new ForwardToCltRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardToCltRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.ForwardToCltRequest)
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_rpc_clt_id_ = GOOGLE_ULONGLONG(0);
}

bool ForwardToCltRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ForwardToCltRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 base_rpc_clt_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_rpc_clt_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.ForwardToCltRequest.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.ForwardToCltRequest.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ForwardToCltRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ForwardToCltRequest)
  return false;
#undef DO_
}

void ForwardToCltRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ForwardToCltRequest)
  // uint64 base_rpc_clt_id = 1;
  if (this->base_rpc_clt_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->base_rpc_clt_id(), output);
  }

  // string service = 2;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardToCltRequest.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service(), output);
  }

  // string method = 3;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardToCltRequest.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.ForwardToCltRequest)
}

::google::protobuf::uint8* ForwardToCltRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.ForwardToCltRequest)
  // uint64 base_rpc_clt_id = 1;
  if (this->base_rpc_clt_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->base_rpc_clt_id(), target);
  }

  // string service = 2;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardToCltRequest.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service(), target);
  }

  // string method = 3;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardToCltRequest.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.ForwardToCltRequest)
  return target;
}

size_t ForwardToCltRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.ForwardToCltRequest)
  size_t total_size = 0;

  // string service = 2;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // string method = 3;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // uint64 base_rpc_clt_id = 1;
  if (this->base_rpc_clt_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->base_rpc_clt_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToCltRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.ForwardToCltRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardToCltRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardToCltRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.ForwardToCltRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.ForwardToCltRequest)
    MergeFrom(*source);
  }
}

void ForwardToCltRequest::MergeFrom(const ForwardToCltRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.ForwardToCltRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.base_rpc_clt_id() != 0) {
    set_base_rpc_clt_id(from.base_rpc_clt_id());
  }
}

void ForwardToCltRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.ForwardToCltRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToCltRequest::CopyFrom(const ForwardToCltRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.ForwardToCltRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToCltRequest::IsInitialized() const {
  return true;
}

void ForwardToCltRequest::Swap(ForwardToCltRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardToCltRequest::InternalSwap(ForwardToCltRequest* other) {
  service_.Swap(&other->service_);
  method_.Swap(&other->method_);
  content_.Swap(&other->content_);
  std::swap(base_rpc_clt_id_, other->base_rpc_clt_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardToCltRequest::GetMetadata() const {
  protobuf_forward_5fto_5fclt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5fto_5fclt_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardToCltRequest

// uint64 base_rpc_clt_id = 1;
void ForwardToCltRequest::clear_base_rpc_clt_id() {
  base_rpc_clt_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ForwardToCltRequest::base_rpc_clt_id() const {
  // @@protoc_insertion_point(field_get:svr.ForwardToCltRequest.base_rpc_clt_id)
  return base_rpc_clt_id_;
}
void ForwardToCltRequest::set_base_rpc_clt_id(::google::protobuf::uint64 value) {
  
  base_rpc_clt_id_ = value;
  // @@protoc_insertion_point(field_set:svr.ForwardToCltRequest.base_rpc_clt_id)
}

// string service = 2;
void ForwardToCltRequest::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardToCltRequest::service() const {
  // @@protoc_insertion_point(field_get:svr.ForwardToCltRequest.service)
  return service_.GetNoArena();
}
void ForwardToCltRequest::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardToCltRequest.service)
}
#if LANG_CXX11
void ForwardToCltRequest::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardToCltRequest.service)
}
#endif
void ForwardToCltRequest::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardToCltRequest.service)
}
void ForwardToCltRequest::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardToCltRequest.service)
}
::std::string* ForwardToCltRequest::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardToCltRequest.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardToCltRequest::release_service() {
  // @@protoc_insertion_point(field_release:svr.ForwardToCltRequest.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardToCltRequest::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardToCltRequest.service)
}

// string method = 3;
void ForwardToCltRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardToCltRequest::method() const {
  // @@protoc_insertion_point(field_get:svr.ForwardToCltRequest.method)
  return method_.GetNoArena();
}
void ForwardToCltRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardToCltRequest.method)
}
#if LANG_CXX11
void ForwardToCltRequest::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardToCltRequest.method)
}
#endif
void ForwardToCltRequest::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardToCltRequest.method)
}
void ForwardToCltRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardToCltRequest.method)
}
::std::string* ForwardToCltRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardToCltRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardToCltRequest::release_method() {
  // @@protoc_insertion_point(field_release:svr.ForwardToCltRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardToCltRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardToCltRequest.method)
}

// bytes content = 4;
void ForwardToCltRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardToCltRequest::content() const {
  // @@protoc_insertion_point(field_get:svr.ForwardToCltRequest.content)
  return content_.GetNoArena();
}
void ForwardToCltRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardToCltRequest.content)
}
#if LANG_CXX11
void ForwardToCltRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardToCltRequest.content)
}
#endif
void ForwardToCltRequest::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardToCltRequest.content)
}
void ForwardToCltRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardToCltRequest.content)
}
::std::string* ForwardToCltRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardToCltRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardToCltRequest::release_content() {
  // @@protoc_insertion_point(field_release:svr.ForwardToCltRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardToCltRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardToCltRequest.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardToCltResponse::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardToCltResponse::ForwardToCltResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_forward_5fto_5fclt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ForwardToCltResponse)
}
ForwardToCltResponse::ForwardToCltResponse(const ForwardToCltResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:svr.ForwardToCltResponse)
}

void ForwardToCltResponse::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForwardToCltResponse::~ForwardToCltResponse() {
  // @@protoc_insertion_point(destructor:svr.ForwardToCltResponse)
  SharedDtor();
}

void ForwardToCltResponse::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForwardToCltResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToCltResponse::descriptor() {
  protobuf_forward_5fto_5fclt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5fto_5fclt_2eproto::file_level_metadata[1].descriptor;
}

const ForwardToCltResponse& ForwardToCltResponse::default_instance() {
  protobuf_forward_5fto_5fclt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardToCltResponse* ForwardToCltResponse::New(::google::protobuf::Arena* arena) const {
  ForwardToCltResponse* n = new ForwardToCltResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardToCltResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.ForwardToCltResponse)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ForwardToCltResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ForwardToCltResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ForwardToCltResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ForwardToCltResponse)
  return false;
#undef DO_
}

void ForwardToCltResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ForwardToCltResponse)
  // bytes content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.ForwardToCltResponse)
}

::google::protobuf::uint8* ForwardToCltResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.ForwardToCltResponse)
  // bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.ForwardToCltResponse)
  return target;
}

size_t ForwardToCltResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.ForwardToCltResponse)
  size_t total_size = 0;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToCltResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.ForwardToCltResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardToCltResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardToCltResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.ForwardToCltResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.ForwardToCltResponse)
    MergeFrom(*source);
  }
}

void ForwardToCltResponse::MergeFrom(const ForwardToCltResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.ForwardToCltResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ForwardToCltResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.ForwardToCltResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToCltResponse::CopyFrom(const ForwardToCltResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.ForwardToCltResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToCltResponse::IsInitialized() const {
  return true;
}

void ForwardToCltResponse::Swap(ForwardToCltResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardToCltResponse::InternalSwap(ForwardToCltResponse* other) {
  content_.Swap(&other->content_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardToCltResponse::GetMetadata() const {
  protobuf_forward_5fto_5fclt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5fto_5fclt_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardToCltResponse

// bytes content = 1;
void ForwardToCltResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardToCltResponse::content() const {
  // @@protoc_insertion_point(field_get:svr.ForwardToCltResponse.content)
  return content_.GetNoArena();
}
void ForwardToCltResponse::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardToCltResponse.content)
}
#if LANG_CXX11
void ForwardToCltResponse::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardToCltResponse.content)
}
#endif
void ForwardToCltResponse::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardToCltResponse.content)
}
void ForwardToCltResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardToCltResponse.content)
}
::std::string* ForwardToCltResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardToCltResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardToCltResponse::release_content() {
  // @@protoc_insertion_point(field_release:svr.ForwardToCltResponse.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardToCltResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardToCltResponse.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace svr

// @@protoc_insertion_point(global_scope)
