// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svr {
class TestCmdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestCmdRequest> {
} _TestCmdRequest_default_instance_;
class TestCmdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestCmdResponse> {
} _TestCmdResponse_default_instance_;

namespace protobuf_test_5fcmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCmdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCmdRequest, cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCmdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCmdResponse, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCmdResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestCmdResponse, error_str_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TestCmdRequest)},
  { 5, -1, sizeof(TestCmdResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestCmdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestCmdResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test_cmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TestCmdRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TestCmdResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TestCmdRequest_default_instance_.DefaultConstruct();
  _TestCmdResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016test_cmd.proto\022\003svr\"\035\n\016TestCmdRequest\022"
      "\013\n\003cmd\030\001 \001(\t\"\207\001\n\017TestCmdResponse\022\013\n\003cmd\030"
      "\001 \001(\t\0222\n\006result\030\002 \001(\0162\".svr.TestCmdRespo"
      "nse.TestCmdResult\022\021\n\terror_str\030\003 \001(\t\" \n\r"
      "TestCmdResult\022\006\n\002OK\020\000\022\007\n\003ERR\020\0012\?\n\007TestCm"
      "d\0224\n\007TestCmd\022\023.svr.TestCmdRequest\032\024.svr."
      "TestCmdResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test_cmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_5fcmd_2eproto

const ::google::protobuf::EnumDescriptor* TestCmdResponse_TestCmdResult_descriptor() {
  protobuf_test_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fcmd_2eproto::file_level_enum_descriptors[0];
}
bool TestCmdResponse_TestCmdResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestCmdResponse_TestCmdResult TestCmdResponse::OK;
const TestCmdResponse_TestCmdResult TestCmdResponse::ERR;
const TestCmdResponse_TestCmdResult TestCmdResponse::TestCmdResult_MIN;
const TestCmdResponse_TestCmdResult TestCmdResponse::TestCmdResult_MAX;
const int TestCmdResponse::TestCmdResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestCmdRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestCmdRequest::TestCmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.TestCmdRequest)
}
TestCmdRequest::TestCmdRequest(const TestCmdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:svr.TestCmdRequest)
}

void TestCmdRequest::SharedCtor() {
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TestCmdRequest::~TestCmdRequest() {
  // @@protoc_insertion_point(destructor:svr.TestCmdRequest)
  SharedDtor();
}

void TestCmdRequest::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestCmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestCmdRequest::descriptor() {
  protobuf_test_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fcmd_2eproto::file_level_metadata[0].descriptor;
}

const TestCmdRequest& TestCmdRequest::default_instance() {
  protobuf_test_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestCmdRequest* TestCmdRequest::New(::google::protobuf::Arena* arena) const {
  TestCmdRequest* n = new TestCmdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.TestCmdRequest)
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TestCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.TestCmdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cmd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.TestCmdRequest.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.TestCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.TestCmdRequest)
  return false;
#undef DO_
}

void TestCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.TestCmdRequest)
  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.TestCmdRequest.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.TestCmdRequest)
}

::google::protobuf::uint8* TestCmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.TestCmdRequest)
  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.TestCmdRequest.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.TestCmdRequest)
  return target;
}

size_t TestCmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.TestCmdRequest)
  size_t total_size = 0;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.TestCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCmdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestCmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.TestCmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.TestCmdRequest)
    MergeFrom(*source);
  }
}

void TestCmdRequest::MergeFrom(const TestCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.TestCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void TestCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.TestCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCmdRequest::CopyFrom(const TestCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.TestCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCmdRequest::IsInitialized() const {
  return true;
}

void TestCmdRequest::Swap(TestCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestCmdRequest::InternalSwap(TestCmdRequest* other) {
  cmd_.Swap(&other->cmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestCmdRequest::GetMetadata() const {
  protobuf_test_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fcmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestCmdRequest

// string cmd = 1;
void TestCmdRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestCmdRequest::cmd() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdRequest.cmd)
  return cmd_.GetNoArena();
}
void TestCmdRequest::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.TestCmdRequest.cmd)
}
#if LANG_CXX11
void TestCmdRequest::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.TestCmdRequest.cmd)
}
#endif
void TestCmdRequest::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.TestCmdRequest.cmd)
}
void TestCmdRequest::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.TestCmdRequest.cmd)
}
::std::string* TestCmdRequest::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:svr.TestCmdRequest.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestCmdRequest::release_cmd() {
  // @@protoc_insertion_point(field_release:svr.TestCmdRequest.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestCmdRequest::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:svr.TestCmdRequest.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestCmdResponse::kCmdFieldNumber;
const int TestCmdResponse::kResultFieldNumber;
const int TestCmdResponse::kErrorStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestCmdResponse::TestCmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_5fcmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.TestCmdResponse)
}
TestCmdResponse::TestCmdResponse(const TestCmdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  error_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_str().size() > 0) {
    error_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:svr.TestCmdResponse)
}

void TestCmdResponse::SharedCtor() {
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _cached_size_ = 0;
}

TestCmdResponse::~TestCmdResponse() {
  // @@protoc_insertion_point(destructor:svr.TestCmdResponse)
  SharedDtor();
}

void TestCmdResponse::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestCmdResponse::descriptor() {
  protobuf_test_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fcmd_2eproto::file_level_metadata[1].descriptor;
}

const TestCmdResponse& TestCmdResponse::default_instance() {
  protobuf_test_5fcmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestCmdResponse* TestCmdResponse::New(::google::protobuf::Arena* arena) const {
  TestCmdResponse* n = new TestCmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestCmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.TestCmdResponse)
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

bool TestCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.TestCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cmd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.TestCmdResponse.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .svr.TestCmdResponse.TestCmdResult result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::svr::TestCmdResponse_TestCmdResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_str = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_str().data(), this->error_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.TestCmdResponse.error_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.TestCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.TestCmdResponse)
  return false;
#undef DO_
}

void TestCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.TestCmdResponse)
  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.TestCmdResponse.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  // .svr.TestCmdResponse.TestCmdResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // string error_str = 3;
  if (this->error_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_str().data(), this->error_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.TestCmdResponse.error_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.TestCmdResponse)
}

::google::protobuf::uint8* TestCmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.TestCmdResponse)
  // string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.TestCmdResponse.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // .svr.TestCmdResponse.TestCmdResult result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // string error_str = 3;
  if (this->error_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_str().data(), this->error_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.TestCmdResponse.error_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.TestCmdResponse)
  return target;
}

size_t TestCmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.TestCmdResponse)
  size_t total_size = 0;

  // string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // string error_str = 3;
  if (this->error_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_str());
  }

  // .svr.TestCmdResponse.TestCmdResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.TestCmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCmdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestCmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.TestCmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.TestCmdResponse)
    MergeFrom(*source);
  }
}

void TestCmdResponse::MergeFrom(const TestCmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.TestCmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.error_str().size() > 0) {

    error_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void TestCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.TestCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCmdResponse::CopyFrom(const TestCmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.TestCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCmdResponse::IsInitialized() const {
  return true;
}

void TestCmdResponse::Swap(TestCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestCmdResponse::InternalSwap(TestCmdResponse* other) {
  cmd_.Swap(&other->cmd_);
  error_str_.Swap(&other->error_str_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestCmdResponse::GetMetadata() const {
  protobuf_test_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_5fcmd_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestCmdResponse

// string cmd = 1;
void TestCmdResponse::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestCmdResponse::cmd() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdResponse.cmd)
  return cmd_.GetNoArena();
}
void TestCmdResponse::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.TestCmdResponse.cmd)
}
#if LANG_CXX11
void TestCmdResponse::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.TestCmdResponse.cmd)
}
#endif
void TestCmdResponse::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.TestCmdResponse.cmd)
}
void TestCmdResponse::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.TestCmdResponse.cmd)
}
::std::string* TestCmdResponse::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:svr.TestCmdResponse.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestCmdResponse::release_cmd() {
  // @@protoc_insertion_point(field_release:svr.TestCmdResponse.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestCmdResponse::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:svr.TestCmdResponse.cmd)
}

// .svr.TestCmdResponse.TestCmdResult result = 2;
void TestCmdResponse::clear_result() {
  result_ = 0;
}
::svr::TestCmdResponse_TestCmdResult TestCmdResponse::result() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdResponse.result)
  return static_cast< ::svr::TestCmdResponse_TestCmdResult >(result_);
}
void TestCmdResponse::set_result(::svr::TestCmdResponse_TestCmdResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:svr.TestCmdResponse.result)
}

// string error_str = 3;
void TestCmdResponse::clear_error_str() {
  error_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TestCmdResponse::error_str() const {
  // @@protoc_insertion_point(field_get:svr.TestCmdResponse.error_str)
  return error_str_.GetNoArena();
}
void TestCmdResponse::set_error_str(const ::std::string& value) {
  
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.TestCmdResponse.error_str)
}
#if LANG_CXX11
void TestCmdResponse::set_error_str(::std::string&& value) {
  
  error_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.TestCmdResponse.error_str)
}
#endif
void TestCmdResponse::set_error_str(const char* value) {
  
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.TestCmdResponse.error_str)
}
void TestCmdResponse::set_error_str(const char* value, size_t size) {
  
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.TestCmdResponse.error_str)
}
::std::string* TestCmdResponse::mutable_error_str() {
  
  // @@protoc_insertion_point(field_mutable:svr.TestCmdResponse.error_str)
  return error_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestCmdResponse::release_error_str() {
  // @@protoc_insertion_point(field_release:svr.TestCmdResponse.error_str)
  
  return error_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestCmdResponse::set_allocated_error_str(::std::string* error_str) {
  if (error_str != NULL) {
    
  } else {
    
  }
  error_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_str);
  // @@protoc_insertion_point(field_set_allocated:svr.TestCmdResponse.error_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace svr

// @@protoc_insertion_point(global_scope)
