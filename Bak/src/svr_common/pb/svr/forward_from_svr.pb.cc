// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forward_from_svr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "forward_from_svr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svr {
class ForwardRequest_GameCltIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardRequest_GameCltId> {
} _ForwardRequest_GameCltId_default_instance_;
class ForwardRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardRequest> {
} _ForwardRequest_default_instance_;
class ForwardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardResponse> {
} _ForwardResponse_default_instance_;

namespace protobuf_forward_5ffrom_5fsvr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest_GameCltId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest_GameCltId, base_svr_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest_GameCltId, base_rpc_clt_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRequest, game_clt_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardResponse, content_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ForwardRequest_GameCltId)},
  { 6, -1, sizeof(ForwardRequest)},
  { 14, -1, sizeof(ForwardResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardRequest_GameCltId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "forward_from_svr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _ForwardRequest_GameCltId_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ForwardRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ForwardResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ForwardRequest_GameCltId_default_instance_.DefaultConstruct();
  _ForwardRequest_default_instance_.DefaultConstruct();
  _ForwardResponse_default_instance_.DefaultConstruct();
  _ForwardRequest_default_instance_.get_mutable()->game_clt_id_ = const_cast< ::svr::ForwardRequest_GameCltId*>(
      ::svr::ForwardRequest_GameCltId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026forward_from_svr.proto\022\003svr\"\261\001\n\016Forwar"
      "dRequest\022\017\n\007service\030\001 \001(\t\022\016\n\006method\030\002 \001("
      "\t\022\017\n\007content\030\003 \001(\014\0222\n\013game_clt_id\030\004 \001(\0132"
      "\035.svr.ForwardRequest.GameCltId\0329\n\tGameCl"
      "tId\022\023\n\013base_svr_id\030\001 \001(\r\022\027\n\017base_rpc_clt"
      "_id\030\002 \001(\004\"\"\n\017ForwardResponse\022\017\n\007content\030"
      "\001 \001(\0142F\n\016ForwardFromSvr\0224\n\007Forward\022\023.svr"
      ".ForwardRequest\032\024.svr.ForwardResponseb\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "forward_from_svr.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_forward_5ffrom_5fsvr_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardRequest_GameCltId::kBaseSvrIdFieldNumber;
const int ForwardRequest_GameCltId::kBaseRpcCltIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardRequest_GameCltId::ForwardRequest_GameCltId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_forward_5ffrom_5fsvr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ForwardRequest.GameCltId)
}
ForwardRequest_GameCltId::ForwardRequest_GameCltId(const ForwardRequest_GameCltId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&base_rpc_clt_id_, &from.base_rpc_clt_id_,
    reinterpret_cast<char*>(&base_svr_id_) -
    reinterpret_cast<char*>(&base_rpc_clt_id_) + sizeof(base_svr_id_));
  // @@protoc_insertion_point(copy_constructor:svr.ForwardRequest.GameCltId)
}

void ForwardRequest_GameCltId::SharedCtor() {
  ::memset(&base_rpc_clt_id_, 0, reinterpret_cast<char*>(&base_svr_id_) -
    reinterpret_cast<char*>(&base_rpc_clt_id_) + sizeof(base_svr_id_));
  _cached_size_ = 0;
}

ForwardRequest_GameCltId::~ForwardRequest_GameCltId() {
  // @@protoc_insertion_point(destructor:svr.ForwardRequest.GameCltId)
  SharedDtor();
}

void ForwardRequest_GameCltId::SharedDtor() {
}

void ForwardRequest_GameCltId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardRequest_GameCltId::descriptor() {
  protobuf_forward_5ffrom_5fsvr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5ffrom_5fsvr_2eproto::file_level_metadata[0].descriptor;
}

const ForwardRequest_GameCltId& ForwardRequest_GameCltId::default_instance() {
  protobuf_forward_5ffrom_5fsvr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardRequest_GameCltId* ForwardRequest_GameCltId::New(::google::protobuf::Arena* arena) const {
  ForwardRequest_GameCltId* n = new ForwardRequest_GameCltId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardRequest_GameCltId::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.ForwardRequest.GameCltId)
  ::memset(&base_rpc_clt_id_, 0, reinterpret_cast<char*>(&base_svr_id_) -
    reinterpret_cast<char*>(&base_rpc_clt_id_) + sizeof(base_svr_id_));
}

bool ForwardRequest_GameCltId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ForwardRequest.GameCltId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 base_svr_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_svr_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 base_rpc_clt_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_rpc_clt_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ForwardRequest.GameCltId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ForwardRequest.GameCltId)
  return false;
#undef DO_
}

void ForwardRequest_GameCltId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ForwardRequest.GameCltId)
  // uint32 base_svr_id = 1;
  if (this->base_svr_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->base_svr_id(), output);
  }

  // uint64 base_rpc_clt_id = 2;
  if (this->base_rpc_clt_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->base_rpc_clt_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.ForwardRequest.GameCltId)
}

::google::protobuf::uint8* ForwardRequest_GameCltId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.ForwardRequest.GameCltId)
  // uint32 base_svr_id = 1;
  if (this->base_svr_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->base_svr_id(), target);
  }

  // uint64 base_rpc_clt_id = 2;
  if (this->base_rpc_clt_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->base_rpc_clt_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.ForwardRequest.GameCltId)
  return target;
}

size_t ForwardRequest_GameCltId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.ForwardRequest.GameCltId)
  size_t total_size = 0;

  // uint64 base_rpc_clt_id = 2;
  if (this->base_rpc_clt_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->base_rpc_clt_id());
  }

  // uint32 base_svr_id = 1;
  if (this->base_svr_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_svr_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardRequest_GameCltId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.ForwardRequest.GameCltId)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardRequest_GameCltId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardRequest_GameCltId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.ForwardRequest.GameCltId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.ForwardRequest.GameCltId)
    MergeFrom(*source);
  }
}

void ForwardRequest_GameCltId::MergeFrom(const ForwardRequest_GameCltId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.ForwardRequest.GameCltId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.base_rpc_clt_id() != 0) {
    set_base_rpc_clt_id(from.base_rpc_clt_id());
  }
  if (from.base_svr_id() != 0) {
    set_base_svr_id(from.base_svr_id());
  }
}

void ForwardRequest_GameCltId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.ForwardRequest.GameCltId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardRequest_GameCltId::CopyFrom(const ForwardRequest_GameCltId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.ForwardRequest.GameCltId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRequest_GameCltId::IsInitialized() const {
  return true;
}

void ForwardRequest_GameCltId::Swap(ForwardRequest_GameCltId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardRequest_GameCltId::InternalSwap(ForwardRequest_GameCltId* other) {
  std::swap(base_rpc_clt_id_, other->base_rpc_clt_id_);
  std::swap(base_svr_id_, other->base_svr_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardRequest_GameCltId::GetMetadata() const {
  protobuf_forward_5ffrom_5fsvr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5ffrom_5fsvr_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardRequest_GameCltId

// uint32 base_svr_id = 1;
void ForwardRequest_GameCltId::clear_base_svr_id() {
  base_svr_id_ = 0u;
}
::google::protobuf::uint32 ForwardRequest_GameCltId::base_svr_id() const {
  // @@protoc_insertion_point(field_get:svr.ForwardRequest.GameCltId.base_svr_id)
  return base_svr_id_;
}
void ForwardRequest_GameCltId::set_base_svr_id(::google::protobuf::uint32 value) {
  
  base_svr_id_ = value;
  // @@protoc_insertion_point(field_set:svr.ForwardRequest.GameCltId.base_svr_id)
}

// uint64 base_rpc_clt_id = 2;
void ForwardRequest_GameCltId::clear_base_rpc_clt_id() {
  base_rpc_clt_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ForwardRequest_GameCltId::base_rpc_clt_id() const {
  // @@protoc_insertion_point(field_get:svr.ForwardRequest.GameCltId.base_rpc_clt_id)
  return base_rpc_clt_id_;
}
void ForwardRequest_GameCltId::set_base_rpc_clt_id(::google::protobuf::uint64 value) {
  
  base_rpc_clt_id_ = value;
  // @@protoc_insertion_point(field_set:svr.ForwardRequest.GameCltId.base_rpc_clt_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardRequest::kServiceFieldNumber;
const int ForwardRequest::kMethodFieldNumber;
const int ForwardRequest::kContentFieldNumber;
const int ForwardRequest::kGameCltIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardRequest::ForwardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_forward_5ffrom_5fsvr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ForwardRequest)
}
ForwardRequest::ForwardRequest(const ForwardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_game_clt_id()) {
    game_clt_id_ = new ::svr::ForwardRequest_GameCltId(*from.game_clt_id_);
  } else {
    game_clt_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:svr.ForwardRequest)
}

void ForwardRequest::SharedCtor() {
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_clt_id_ = NULL;
  _cached_size_ = 0;
}

ForwardRequest::~ForwardRequest() {
  // @@protoc_insertion_point(destructor:svr.ForwardRequest)
  SharedDtor();
}

void ForwardRequest::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete game_clt_id_;
  }
}

void ForwardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardRequest::descriptor() {
  protobuf_forward_5ffrom_5fsvr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5ffrom_5fsvr_2eproto::file_level_metadata[1].descriptor;
}

const ForwardRequest& ForwardRequest::default_instance() {
  protobuf_forward_5ffrom_5fsvr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardRequest* ForwardRequest::New(::google::protobuf::Arena* arena) const {
  ForwardRequest* n = new ForwardRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.ForwardRequest)
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && game_clt_id_ != NULL) {
    delete game_clt_id_;
  }
  game_clt_id_ = NULL;
}

bool ForwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ForwardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.ForwardRequest.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "svr.ForwardRequest.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .svr.ForwardRequest.GameCltId game_clt_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_clt_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ForwardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ForwardRequest)
  return false;
#undef DO_
}

void ForwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ForwardRequest)
  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardRequest.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardRequest.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // .svr.ForwardRequest.GameCltId game_clt_id = 4;
  if (this->has_game_clt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->game_clt_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:svr.ForwardRequest)
}

::google::protobuf::uint8* ForwardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.ForwardRequest)
  // string service = 1;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardRequest.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "svr.ForwardRequest.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // .svr.ForwardRequest.GameCltId game_clt_id = 4;
  if (this->has_game_clt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->game_clt_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.ForwardRequest)
  return target;
}

size_t ForwardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.ForwardRequest)
  size_t total_size = 0;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // string method = 2;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .svr.ForwardRequest.GameCltId game_clt_id = 4;
  if (this->has_game_clt_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_clt_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.ForwardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.ForwardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.ForwardRequest)
    MergeFrom(*source);
  }
}

void ForwardRequest::MergeFrom(const ForwardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.ForwardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_game_clt_id()) {
    mutable_game_clt_id()->::svr::ForwardRequest_GameCltId::MergeFrom(from.game_clt_id());
  }
}

void ForwardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.ForwardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardRequest::CopyFrom(const ForwardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.ForwardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRequest::IsInitialized() const {
  return true;
}

void ForwardRequest::Swap(ForwardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardRequest::InternalSwap(ForwardRequest* other) {
  service_.Swap(&other->service_);
  method_.Swap(&other->method_);
  content_.Swap(&other->content_);
  std::swap(game_clt_id_, other->game_clt_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardRequest::GetMetadata() const {
  protobuf_forward_5ffrom_5fsvr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5ffrom_5fsvr_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardRequest

// string service = 1;
void ForwardRequest::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardRequest::service() const {
  // @@protoc_insertion_point(field_get:svr.ForwardRequest.service)
  return service_.GetNoArena();
}
void ForwardRequest::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardRequest.service)
}
#if LANG_CXX11
void ForwardRequest::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardRequest.service)
}
#endif
void ForwardRequest::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardRequest.service)
}
void ForwardRequest::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardRequest.service)
}
::std::string* ForwardRequest::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardRequest.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardRequest::release_service() {
  // @@protoc_insertion_point(field_release:svr.ForwardRequest.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardRequest::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardRequest.service)
}

// string method = 2;
void ForwardRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardRequest::method() const {
  // @@protoc_insertion_point(field_get:svr.ForwardRequest.method)
  return method_.GetNoArena();
}
void ForwardRequest::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardRequest.method)
}
#if LANG_CXX11
void ForwardRequest::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardRequest.method)
}
#endif
void ForwardRequest::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardRequest.method)
}
void ForwardRequest::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardRequest.method)
}
::std::string* ForwardRequest::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardRequest::release_method() {
  // @@protoc_insertion_point(field_release:svr.ForwardRequest.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardRequest.method)
}

// bytes content = 3;
void ForwardRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardRequest::content() const {
  // @@protoc_insertion_point(field_get:svr.ForwardRequest.content)
  return content_.GetNoArena();
}
void ForwardRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardRequest.content)
}
#if LANG_CXX11
void ForwardRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardRequest.content)
}
#endif
void ForwardRequest::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardRequest.content)
}
void ForwardRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardRequest.content)
}
::std::string* ForwardRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardRequest::release_content() {
  // @@protoc_insertion_point(field_release:svr.ForwardRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardRequest.content)
}

// .svr.ForwardRequest.GameCltId game_clt_id = 4;
bool ForwardRequest::has_game_clt_id() const {
  return this != internal_default_instance() && game_clt_id_ != NULL;
}
void ForwardRequest::clear_game_clt_id() {
  if (GetArenaNoVirtual() == NULL && game_clt_id_ != NULL) delete game_clt_id_;
  game_clt_id_ = NULL;
}
const ::svr::ForwardRequest_GameCltId& ForwardRequest::game_clt_id() const {
  // @@protoc_insertion_point(field_get:svr.ForwardRequest.game_clt_id)
  return game_clt_id_ != NULL ? *game_clt_id_
                         : *::svr::ForwardRequest_GameCltId::internal_default_instance();
}
::svr::ForwardRequest_GameCltId* ForwardRequest::mutable_game_clt_id() {
  
  if (game_clt_id_ == NULL) {
    game_clt_id_ = new ::svr::ForwardRequest_GameCltId;
  }
  // @@protoc_insertion_point(field_mutable:svr.ForwardRequest.game_clt_id)
  return game_clt_id_;
}
::svr::ForwardRequest_GameCltId* ForwardRequest::release_game_clt_id() {
  // @@protoc_insertion_point(field_release:svr.ForwardRequest.game_clt_id)
  
  ::svr::ForwardRequest_GameCltId* temp = game_clt_id_;
  game_clt_id_ = NULL;
  return temp;
}
void ForwardRequest::set_allocated_game_clt_id(::svr::ForwardRequest_GameCltId* game_clt_id) {
  delete game_clt_id_;
  game_clt_id_ = game_clt_id;
  if (game_clt_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardRequest.game_clt_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardResponse::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardResponse::ForwardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_forward_5ffrom_5fsvr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ForwardResponse)
}
ForwardResponse::ForwardResponse(const ForwardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:svr.ForwardResponse)
}

void ForwardResponse::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForwardResponse::~ForwardResponse() {
  // @@protoc_insertion_point(destructor:svr.ForwardResponse)
  SharedDtor();
}

void ForwardResponse::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForwardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardResponse::descriptor() {
  protobuf_forward_5ffrom_5fsvr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5ffrom_5fsvr_2eproto::file_level_metadata[2].descriptor;
}

const ForwardResponse& ForwardResponse::default_instance() {
  protobuf_forward_5ffrom_5fsvr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardResponse* ForwardResponse::New(::google::protobuf::Arena* arena) const {
  ForwardResponse* n = new ForwardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:svr.ForwardResponse)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ForwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ForwardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ForwardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ForwardResponse)
  return false;
#undef DO_
}

void ForwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ForwardResponse)
  // bytes content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:svr.ForwardResponse)
}

::google::protobuf::uint8* ForwardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:svr.ForwardResponse)
  // bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:svr.ForwardResponse)
  return target;
}

size_t ForwardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr.ForwardResponse)
  size_t total_size = 0;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:svr.ForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:svr.ForwardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:svr.ForwardResponse)
    MergeFrom(*source);
  }
}

void ForwardResponse::MergeFrom(const ForwardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr.ForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ForwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:svr.ForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardResponse::CopyFrom(const ForwardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr.ForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardResponse::IsInitialized() const {
  return true;
}

void ForwardResponse::Swap(ForwardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardResponse::InternalSwap(ForwardResponse* other) {
  content_.Swap(&other->content_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardResponse::GetMetadata() const {
  protobuf_forward_5ffrom_5fsvr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_forward_5ffrom_5fsvr_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardResponse

// bytes content = 1;
void ForwardResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardResponse::content() const {
  // @@protoc_insertion_point(field_get:svr.ForwardResponse.content)
  return content_.GetNoArena();
}
void ForwardResponse::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:svr.ForwardResponse.content)
}
#if LANG_CXX11
void ForwardResponse::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:svr.ForwardResponse.content)
}
#endif
void ForwardResponse::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:svr.ForwardResponse.content)
}
void ForwardResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardResponse.content)
}
::std::string* ForwardResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:svr.ForwardResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardResponse::release_content() {
  // @@protoc_insertion_point(field_release:svr.ForwardResponse.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardResponse.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace svr

// @@protoc_insertion_point(global_scope)
