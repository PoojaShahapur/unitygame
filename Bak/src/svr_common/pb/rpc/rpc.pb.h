// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace rpc {
class RpcPackage;
class RpcPackageDefaultTypeInternal;
extern RpcPackageDefaultTypeInternal _RpcPackage_default_instance_;
class RpcRequest;
class RpcRequestDefaultTypeInternal;
extern RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
class RpcResponse;
class RpcResponseDefaultTypeInternal;
extern RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
}  // namespace rpc

namespace rpc {

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_rpc_2eproto

// ===================================================================

class RpcRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RpcRequest) */ {
 public:
  RpcRequest();
  virtual ~RpcRequest();

  RpcRequest(const RpcRequest& from);

  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();

  static inline const RpcRequest* internal_default_instance() {
    return reinterpret_cast<const RpcRequest*>(
               &_RpcRequest_default_instance_);
  }

  void Swap(RpcRequest* other);

  // implements Message ----------------------------------------------

  inline RpcRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcRequest& from);
  void MergeFrom(const RpcRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service = 2;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string method = 3;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional bytes content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.RpcRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_service();
  void clear_has_service();
  void set_has_method();
  void clear_has_method();
  void set_has_content();
  void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 id_;
  friend struct  protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RpcResponse) */ {
 public:
  RpcResponse();
  virtual ~RpcResponse();

  RpcResponse(const RpcResponse& from);

  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponse& default_instance();

  static inline const RpcResponse* internal_default_instance() {
    return reinterpret_cast<const RpcResponse*>(
               &_RpcResponse_default_instance_);
  }

  void Swap(RpcResponse* other);

  // implements Message ----------------------------------------------

  inline RpcResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcResponse& from);
  void MergeFrom(const RpcResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.RpcResponse)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_content();
  void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 id_;
  friend struct  protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RpcPackage) */ {
 public:
  RpcPackage();
  virtual ~RpcPackage();

  RpcPackage(const RpcPackage& from);

  inline RpcPackage& operator=(const RpcPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcPackage& default_instance();

  static inline const RpcPackage* internal_default_instance() {
    return reinterpret_cast<const RpcPackage*>(
               &_RpcPackage_default_instance_);
  }

  void Swap(RpcPackage* other);

  // implements Message ----------------------------------------------

  inline RpcPackage* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcPackage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcPackage& from);
  void MergeFrom(const RpcPackage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.RpcRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::rpc::RpcRequest& request() const;
  ::rpc::RpcRequest* mutable_request();
  ::rpc::RpcRequest* release_request();
  void set_allocated_request(::rpc::RpcRequest* request);

  // optional .rpc.RpcResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::rpc::RpcResponse& response() const;
  ::rpc::RpcResponse* mutable_response();
  ::rpc::RpcResponse* release_response();
  void set_allocated_response(::rpc::RpcResponse* response);

  // @@protoc_insertion_point(class_scope:rpc.RpcPackage)
 private:
  void set_has_request();
  void clear_has_request();
  void set_has_response();
  void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::rpc::RpcRequest* request_;
  ::rpc::RpcResponse* response_;
  friend struct  protobuf_rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcRequest

// optional uint32 id = 1;
inline bool RpcRequest::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcRequest::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RpcRequest::id() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequest.id)
  return id_;
}
inline void RpcRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rpc.RpcRequest.id)
}

// optional string service = 2;
inline bool RpcRequest::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequest::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequest::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequest::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
inline const ::std::string& RpcRequest::service() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequest.service)
  return service_.GetNoArena();
}
inline void RpcRequest::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequest.service)
}
#if LANG_CXX11
inline void RpcRequest::set_service(::std::string&& value) {
  set_has_service();
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcRequest.service)
}
#endif
inline void RpcRequest::set_service(const char* value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcRequest.service)
}
inline void RpcRequest::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcRequest.service)
}
inline ::std::string* RpcRequest::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequest.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequest::release_service() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequest.service)
  clear_has_service();
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequest::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequest.service)
}

// optional string method = 3;
inline bool RpcRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& RpcRequest::method() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequest.method)
  return method_.GetNoArena();
}
inline void RpcRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequest.method)
}
#if LANG_CXX11
inline void RpcRequest::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcRequest.method)
}
#endif
inline void RpcRequest::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcRequest.method)
}
inline void RpcRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcRequest.method)
}
inline ::std::string* RpcRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequest::release_method() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequest.method)
}

// optional bytes content = 4;
inline bool RpcRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& RpcRequest::content() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequest.content)
  return content_.GetNoArena();
}
inline void RpcRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequest.content)
}
#if LANG_CXX11
inline void RpcRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcRequest.content)
}
#endif
inline void RpcRequest::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcRequest.content)
}
inline void RpcRequest::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcRequest.content)
}
inline ::std::string* RpcRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequest::release_content() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequest.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequest.content)
}

// -------------------------------------------------------------------

// RpcResponse

// required uint32 id = 1;
inline bool RpcResponse::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponse::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponse::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RpcResponse::id() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponse.id)
  return id_;
}
inline void RpcResponse::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rpc.RpcResponse.id)
}

// optional bytes content = 2;
inline bool RpcResponse::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponse::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponse::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& RpcResponse::content() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponse.content)
  return content_.GetNoArena();
}
inline void RpcResponse::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcResponse.content)
}
#if LANG_CXX11
inline void RpcResponse::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcResponse.content)
}
#endif
inline void RpcResponse::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcResponse.content)
}
inline void RpcResponse::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcResponse.content)
}
inline ::std::string* RpcResponse::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:rpc.RpcResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcResponse::release_content() {
  // @@protoc_insertion_point(field_release:rpc.RpcResponse.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcResponse.content)
}

// -------------------------------------------------------------------

// RpcPackage

// optional .rpc.RpcRequest request = 1;
inline bool RpcPackage::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcPackage::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcPackage::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcPackage::clear_request() {
  if (request_ != NULL) request_->::rpc::RpcRequest::Clear();
  clear_has_request();
}
inline const ::rpc::RpcRequest& RpcPackage::request() const {
  // @@protoc_insertion_point(field_get:rpc.RpcPackage.request)
  return request_ != NULL ? *request_
                         : *::rpc::RpcRequest::internal_default_instance();
}
inline ::rpc::RpcRequest* RpcPackage::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::rpc::RpcRequest;
  }
  // @@protoc_insertion_point(field_mutable:rpc.RpcPackage.request)
  return request_;
}
inline ::rpc::RpcRequest* RpcPackage::release_request() {
  // @@protoc_insertion_point(field_release:rpc.RpcPackage.request)
  clear_has_request();
  ::rpc::RpcRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void RpcPackage::set_allocated_request(::rpc::RpcRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcPackage.request)
}

// optional .rpc.RpcResponse response = 2;
inline bool RpcPackage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcPackage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcPackage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcPackage::clear_response() {
  if (response_ != NULL) response_->::rpc::RpcResponse::Clear();
  clear_has_response();
}
inline const ::rpc::RpcResponse& RpcPackage::response() const {
  // @@protoc_insertion_point(field_get:rpc.RpcPackage.response)
  return response_ != NULL ? *response_
                         : *::rpc::RpcResponse::internal_default_instance();
}
inline ::rpc::RpcResponse* RpcPackage::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::rpc::RpcResponse;
  }
  // @@protoc_insertion_point(field_mutable:rpc.RpcPackage.response)
  return response_;
}
inline ::rpc::RpcResponse* RpcPackage::release_response() {
  // @@protoc_insertion_point(field_release:rpc.RpcPackage.response)
  clear_has_response();
  ::rpc::RpcResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void RpcPackage::set_allocated_response(::rpc::RpcResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcPackage.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
