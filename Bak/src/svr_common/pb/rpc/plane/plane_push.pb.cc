// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plane/plane_push.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plane/plane_push.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plane {
class MoveToBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveToBcMsg> {
} _MoveToBcMsg_default_instance_;
class MoveToBcMsgRoomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveToBcMsgRoom> {
} _MoveToBcMsgRoom_default_instance_;
class TurnToBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TurnToBcMsg> {
} _TurnToBcMsg_default_instance_;
class StopOrMoveBeginBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopOrMoveBeginBcMsg> {
} _StopOrMoveBeginBcMsg_default_instance_;
class FireBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FireBcMsg> {
} _FireBcMsg_default_instance_;
class BulletDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Bullet> {
} _Bullet_default_instance_;
class FireSimpleBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FireSimpleBcMsg> {
} _FireSimpleBcMsg_default_instance_;
class HitBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HitBcMsg> {
} _HitBcMsg_default_instance_;
class HitEnergyMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HitEnergyMsg> {
} _HitEnergyMsg_default_instance_;
class PlaneBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlaneBcMsg> {
} _PlaneBcMsg_default_instance_;
class BatchRemovePlaneBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchRemovePlaneBcMsg> {
} _BatchRemovePlaneBcMsg_default_instance_;
class RankDataMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RankDataMsg> {
} _RankDataMsg_default_instance_;
class RankDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RankData> {
} _RankData_default_instance_;
class ScoreMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScoreMsg> {
} _ScoreMsg_default_instance_;
class DeathMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeathMsg> {
} _DeathMsg_default_instance_;
class StateMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StateMsg> {
} _StateMsg_default_instance_;
class UpdateSpeedBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateSpeedBcMsg> {
} _UpdateSpeedBcMsg_default_instance_;
class ShotCDMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShotCDMsg> {
} _ShotCDMsg_default_instance_;
class LevelMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LevelMsg> {
} _LevelMsg_default_instance_;

namespace protobuf_plane_2fplane_5fpush_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsg, ms_and_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsg, move_to_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsgRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsgRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsgRoom, curframe_and_roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToBcMsgRoom, moves_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToBcMsg, ms_and_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToBcMsg, turn_to_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopOrMoveBeginBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopOrMoveBeginBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopOrMoveBeginBcMsg, ms_and_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopOrMoveBeginBcMsg, info_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, ndir_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, life_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, shooter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, bullet_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireBcMsg, all_bullets_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bullet, y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, dir_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, life_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, shooter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, bullet_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireSimpleBcMsg, fire_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitBcMsg, bullet_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitBcMsg, bullet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitBcMsg, plane_owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitBcMsg, plane_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEnergyMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEnergyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEnergyMsg, bullet_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEnergyMsg, bullet_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEnergyMsg, energy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEnergyMsg, energy_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneBcMsg, ms_and_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneBcMsg, new__),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRemovePlaneBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRemovePlaneBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRemovePlaneBcMsg, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRemovePlaneBcMsg, plane_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataMsg, my_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataMsg, my_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataMsg, data_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, playername_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMsg, my_score_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathMsg, killedbyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathMsg, relive_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathMsg, is_out_of_bound_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMsg, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMsg, state_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMsg, op_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSpeedBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSpeedBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSpeedBcMsg, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSpeedBcMsg, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSpeedBcMsg, is_start_split_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotCDMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotCDMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotCDMsg, shotcd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMsg, level_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(MoveToBcMsg)},
  { 8, 14, sizeof(MoveToBcMsgRoom)},
  { 16, 22, sizeof(TurnToBcMsg)},
  { 24, 30, sizeof(StopOrMoveBeginBcMsg)},
  { 32, 44, sizeof(FireBcMsg)},
  { 52, 59, sizeof(Bullet)},
  { 62, 74, sizeof(FireSimpleBcMsg)},
  { 82, 90, sizeof(HitBcMsg)},
  { 94, 102, sizeof(HitEnergyMsg)},
  { 106, 112, sizeof(PlaneBcMsg)},
  { 114, 120, sizeof(BatchRemovePlaneBcMsg)},
  { 122, 129, sizeof(RankDataMsg)},
  { 132, 138, sizeof(RankData)},
  { 140, 145, sizeof(ScoreMsg)},
  { 146, 153, sizeof(DeathMsg)},
  { 156, 163, sizeof(StateMsg)},
  { 166, 173, sizeof(UpdateSpeedBcMsg)},
  { 176, 181, sizeof(ShotCDMsg)},
  { 182, 187, sizeof(LevelMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveToBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveToBcMsgRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TurnToBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopOrMoveBeginBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FireBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Bullet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FireSimpleBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HitBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HitEnergyMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaneBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchRemovePlaneBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScoreMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeathMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StateMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateSpeedBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShotCDMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LevelMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "plane/plane_push.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _MoveToBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MoveToBcMsgRoom_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TurnToBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _StopOrMoveBeginBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FireBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Bullet_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FireSimpleBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _HitBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _HitEnergyMsg_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PlaneBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _BatchRemovePlaneBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _RankDataMsg_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RankData_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ScoreMsg_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _DeathMsg_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _StateMsg_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _UpdateSpeedBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ShotCDMsg_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _LevelMsg_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::rpc::protobuf_empty_5fmsg_2eproto::InitDefaults();
  ::plane::protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  _MoveToBcMsg_default_instance_.DefaultConstruct();
  _MoveToBcMsgRoom_default_instance_.DefaultConstruct();
  _TurnToBcMsg_default_instance_.DefaultConstruct();
  _StopOrMoveBeginBcMsg_default_instance_.DefaultConstruct();
  _FireBcMsg_default_instance_.DefaultConstruct();
  _Bullet_default_instance_.DefaultConstruct();
  _FireSimpleBcMsg_default_instance_.DefaultConstruct();
  _HitBcMsg_default_instance_.DefaultConstruct();
  _HitEnergyMsg_default_instance_.DefaultConstruct();
  _PlaneBcMsg_default_instance_.DefaultConstruct();
  _BatchRemovePlaneBcMsg_default_instance_.DefaultConstruct();
  _RankDataMsg_default_instance_.DefaultConstruct();
  _RankData_default_instance_.DefaultConstruct();
  _ScoreMsg_default_instance_.DefaultConstruct();
  _DeathMsg_default_instance_.DefaultConstruct();
  _StateMsg_default_instance_.DefaultConstruct();
  _UpdateSpeedBcMsg_default_instance_.DefaultConstruct();
  _ShotCDMsg_default_instance_.DefaultConstruct();
  _LevelMsg_default_instance_.DefaultConstruct();
  _MoveToBcMsg_default_instance_.get_mutable()->ms_and_id_ = const_cast< ::plane::MsAndId*>(
      ::plane::MsAndId::internal_default_instance());
  _MoveToBcMsg_default_instance_.get_mutable()->move_to_ = const_cast< ::plane::MoveToMsg*>(
      ::plane::MoveToMsg::internal_default_instance());
  _MoveToBcMsgRoom_default_instance_.get_mutable()->curframe_and_roomid_ = const_cast< ::plane::MsAndId*>(
      ::plane::MsAndId::internal_default_instance());
  _TurnToBcMsg_default_instance_.get_mutable()->ms_and_id_ = const_cast< ::plane::MsAndId*>(
      ::plane::MsAndId::internal_default_instance());
  _TurnToBcMsg_default_instance_.get_mutable()->turn_to_ = const_cast< ::plane::TurnToMsg*>(
      ::plane::TurnToMsg::internal_default_instance());
  _StopOrMoveBeginBcMsg_default_instance_.get_mutable()->ms_and_id_ = const_cast< ::plane::MsAndId*>(
      ::plane::MsAndId::internal_default_instance());
  _StopOrMoveBeginBcMsg_default_instance_.get_mutable()->info_ = const_cast< ::plane::MoveInfo*>(
      ::plane::MoveInfo::internal_default_instance());
  _PlaneBcMsg_default_instance_.get_mutable()->ms_and_id_ = const_cast< ::plane::MsAndId*>(
      ::plane::MsAndId::internal_default_instance());
  _PlaneBcMsg_default_instance_.get_mutable()->new__ = const_cast< ::plane::PlaneMsg*>(
      ::plane::PlaneMsg::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026plane/plane_push.proto\022\005plane\032\017empty_m"
      "sg.proto\032\025plane/plane_msg.proto\"S\n\013MoveT"
      "oBcMsg\022!\n\tms_and_id\030\001 \001(\0132\016.plane.MsAndI"
      "d\022!\n\007move_to\030\002 \001(\0132\020.plane.MoveToMsg\"a\n\017"
      "MoveToBcMsgRoom\022+\n\023curframe_and_roomid\030\001"
      " \001(\0132\016.plane.MsAndId\022!\n\005moves\030\002 \003(\0132\022.pl"
      "ane.MoveToBcMsg\"S\n\013TurnToBcMsg\022!\n\tms_and"
      "_id\030\001 \001(\0132\016.plane.MsAndId\022!\n\007turn_to\030\002 \001"
      "(\0132\020.plane.TurnToMsg\"X\n\024StopOrMoveBeginB"
      "cMsg\022!\n\tms_and_id\030\001 \001(\0132\016.plane.MsAndId\022"
      "\035\n\004info\030\002 \001(\0132\017.plane.MoveInfo\"\253\001\n\tFireB"
      "cMsg\022\022\n\nndir_angle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y"
      "\030\003 \001(\r\022\024\n\014life_seconds\030\004 \001(\r\022\r\n\005speed\030\005 "
      "\001(\r\022\022\n\nshooter_id\030\006 \001(\r\022\027\n\017bullet_group_"
      "id\030\007 \001(\r\022\"\n\013all_bullets\030\010 \003(\0132\r.plane.Bu"
      "llet\"*\n\006Bullet\022\n\n\002id\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n"
      "\001y\030\003 \001(\r\"\235\001\n\017FireSimpleBcMsg\022\021\n\tdir_angl"
      "e\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\024\n\014life_se"
      "conds\030\004 \001(\r\022\r\n\005speed\030\005 \001(\r\022\022\n\nshooter_id"
      "\030\006 \001(\r\022\027\n\017bullet_group_id\030\007 \001(\r\022\017\n\007fire_"
      "ms\030\010 \001(\r\"`\n\010HitBcMsg\022\027\n\017bullet_group_id\030"
      "\001 \001(\r\022\021\n\tbullet_id\030\002 \001(\r\022\026\n\016plane_owner_"
      "id\030\003 \001(\r\022\020\n\010plane_id\030\004 \001(\r\"b\n\014HitEnergyM"
      "sg\022\027\n\017bullet_group_id\030\001 \001(\r\022\021\n\tbullet_id"
      "\030\002 \001(\r\022\021\n\tenergy_id\030\003 \001(\r\022\023\n\013energy_type"
      "\030\004 \001(\r\"M\n\nPlaneBcMsg\022!\n\tms_and_id\030\001 \001(\0132"
      "\016.plane.MsAndId\022\034\n\003new\030\002 \001(\0132\017.plane.Pla"
      "neMsg\"<\n\025BatchRemovePlaneBcMsg\022\020\n\010player"
      "id\030\001 \001(\r\022\021\n\tplane_ids\030\002 \003(\r\"O\n\013RankDataM"
      "sg\022\017\n\007my_rank\030\001 \001(\r\022\020\n\010my_score\030\002 \001(\r\022\035\n"
      "\004data\030\003 \003(\0132\017.plane.RankData\"0\n\010RankData"
      "\022\020\n\010playerid\030\001 \001(\r\022\022\n\nplayername\030\002 \001(\t\"\034"
      "\n\010ScoreMsg\022\020\n\010my_score\030\001 \001(\r\"Q\n\010DeathMsg"
      "\022\024\n\014killedbyname\030\001 \001(\t\022\026\n\016relive_seconds"
      "\030\002 \001(\r\022\027\n\017is_out_of_bound\030\003 \001(\r\"\267\001\n\010Stat"
      "eMsg\022\020\n\010playerid\030\001 \001(\r\022(\n\tstate_num\030\002 \001("
      "\0162\025.plane.StateMsg.State\022#\n\002op\030\003 \001(\0162\027.p"
      "lane.StateMsg.StateOp\"(\n\005State\022\r\n\tState_"
      "God\020\001\022\020\n\014State_IsStop\020\002\" \n\007StateOp\022\t\n\005Op"
      "_On\020\001\022\n\n\006Op_Off\020\002\"K\n\020UpdateSpeedBcMsg\022\020\n"
      "\010playerid\030\001 \001(\r\022\r\n\005speed\030\002 \001(\r\022\026\n\016is_sta"
      "rt_split\030\003 \001(\r\"\033\n\tShotCDMsg\022\016\n\006shotcd\030\001 "
      "\001(\r\"\031\n\010LevelMsg\022\r\n\005level\030\001 \001(\r2\257\t\n\tPlane"
      "Push\0229\n\020PackPlayerMoveTo\022\026.plane.MoveToB"
      "cMsgRoom\032\r.rpc.EmptyMsg\022-\n\004Fire\022\026.plane."
      "FireSimpleBcMsg\032\r.rpc.EmptyMsg\022%\n\003Hit\022\017."
      "plane.HitBcMsg\032\r.rpc.EmptyMsg\022/\n\tHitEner"
      "gy\022\023.plane.HitEnergyMsg\032\r.rpc.EmptyMsg\022/"
      "\n\013PlayerEnter\022\021.plane.PlayerInfo\032\r.rpc.E"
      "mptyMsg\022(\n\007NewFood\022\016.plane.FoodMsg\032\r.rpc"
      ".EmptyMsg\022,\n\010NewPlane\022\021.plane.PlaneBcMsg"
      "\032\r.rpc.EmptyMsg\022E\n\023BatchAddEnergyPlane\022\037"
      ".plane.BatchAddEnergyPlaneBcMsg\032\r.rpc.Em"
      "ptyMsg\022/\n\013RemovePlane\022\021.plane.PlaneBcMsg"
      "\032\r.rpc.EmptyMsg\022\?\n\020BatchRemovePlane\022\034.pl"
      "ane.BatchRemovePlaneBcMsg\032\r.rpc.EmptyMsg"
      "\0225\n\013UpdateSpeed\022\027.plane.UpdateSpeedBcMsg"
      "\032\r.rpc.EmptyMsg\022+\n\nPlayerExit\022\016.plane.Ms"
      "AndId\032\r.rpc.EmptyMsg\022>\n\020PlayerStopOrMove"
      "\022\033.plane.StopOrMoveBeginBcMsg\032\r.rpc.Empt"
      "yMsg\0223\n\016NotifyRankData\022\022.plane.RankDataM"
      "sg\032\r.rpc.EmptyMsg\022/\n\rNotifyMyScore\022\017.pla"
      "ne.ScoreMsg\032\r.rpc.EmptyMsg\0227\n\020NotifyResu"
      "ltData\022\024.plane.ResultDataMsg\032\r.rpc.Empty"
      "Msg\022-\n\013NotifyDeath\022\017.plane.DeathMsg\032\r.rp"
      "c.EmptyMsg\0224\n\022NotifyStateChanged\022\017.plane"
      ".StateMsg\032\r.rpc.EmptyMsg\0225\n\016NotifyFrameH"
      "it\022\024.plane.FrameHitBcMsg\032\r.rpc.EmptyMsg\022"
      "7\n\014BatchAddFood\022\030.plane.BatchAddFoodBcMs"
      "g\032\r.rpc.EmptyMsg\022*\n\nBackHallOK\022\r.rpc.Emp"
      "tyMsg\032\r.rpc.EmptyMsg\022,\n\tSetShotCD\022\020.plan"
      "e.ShotCDMsg\032\r.rpc.EmptyMsg\022,\n\nSetMyLevel"
      "\022\017.plane.LevelMsg\032\r.rpc.EmptyMsg"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2912);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plane/plane_push.proto", &protobuf_RegisterTypes);
  ::rpc::protobuf_empty_5fmsg_2eproto::AddDescriptors();
  ::plane::protobuf_plane_2fplane_5fmsg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_plane_2fplane_5fpush_2eproto

const ::google::protobuf::EnumDescriptor* StateMsg_State_descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_enum_descriptors[0];
}
bool StateMsg_State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StateMsg_State StateMsg::State_God;
const StateMsg_State StateMsg::State_IsStop;
const StateMsg_State StateMsg::State_MIN;
const StateMsg_State StateMsg::State_MAX;
const int StateMsg::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StateMsg_StateOp_descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_enum_descriptors[1];
}
bool StateMsg_StateOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StateMsg_StateOp StateMsg::Op_On;
const StateMsg_StateOp StateMsg::Op_Off;
const StateMsg_StateOp StateMsg::StateOp_MIN;
const StateMsg_StateOp StateMsg::StateOp_MAX;
const int StateMsg::StateOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveToBcMsg::kMsAndIdFieldNumber;
const int MoveToBcMsg::kMoveToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveToBcMsg::MoveToBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.MoveToBcMsg)
}
MoveToBcMsg::MoveToBcMsg(const MoveToBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ms_and_id()) {
    ms_and_id_ = new ::plane::MsAndId(*from.ms_and_id_);
  } else {
    ms_and_id_ = NULL;
  }
  if (from.has_move_to()) {
    move_to_ = new ::plane::MoveToMsg(*from.move_to_);
  } else {
    move_to_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:plane.MoveToBcMsg)
}

void MoveToBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ms_and_id_, 0, reinterpret_cast<char*>(&move_to_) -
    reinterpret_cast<char*>(&ms_and_id_) + sizeof(move_to_));
}

MoveToBcMsg::~MoveToBcMsg() {
  // @@protoc_insertion_point(destructor:plane.MoveToBcMsg)
  SharedDtor();
}

void MoveToBcMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ms_and_id_;
  }
  if (this != internal_default_instance()) {
    delete move_to_;
  }
}

void MoveToBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveToBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[0].descriptor;
}

const MoveToBcMsg& MoveToBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveToBcMsg* MoveToBcMsg::New(::google::protobuf::Arena* arena) const {
  MoveToBcMsg* n = new MoveToBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveToBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.MoveToBcMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ms_and_id()) {
      GOOGLE_DCHECK(ms_and_id_ != NULL);
      ms_and_id_->::plane::MsAndId::Clear();
    }
    if (has_move_to()) {
      GOOGLE_DCHECK(move_to_ != NULL);
      move_to_->::plane::MoveToMsg::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveToBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.MoveToBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plane.MsAndId ms_and_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ms_and_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.MoveToMsg move_to = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.MoveToBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.MoveToBcMsg)
  return false;
#undef DO_
}

void MoveToBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.MoveToBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ms_and_id_, output);
  }

  // optional .plane.MoveToMsg move_to = 2;
  if (has_move_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->move_to_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.MoveToBcMsg)
}

::google::protobuf::uint8* MoveToBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.MoveToBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ms_and_id_, false, target);
  }

  // optional .plane.MoveToMsg move_to = 2;
  if (has_move_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->move_to_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.MoveToBcMsg)
  return target;
}

size_t MoveToBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.MoveToBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .plane.MsAndId ms_and_id = 1;
    if (has_ms_and_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ms_and_id_);
    }

    // optional .plane.MoveToMsg move_to = 2;
    if (has_move_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->move_to_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveToBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.MoveToBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveToBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveToBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.MoveToBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.MoveToBcMsg)
    MergeFrom(*source);
  }
}

void MoveToBcMsg::MergeFrom(const MoveToBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.MoveToBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_ms_and_id()) {
      mutable_ms_and_id()->::plane::MsAndId::MergeFrom(from.ms_and_id());
    }
    if (from.has_move_to()) {
      mutable_move_to()->::plane::MoveToMsg::MergeFrom(from.move_to());
    }
  }
}

void MoveToBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.MoveToBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveToBcMsg::CopyFrom(const MoveToBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.MoveToBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveToBcMsg::IsInitialized() const {
  return true;
}

void MoveToBcMsg::Swap(MoveToBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveToBcMsg::InternalSwap(MoveToBcMsg* other) {
  std::swap(ms_and_id_, other->ms_and_id_);
  std::swap(move_to_, other->move_to_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveToBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveToBcMsg

// optional .plane.MsAndId ms_and_id = 1;
bool MoveToBcMsg::has_ms_and_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoveToBcMsg::set_has_ms_and_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MoveToBcMsg::clear_has_ms_and_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoveToBcMsg::clear_ms_and_id() {
  if (ms_and_id_ != NULL) ms_and_id_->::plane::MsAndId::Clear();
  clear_has_ms_and_id();
}
const ::plane::MsAndId& MoveToBcMsg::ms_and_id() const {
  // @@protoc_insertion_point(field_get:plane.MoveToBcMsg.ms_and_id)
  return ms_and_id_ != NULL ? *ms_and_id_
                         : *::plane::MsAndId::internal_default_instance();
}
::plane::MsAndId* MoveToBcMsg::mutable_ms_and_id() {
  set_has_ms_and_id();
  if (ms_and_id_ == NULL) {
    ms_and_id_ = new ::plane::MsAndId;
  }
  // @@protoc_insertion_point(field_mutable:plane.MoveToBcMsg.ms_and_id)
  return ms_and_id_;
}
::plane::MsAndId* MoveToBcMsg::release_ms_and_id() {
  // @@protoc_insertion_point(field_release:plane.MoveToBcMsg.ms_and_id)
  clear_has_ms_and_id();
  ::plane::MsAndId* temp = ms_and_id_;
  ms_and_id_ = NULL;
  return temp;
}
void MoveToBcMsg::set_allocated_ms_and_id(::plane::MsAndId* ms_and_id) {
  delete ms_and_id_;
  ms_and_id_ = ms_and_id;
  if (ms_and_id) {
    set_has_ms_and_id();
  } else {
    clear_has_ms_and_id();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.MoveToBcMsg.ms_and_id)
}

// optional .plane.MoveToMsg move_to = 2;
bool MoveToBcMsg::has_move_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MoveToBcMsg::set_has_move_to() {
  _has_bits_[0] |= 0x00000002u;
}
void MoveToBcMsg::clear_has_move_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void MoveToBcMsg::clear_move_to() {
  if (move_to_ != NULL) move_to_->::plane::MoveToMsg::Clear();
  clear_has_move_to();
}
const ::plane::MoveToMsg& MoveToBcMsg::move_to() const {
  // @@protoc_insertion_point(field_get:plane.MoveToBcMsg.move_to)
  return move_to_ != NULL ? *move_to_
                         : *::plane::MoveToMsg::internal_default_instance();
}
::plane::MoveToMsg* MoveToBcMsg::mutable_move_to() {
  set_has_move_to();
  if (move_to_ == NULL) {
    move_to_ = new ::plane::MoveToMsg;
  }
  // @@protoc_insertion_point(field_mutable:plane.MoveToBcMsg.move_to)
  return move_to_;
}
::plane::MoveToMsg* MoveToBcMsg::release_move_to() {
  // @@protoc_insertion_point(field_release:plane.MoveToBcMsg.move_to)
  clear_has_move_to();
  ::plane::MoveToMsg* temp = move_to_;
  move_to_ = NULL;
  return temp;
}
void MoveToBcMsg::set_allocated_move_to(::plane::MoveToMsg* move_to) {
  delete move_to_;
  move_to_ = move_to;
  if (move_to) {
    set_has_move_to();
  } else {
    clear_has_move_to();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.MoveToBcMsg.move_to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveToBcMsgRoom::kCurframeAndRoomidFieldNumber;
const int MoveToBcMsgRoom::kMovesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveToBcMsgRoom::MoveToBcMsgRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.MoveToBcMsgRoom)
}
MoveToBcMsgRoom::MoveToBcMsgRoom(const MoveToBcMsgRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      moves_(from.moves_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curframe_and_roomid()) {
    curframe_and_roomid_ = new ::plane::MsAndId(*from.curframe_and_roomid_);
  } else {
    curframe_and_roomid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:plane.MoveToBcMsgRoom)
}

void MoveToBcMsgRoom::SharedCtor() {
  _cached_size_ = 0;
  curframe_and_roomid_ = NULL;
}

MoveToBcMsgRoom::~MoveToBcMsgRoom() {
  // @@protoc_insertion_point(destructor:plane.MoveToBcMsgRoom)
  SharedDtor();
}

void MoveToBcMsgRoom::SharedDtor() {
  if (this != internal_default_instance()) {
    delete curframe_and_roomid_;
  }
}

void MoveToBcMsgRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveToBcMsgRoom::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[1].descriptor;
}

const MoveToBcMsgRoom& MoveToBcMsgRoom::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveToBcMsgRoom* MoveToBcMsgRoom::New(::google::protobuf::Arena* arena) const {
  MoveToBcMsgRoom* n = new MoveToBcMsgRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveToBcMsgRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.MoveToBcMsgRoom)
  moves_.Clear();
  if (has_curframe_and_roomid()) {
    GOOGLE_DCHECK(curframe_and_roomid_ != NULL);
    curframe_and_roomid_->::plane::MsAndId::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveToBcMsgRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.MoveToBcMsgRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plane.MsAndId curframe_and_roomid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curframe_and_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .plane.MoveToBcMsg moves = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_moves()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.MoveToBcMsgRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.MoveToBcMsgRoom)
  return false;
#undef DO_
}

void MoveToBcMsgRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.MoveToBcMsgRoom)
  // optional .plane.MsAndId curframe_and_roomid = 1;
  if (has_curframe_and_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->curframe_and_roomid_, output);
  }

  // repeated .plane.MoveToBcMsg moves = 2;
  for (unsigned int i = 0, n = this->moves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->moves(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.MoveToBcMsgRoom)
}

::google::protobuf::uint8* MoveToBcMsgRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.MoveToBcMsgRoom)
  // optional .plane.MsAndId curframe_and_roomid = 1;
  if (has_curframe_and_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->curframe_and_roomid_, false, target);
  }

  // repeated .plane.MoveToBcMsg moves = 2;
  for (unsigned int i = 0, n = this->moves_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->moves(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.MoveToBcMsgRoom)
  return target;
}

size_t MoveToBcMsgRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.MoveToBcMsgRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.MoveToBcMsg moves = 2;
  {
    unsigned int count = this->moves_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moves(i));
    }
  }

  // optional .plane.MsAndId curframe_and_roomid = 1;
  if (has_curframe_and_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->curframe_and_roomid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveToBcMsgRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.MoveToBcMsgRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveToBcMsgRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveToBcMsgRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.MoveToBcMsgRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.MoveToBcMsgRoom)
    MergeFrom(*source);
  }
}

void MoveToBcMsgRoom::MergeFrom(const MoveToBcMsgRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.MoveToBcMsgRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  moves_.MergeFrom(from.moves_);
  if (from.has_curframe_and_roomid()) {
    mutable_curframe_and_roomid()->::plane::MsAndId::MergeFrom(from.curframe_and_roomid());
  }
}

void MoveToBcMsgRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.MoveToBcMsgRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveToBcMsgRoom::CopyFrom(const MoveToBcMsgRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.MoveToBcMsgRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveToBcMsgRoom::IsInitialized() const {
  return true;
}

void MoveToBcMsgRoom::Swap(MoveToBcMsgRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveToBcMsgRoom::InternalSwap(MoveToBcMsgRoom* other) {
  moves_.UnsafeArenaSwap(&other->moves_);
  std::swap(curframe_and_roomid_, other->curframe_and_roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveToBcMsgRoom::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveToBcMsgRoom

// optional .plane.MsAndId curframe_and_roomid = 1;
bool MoveToBcMsgRoom::has_curframe_and_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoveToBcMsgRoom::set_has_curframe_and_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void MoveToBcMsgRoom::clear_has_curframe_and_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoveToBcMsgRoom::clear_curframe_and_roomid() {
  if (curframe_and_roomid_ != NULL) curframe_and_roomid_->::plane::MsAndId::Clear();
  clear_has_curframe_and_roomid();
}
const ::plane::MsAndId& MoveToBcMsgRoom::curframe_and_roomid() const {
  // @@protoc_insertion_point(field_get:plane.MoveToBcMsgRoom.curframe_and_roomid)
  return curframe_and_roomid_ != NULL ? *curframe_and_roomid_
                         : *::plane::MsAndId::internal_default_instance();
}
::plane::MsAndId* MoveToBcMsgRoom::mutable_curframe_and_roomid() {
  set_has_curframe_and_roomid();
  if (curframe_and_roomid_ == NULL) {
    curframe_and_roomid_ = new ::plane::MsAndId;
  }
  // @@protoc_insertion_point(field_mutable:plane.MoveToBcMsgRoom.curframe_and_roomid)
  return curframe_and_roomid_;
}
::plane::MsAndId* MoveToBcMsgRoom::release_curframe_and_roomid() {
  // @@protoc_insertion_point(field_release:plane.MoveToBcMsgRoom.curframe_and_roomid)
  clear_has_curframe_and_roomid();
  ::plane::MsAndId* temp = curframe_and_roomid_;
  curframe_and_roomid_ = NULL;
  return temp;
}
void MoveToBcMsgRoom::set_allocated_curframe_and_roomid(::plane::MsAndId* curframe_and_roomid) {
  delete curframe_and_roomid_;
  curframe_and_roomid_ = curframe_and_roomid;
  if (curframe_and_roomid) {
    set_has_curframe_and_roomid();
  } else {
    clear_has_curframe_and_roomid();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.MoveToBcMsgRoom.curframe_and_roomid)
}

// repeated .plane.MoveToBcMsg moves = 2;
int MoveToBcMsgRoom::moves_size() const {
  return moves_.size();
}
void MoveToBcMsgRoom::clear_moves() {
  moves_.Clear();
}
const ::plane::MoveToBcMsg& MoveToBcMsgRoom::moves(int index) const {
  // @@protoc_insertion_point(field_get:plane.MoveToBcMsgRoom.moves)
  return moves_.Get(index);
}
::plane::MoveToBcMsg* MoveToBcMsgRoom::mutable_moves(int index) {
  // @@protoc_insertion_point(field_mutable:plane.MoveToBcMsgRoom.moves)
  return moves_.Mutable(index);
}
::plane::MoveToBcMsg* MoveToBcMsgRoom::add_moves() {
  // @@protoc_insertion_point(field_add:plane.MoveToBcMsgRoom.moves)
  return moves_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::MoveToBcMsg >*
MoveToBcMsgRoom::mutable_moves() {
  // @@protoc_insertion_point(field_mutable_list:plane.MoveToBcMsgRoom.moves)
  return &moves_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::MoveToBcMsg >&
MoveToBcMsgRoom::moves() const {
  // @@protoc_insertion_point(field_list:plane.MoveToBcMsgRoom.moves)
  return moves_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnToBcMsg::kMsAndIdFieldNumber;
const int TurnToBcMsg::kTurnToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnToBcMsg::TurnToBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.TurnToBcMsg)
}
TurnToBcMsg::TurnToBcMsg(const TurnToBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ms_and_id()) {
    ms_and_id_ = new ::plane::MsAndId(*from.ms_and_id_);
  } else {
    ms_and_id_ = NULL;
  }
  if (from.has_turn_to()) {
    turn_to_ = new ::plane::TurnToMsg(*from.turn_to_);
  } else {
    turn_to_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:plane.TurnToBcMsg)
}

void TurnToBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ms_and_id_, 0, reinterpret_cast<char*>(&turn_to_) -
    reinterpret_cast<char*>(&ms_and_id_) + sizeof(turn_to_));
}

TurnToBcMsg::~TurnToBcMsg() {
  // @@protoc_insertion_point(destructor:plane.TurnToBcMsg)
  SharedDtor();
}

void TurnToBcMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ms_and_id_;
  }
  if (this != internal_default_instance()) {
    delete turn_to_;
  }
}

void TurnToBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnToBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[2].descriptor;
}

const TurnToBcMsg& TurnToBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

TurnToBcMsg* TurnToBcMsg::New(::google::protobuf::Arena* arena) const {
  TurnToBcMsg* n = new TurnToBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TurnToBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.TurnToBcMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ms_and_id()) {
      GOOGLE_DCHECK(ms_and_id_ != NULL);
      ms_and_id_->::plane::MsAndId::Clear();
    }
    if (has_turn_to()) {
      GOOGLE_DCHECK(turn_to_ != NULL);
      turn_to_->::plane::TurnToMsg::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TurnToBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.TurnToBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plane.MsAndId ms_and_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ms_and_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.TurnToMsg turn_to = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turn_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.TurnToBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.TurnToBcMsg)
  return false;
#undef DO_
}

void TurnToBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.TurnToBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ms_and_id_, output);
  }

  // optional .plane.TurnToMsg turn_to = 2;
  if (has_turn_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->turn_to_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.TurnToBcMsg)
}

::google::protobuf::uint8* TurnToBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.TurnToBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ms_and_id_, false, target);
  }

  // optional .plane.TurnToMsg turn_to = 2;
  if (has_turn_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->turn_to_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.TurnToBcMsg)
  return target;
}

size_t TurnToBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.TurnToBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .plane.MsAndId ms_and_id = 1;
    if (has_ms_and_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ms_and_id_);
    }

    // optional .plane.TurnToMsg turn_to = 2;
    if (has_turn_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->turn_to_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnToBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.TurnToBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnToBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnToBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.TurnToBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.TurnToBcMsg)
    MergeFrom(*source);
  }
}

void TurnToBcMsg::MergeFrom(const TurnToBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.TurnToBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_ms_and_id()) {
      mutable_ms_and_id()->::plane::MsAndId::MergeFrom(from.ms_and_id());
    }
    if (from.has_turn_to()) {
      mutable_turn_to()->::plane::TurnToMsg::MergeFrom(from.turn_to());
    }
  }
}

void TurnToBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.TurnToBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnToBcMsg::CopyFrom(const TurnToBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.TurnToBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnToBcMsg::IsInitialized() const {
  return true;
}

void TurnToBcMsg::Swap(TurnToBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnToBcMsg::InternalSwap(TurnToBcMsg* other) {
  std::swap(ms_and_id_, other->ms_and_id_);
  std::swap(turn_to_, other->turn_to_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TurnToBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnToBcMsg

// optional .plane.MsAndId ms_and_id = 1;
bool TurnToBcMsg::has_ms_and_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TurnToBcMsg::set_has_ms_and_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TurnToBcMsg::clear_has_ms_and_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TurnToBcMsg::clear_ms_and_id() {
  if (ms_and_id_ != NULL) ms_and_id_->::plane::MsAndId::Clear();
  clear_has_ms_and_id();
}
const ::plane::MsAndId& TurnToBcMsg::ms_and_id() const {
  // @@protoc_insertion_point(field_get:plane.TurnToBcMsg.ms_and_id)
  return ms_and_id_ != NULL ? *ms_and_id_
                         : *::plane::MsAndId::internal_default_instance();
}
::plane::MsAndId* TurnToBcMsg::mutable_ms_and_id() {
  set_has_ms_and_id();
  if (ms_and_id_ == NULL) {
    ms_and_id_ = new ::plane::MsAndId;
  }
  // @@protoc_insertion_point(field_mutable:plane.TurnToBcMsg.ms_and_id)
  return ms_and_id_;
}
::plane::MsAndId* TurnToBcMsg::release_ms_and_id() {
  // @@protoc_insertion_point(field_release:plane.TurnToBcMsg.ms_and_id)
  clear_has_ms_and_id();
  ::plane::MsAndId* temp = ms_and_id_;
  ms_and_id_ = NULL;
  return temp;
}
void TurnToBcMsg::set_allocated_ms_and_id(::plane::MsAndId* ms_and_id) {
  delete ms_and_id_;
  ms_and_id_ = ms_and_id;
  if (ms_and_id) {
    set_has_ms_and_id();
  } else {
    clear_has_ms_and_id();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.TurnToBcMsg.ms_and_id)
}

// optional .plane.TurnToMsg turn_to = 2;
bool TurnToBcMsg::has_turn_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TurnToBcMsg::set_has_turn_to() {
  _has_bits_[0] |= 0x00000002u;
}
void TurnToBcMsg::clear_has_turn_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void TurnToBcMsg::clear_turn_to() {
  if (turn_to_ != NULL) turn_to_->::plane::TurnToMsg::Clear();
  clear_has_turn_to();
}
const ::plane::TurnToMsg& TurnToBcMsg::turn_to() const {
  // @@protoc_insertion_point(field_get:plane.TurnToBcMsg.turn_to)
  return turn_to_ != NULL ? *turn_to_
                         : *::plane::TurnToMsg::internal_default_instance();
}
::plane::TurnToMsg* TurnToBcMsg::mutable_turn_to() {
  set_has_turn_to();
  if (turn_to_ == NULL) {
    turn_to_ = new ::plane::TurnToMsg;
  }
  // @@protoc_insertion_point(field_mutable:plane.TurnToBcMsg.turn_to)
  return turn_to_;
}
::plane::TurnToMsg* TurnToBcMsg::release_turn_to() {
  // @@protoc_insertion_point(field_release:plane.TurnToBcMsg.turn_to)
  clear_has_turn_to();
  ::plane::TurnToMsg* temp = turn_to_;
  turn_to_ = NULL;
  return temp;
}
void TurnToBcMsg::set_allocated_turn_to(::plane::TurnToMsg* turn_to) {
  delete turn_to_;
  turn_to_ = turn_to;
  if (turn_to) {
    set_has_turn_to();
  } else {
    clear_has_turn_to();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.TurnToBcMsg.turn_to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopOrMoveBeginBcMsg::kMsAndIdFieldNumber;
const int StopOrMoveBeginBcMsg::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopOrMoveBeginBcMsg::StopOrMoveBeginBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.StopOrMoveBeginBcMsg)
}
StopOrMoveBeginBcMsg::StopOrMoveBeginBcMsg(const StopOrMoveBeginBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ms_and_id()) {
    ms_and_id_ = new ::plane::MsAndId(*from.ms_and_id_);
  } else {
    ms_and_id_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::plane::MoveInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:plane.StopOrMoveBeginBcMsg)
}

void StopOrMoveBeginBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ms_and_id_, 0, reinterpret_cast<char*>(&info_) -
    reinterpret_cast<char*>(&ms_and_id_) + sizeof(info_));
}

StopOrMoveBeginBcMsg::~StopOrMoveBeginBcMsg() {
  // @@protoc_insertion_point(destructor:plane.StopOrMoveBeginBcMsg)
  SharedDtor();
}

void StopOrMoveBeginBcMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ms_and_id_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void StopOrMoveBeginBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopOrMoveBeginBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[3].descriptor;
}

const StopOrMoveBeginBcMsg& StopOrMoveBeginBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopOrMoveBeginBcMsg* StopOrMoveBeginBcMsg::New(::google::protobuf::Arena* arena) const {
  StopOrMoveBeginBcMsg* n = new StopOrMoveBeginBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopOrMoveBeginBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.StopOrMoveBeginBcMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ms_and_id()) {
      GOOGLE_DCHECK(ms_and_id_ != NULL);
      ms_and_id_->::plane::MsAndId::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::plane::MoveInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopOrMoveBeginBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.StopOrMoveBeginBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plane.MsAndId ms_and_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ms_and_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.MoveInfo info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.StopOrMoveBeginBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.StopOrMoveBeginBcMsg)
  return false;
#undef DO_
}

void StopOrMoveBeginBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.StopOrMoveBeginBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ms_and_id_, output);
  }

  // optional .plane.MoveInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.StopOrMoveBeginBcMsg)
}

::google::protobuf::uint8* StopOrMoveBeginBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.StopOrMoveBeginBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ms_and_id_, false, target);
  }

  // optional .plane.MoveInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.StopOrMoveBeginBcMsg)
  return target;
}

size_t StopOrMoveBeginBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.StopOrMoveBeginBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .plane.MsAndId ms_and_id = 1;
    if (has_ms_and_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ms_and_id_);
    }

    // optional .plane.MoveInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopOrMoveBeginBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.StopOrMoveBeginBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StopOrMoveBeginBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopOrMoveBeginBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.StopOrMoveBeginBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.StopOrMoveBeginBcMsg)
    MergeFrom(*source);
  }
}

void StopOrMoveBeginBcMsg::MergeFrom(const StopOrMoveBeginBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.StopOrMoveBeginBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_ms_and_id()) {
      mutable_ms_and_id()->::plane::MsAndId::MergeFrom(from.ms_and_id());
    }
    if (from.has_info()) {
      mutable_info()->::plane::MoveInfo::MergeFrom(from.info());
    }
  }
}

void StopOrMoveBeginBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.StopOrMoveBeginBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopOrMoveBeginBcMsg::CopyFrom(const StopOrMoveBeginBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.StopOrMoveBeginBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopOrMoveBeginBcMsg::IsInitialized() const {
  return true;
}

void StopOrMoveBeginBcMsg::Swap(StopOrMoveBeginBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopOrMoveBeginBcMsg::InternalSwap(StopOrMoveBeginBcMsg* other) {
  std::swap(ms_and_id_, other->ms_and_id_);
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopOrMoveBeginBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopOrMoveBeginBcMsg

// optional .plane.MsAndId ms_and_id = 1;
bool StopOrMoveBeginBcMsg::has_ms_and_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopOrMoveBeginBcMsg::set_has_ms_and_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StopOrMoveBeginBcMsg::clear_has_ms_and_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopOrMoveBeginBcMsg::clear_ms_and_id() {
  if (ms_and_id_ != NULL) ms_and_id_->::plane::MsAndId::Clear();
  clear_has_ms_and_id();
}
const ::plane::MsAndId& StopOrMoveBeginBcMsg::ms_and_id() const {
  // @@protoc_insertion_point(field_get:plane.StopOrMoveBeginBcMsg.ms_and_id)
  return ms_and_id_ != NULL ? *ms_and_id_
                         : *::plane::MsAndId::internal_default_instance();
}
::plane::MsAndId* StopOrMoveBeginBcMsg::mutable_ms_and_id() {
  set_has_ms_and_id();
  if (ms_and_id_ == NULL) {
    ms_and_id_ = new ::plane::MsAndId;
  }
  // @@protoc_insertion_point(field_mutable:plane.StopOrMoveBeginBcMsg.ms_and_id)
  return ms_and_id_;
}
::plane::MsAndId* StopOrMoveBeginBcMsg::release_ms_and_id() {
  // @@protoc_insertion_point(field_release:plane.StopOrMoveBeginBcMsg.ms_and_id)
  clear_has_ms_and_id();
  ::plane::MsAndId* temp = ms_and_id_;
  ms_and_id_ = NULL;
  return temp;
}
void StopOrMoveBeginBcMsg::set_allocated_ms_and_id(::plane::MsAndId* ms_and_id) {
  delete ms_and_id_;
  ms_and_id_ = ms_and_id;
  if (ms_and_id) {
    set_has_ms_and_id();
  } else {
    clear_has_ms_and_id();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.StopOrMoveBeginBcMsg.ms_and_id)
}

// optional .plane.MoveInfo info = 2;
bool StopOrMoveBeginBcMsg::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopOrMoveBeginBcMsg::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void StopOrMoveBeginBcMsg::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopOrMoveBeginBcMsg::clear_info() {
  if (info_ != NULL) info_->::plane::MoveInfo::Clear();
  clear_has_info();
}
const ::plane::MoveInfo& StopOrMoveBeginBcMsg::info() const {
  // @@protoc_insertion_point(field_get:plane.StopOrMoveBeginBcMsg.info)
  return info_ != NULL ? *info_
                         : *::plane::MoveInfo::internal_default_instance();
}
::plane::MoveInfo* StopOrMoveBeginBcMsg::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::plane::MoveInfo;
  }
  // @@protoc_insertion_point(field_mutable:plane.StopOrMoveBeginBcMsg.info)
  return info_;
}
::plane::MoveInfo* StopOrMoveBeginBcMsg::release_info() {
  // @@protoc_insertion_point(field_release:plane.StopOrMoveBeginBcMsg.info)
  clear_has_info();
  ::plane::MoveInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void StopOrMoveBeginBcMsg::set_allocated_info(::plane::MoveInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.StopOrMoveBeginBcMsg.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FireBcMsg::kNdirAngleFieldNumber;
const int FireBcMsg::kXFieldNumber;
const int FireBcMsg::kYFieldNumber;
const int FireBcMsg::kLifeSecondsFieldNumber;
const int FireBcMsg::kSpeedFieldNumber;
const int FireBcMsg::kShooterIdFieldNumber;
const int FireBcMsg::kBulletGroupIdFieldNumber;
const int FireBcMsg::kAllBulletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FireBcMsg::FireBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.FireBcMsg)
}
FireBcMsg::FireBcMsg(const FireBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      all_bullets_(from.all_bullets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ndir_angle_, &from.ndir_angle_,
    reinterpret_cast<char*>(&bullet_group_id_) -
    reinterpret_cast<char*>(&ndir_angle_) + sizeof(bullet_group_id_));
  // @@protoc_insertion_point(copy_constructor:plane.FireBcMsg)
}

void FireBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ndir_angle_, 0, reinterpret_cast<char*>(&bullet_group_id_) -
    reinterpret_cast<char*>(&ndir_angle_) + sizeof(bullet_group_id_));
}

FireBcMsg::~FireBcMsg() {
  // @@protoc_insertion_point(destructor:plane.FireBcMsg)
  SharedDtor();
}

void FireBcMsg::SharedDtor() {
}

void FireBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[4].descriptor;
}

const FireBcMsg& FireBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

FireBcMsg* FireBcMsg::New(::google::protobuf::Arena* arena) const {
  FireBcMsg* n = new FireBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FireBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.FireBcMsg)
  all_bullets_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&ndir_angle_, 0, reinterpret_cast<char*>(&bullet_group_id_) -
      reinterpret_cast<char*>(&ndir_angle_) + sizeof(bullet_group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FireBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.FireBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ndir_angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_ndir_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndir_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 life_seconds = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_life_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shooter_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_shooter_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shooter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bullet_group_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_bullet_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .plane.Bullet all_bullets = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(66u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_all_bullets()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.FireBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.FireBcMsg)
  return false;
#undef DO_
}

void FireBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.FireBcMsg)
  // optional uint32 ndir_angle = 1;
  if (has_ndir_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ndir_angle(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 life_seconds = 4;
  if (has_life_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->life_seconds(), output);
  }

  // optional uint32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // optional uint32 shooter_id = 6;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shooter_id(), output);
  }

  // optional uint32 bullet_group_id = 7;
  if (has_bullet_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bullet_group_id(), output);
  }

  // repeated .plane.Bullet all_bullets = 8;
  for (unsigned int i = 0, n = this->all_bullets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->all_bullets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.FireBcMsg)
}

::google::protobuf::uint8* FireBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.FireBcMsg)
  // optional uint32 ndir_angle = 1;
  if (has_ndir_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ndir_angle(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 life_seconds = 4;
  if (has_life_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->life_seconds(), target);
  }

  // optional uint32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speed(), target);
  }

  // optional uint32 shooter_id = 6;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shooter_id(), target);
  }

  // optional uint32 bullet_group_id = 7;
  if (has_bullet_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bullet_group_id(), target);
  }

  // repeated .plane.Bullet all_bullets = 8;
  for (unsigned int i = 0, n = this->all_bullets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->all_bullets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.FireBcMsg)
  return target;
}

size_t FireBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.FireBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.Bullet all_bullets = 8;
  {
    unsigned int count = this->all_bullets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_bullets(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 ndir_angle = 1;
    if (has_ndir_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ndir_angle());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 life_seconds = 4;
    if (has_life_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_seconds());
    }

    // optional uint32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 shooter_id = 6;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shooter_id());
    }

    // optional uint32 bullet_group_id = 7;
    if (has_bullet_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.FireBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FireBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FireBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.FireBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.FireBcMsg)
    MergeFrom(*source);
  }
}

void FireBcMsg::MergeFrom(const FireBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.FireBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  all_bullets_.MergeFrom(from.all_bullets_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_ndir_angle()) {
      set_ndir_angle(from.ndir_angle());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_life_seconds()) {
      set_life_seconds(from.life_seconds());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_shooter_id()) {
      set_shooter_id(from.shooter_id());
    }
    if (from.has_bullet_group_id()) {
      set_bullet_group_id(from.bullet_group_id());
    }
  }
}

void FireBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.FireBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireBcMsg::CopyFrom(const FireBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.FireBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireBcMsg::IsInitialized() const {
  return true;
}

void FireBcMsg::Swap(FireBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FireBcMsg::InternalSwap(FireBcMsg* other) {
  all_bullets_.UnsafeArenaSwap(&other->all_bullets_);
  std::swap(ndir_angle_, other->ndir_angle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(life_seconds_, other->life_seconds_);
  std::swap(speed_, other->speed_);
  std::swap(shooter_id_, other->shooter_id_);
  std::swap(bullet_group_id_, other->bullet_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FireBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FireBcMsg

// optional uint32 ndir_angle = 1;
bool FireBcMsg::has_ndir_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FireBcMsg::set_has_ndir_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void FireBcMsg::clear_has_ndir_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void FireBcMsg::clear_ndir_angle() {
  ndir_angle_ = 0u;
  clear_has_ndir_angle();
}
::google::protobuf::uint32 FireBcMsg::ndir_angle() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.ndir_angle)
  return ndir_angle_;
}
void FireBcMsg::set_ndir_angle(::google::protobuf::uint32 value) {
  set_has_ndir_angle();
  ndir_angle_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.ndir_angle)
}

// optional uint32 x = 2;
bool FireBcMsg::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FireBcMsg::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void FireBcMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void FireBcMsg::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 FireBcMsg::x() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.x)
  return x_;
}
void FireBcMsg::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.x)
}

// optional uint32 y = 3;
bool FireBcMsg::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FireBcMsg::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void FireBcMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void FireBcMsg::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 FireBcMsg::y() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.y)
  return y_;
}
void FireBcMsg::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.y)
}

// optional uint32 life_seconds = 4;
bool FireBcMsg::has_life_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FireBcMsg::set_has_life_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
void FireBcMsg::clear_has_life_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
void FireBcMsg::clear_life_seconds() {
  life_seconds_ = 0u;
  clear_has_life_seconds();
}
::google::protobuf::uint32 FireBcMsg::life_seconds() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.life_seconds)
  return life_seconds_;
}
void FireBcMsg::set_life_seconds(::google::protobuf::uint32 value) {
  set_has_life_seconds();
  life_seconds_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.life_seconds)
}

// optional uint32 speed = 5;
bool FireBcMsg::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FireBcMsg::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void FireBcMsg::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void FireBcMsg::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 FireBcMsg::speed() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.speed)
  return speed_;
}
void FireBcMsg::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.speed)
}

// optional uint32 shooter_id = 6;
bool FireBcMsg::has_shooter_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FireBcMsg::set_has_shooter_id() {
  _has_bits_[0] |= 0x00000020u;
}
void FireBcMsg::clear_has_shooter_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void FireBcMsg::clear_shooter_id() {
  shooter_id_ = 0u;
  clear_has_shooter_id();
}
::google::protobuf::uint32 FireBcMsg::shooter_id() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.shooter_id)
  return shooter_id_;
}
void FireBcMsg::set_shooter_id(::google::protobuf::uint32 value) {
  set_has_shooter_id();
  shooter_id_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.shooter_id)
}

// optional uint32 bullet_group_id = 7;
bool FireBcMsg::has_bullet_group_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FireBcMsg::set_has_bullet_group_id() {
  _has_bits_[0] |= 0x00000040u;
}
void FireBcMsg::clear_has_bullet_group_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void FireBcMsg::clear_bullet_group_id() {
  bullet_group_id_ = 0u;
  clear_has_bullet_group_id();
}
::google::protobuf::uint32 FireBcMsg::bullet_group_id() const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.bullet_group_id)
  return bullet_group_id_;
}
void FireBcMsg::set_bullet_group_id(::google::protobuf::uint32 value) {
  set_has_bullet_group_id();
  bullet_group_id_ = value;
  // @@protoc_insertion_point(field_set:plane.FireBcMsg.bullet_group_id)
}

// repeated .plane.Bullet all_bullets = 8;
int FireBcMsg::all_bullets_size() const {
  return all_bullets_.size();
}
void FireBcMsg::clear_all_bullets() {
  all_bullets_.Clear();
}
const ::plane::Bullet& FireBcMsg::all_bullets(int index) const {
  // @@protoc_insertion_point(field_get:plane.FireBcMsg.all_bullets)
  return all_bullets_.Get(index);
}
::plane::Bullet* FireBcMsg::mutable_all_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:plane.FireBcMsg.all_bullets)
  return all_bullets_.Mutable(index);
}
::plane::Bullet* FireBcMsg::add_all_bullets() {
  // @@protoc_insertion_point(field_add:plane.FireBcMsg.all_bullets)
  return all_bullets_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::Bullet >*
FireBcMsg::mutable_all_bullets() {
  // @@protoc_insertion_point(field_mutable_list:plane.FireBcMsg.all_bullets)
  return &all_bullets_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::Bullet >&
FireBcMsg::all_bullets() const {
  // @@protoc_insertion_point(field_list:plane.FireBcMsg.all_bullets)
  return all_bullets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bullet::kIdFieldNumber;
const int Bullet::kXFieldNumber;
const int Bullet::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bullet::Bullet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.Bullet)
}
Bullet::Bullet(const Bullet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:plane.Bullet)
}

void Bullet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_) + sizeof(y_));
}

Bullet::~Bullet() {
  // @@protoc_insertion_point(destructor:plane.Bullet)
  SharedDtor();
}

void Bullet::SharedDtor() {
}

void Bullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bullet::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[5].descriptor;
}

const Bullet& Bullet::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

Bullet* Bullet::New(::google::protobuf::Arena* arena) const {
  Bullet* n = new Bullet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bullet::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.Bullet)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.Bullet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.Bullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.Bullet)
  return false;
#undef DO_
}

void Bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.Bullet)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.Bullet)
}

::google::protobuf::uint8* Bullet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.Bullet)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.Bullet)
  return target;
}

size_t Bullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.Bullet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bullet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  const Bullet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bullet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.Bullet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.Bullet)
    MergeFrom(*source);
  }
}

void Bullet::MergeFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void Bullet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bullet::CopyFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  return true;
}

void Bullet::Swap(Bullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bullet::InternalSwap(Bullet* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bullet::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bullet

// optional uint32 id = 1;
bool Bullet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Bullet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Bullet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Bullet::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Bullet::id() const {
  // @@protoc_insertion_point(field_get:plane.Bullet.id)
  return id_;
}
void Bullet::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:plane.Bullet.id)
}

// optional uint32 x = 2;
bool Bullet::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Bullet::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Bullet::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Bullet::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 Bullet::x() const {
  // @@protoc_insertion_point(field_get:plane.Bullet.x)
  return x_;
}
void Bullet::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:plane.Bullet.x)
}

// optional uint32 y = 3;
bool Bullet::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Bullet::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Bullet::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Bullet::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 Bullet::y() const {
  // @@protoc_insertion_point(field_get:plane.Bullet.y)
  return y_;
}
void Bullet::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:plane.Bullet.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FireSimpleBcMsg::kDirAngleFieldNumber;
const int FireSimpleBcMsg::kXFieldNumber;
const int FireSimpleBcMsg::kYFieldNumber;
const int FireSimpleBcMsg::kLifeSecondsFieldNumber;
const int FireSimpleBcMsg::kSpeedFieldNumber;
const int FireSimpleBcMsg::kShooterIdFieldNumber;
const int FireSimpleBcMsg::kBulletGroupIdFieldNumber;
const int FireSimpleBcMsg::kFireMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FireSimpleBcMsg::FireSimpleBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.FireSimpleBcMsg)
}
FireSimpleBcMsg::FireSimpleBcMsg(const FireSimpleBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dir_angle_, &from.dir_angle_,
    reinterpret_cast<char*>(&fire_ms_) -
    reinterpret_cast<char*>(&dir_angle_) + sizeof(fire_ms_));
  // @@protoc_insertion_point(copy_constructor:plane.FireSimpleBcMsg)
}

void FireSimpleBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dir_angle_, 0, reinterpret_cast<char*>(&fire_ms_) -
    reinterpret_cast<char*>(&dir_angle_) + sizeof(fire_ms_));
}

FireSimpleBcMsg::~FireSimpleBcMsg() {
  // @@protoc_insertion_point(destructor:plane.FireSimpleBcMsg)
  SharedDtor();
}

void FireSimpleBcMsg::SharedDtor() {
}

void FireSimpleBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireSimpleBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[6].descriptor;
}

const FireSimpleBcMsg& FireSimpleBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

FireSimpleBcMsg* FireSimpleBcMsg::New(::google::protobuf::Arena* arena) const {
  FireSimpleBcMsg* n = new FireSimpleBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FireSimpleBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.FireSimpleBcMsg)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&dir_angle_, 0, reinterpret_cast<char*>(&fire_ms_) -
      reinterpret_cast<char*>(&dir_angle_) + sizeof(fire_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FireSimpleBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.FireSimpleBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_dir_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 life_seconds = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_life_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shooter_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_shooter_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shooter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bullet_group_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_bullet_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fire_ms = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(64u)) {
          set_has_fire_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fire_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.FireSimpleBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.FireSimpleBcMsg)
  return false;
#undef DO_
}

void FireSimpleBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.FireSimpleBcMsg)
  // optional uint32 dir_angle = 1;
  if (has_dir_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_angle(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 life_seconds = 4;
  if (has_life_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->life_seconds(), output);
  }

  // optional uint32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // optional uint32 shooter_id = 6;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shooter_id(), output);
  }

  // optional uint32 bullet_group_id = 7;
  if (has_bullet_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bullet_group_id(), output);
  }

  // optional uint32 fire_ms = 8;
  if (has_fire_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fire_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.FireSimpleBcMsg)
}

::google::protobuf::uint8* FireSimpleBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.FireSimpleBcMsg)
  // optional uint32 dir_angle = 1;
  if (has_dir_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_angle(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 life_seconds = 4;
  if (has_life_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->life_seconds(), target);
  }

  // optional uint32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speed(), target);
  }

  // optional uint32 shooter_id = 6;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shooter_id(), target);
  }

  // optional uint32 bullet_group_id = 7;
  if (has_bullet_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bullet_group_id(), target);
  }

  // optional uint32 fire_ms = 8;
  if (has_fire_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fire_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.FireSimpleBcMsg)
  return target;
}

size_t FireSimpleBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.FireSimpleBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 dir_angle = 1;
    if (has_dir_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_angle());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 life_seconds = 4;
    if (has_life_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_seconds());
    }

    // optional uint32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 shooter_id = 6;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shooter_id());
    }

    // optional uint32 bullet_group_id = 7;
    if (has_bullet_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_group_id());
    }

    // optional uint32 fire_ms = 8;
    if (has_fire_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fire_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireSimpleBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.FireSimpleBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FireSimpleBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FireSimpleBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.FireSimpleBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.FireSimpleBcMsg)
    MergeFrom(*source);
  }
}

void FireSimpleBcMsg::MergeFrom(const FireSimpleBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.FireSimpleBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_dir_angle()) {
      set_dir_angle(from.dir_angle());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_life_seconds()) {
      set_life_seconds(from.life_seconds());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_shooter_id()) {
      set_shooter_id(from.shooter_id());
    }
    if (from.has_bullet_group_id()) {
      set_bullet_group_id(from.bullet_group_id());
    }
    if (from.has_fire_ms()) {
      set_fire_ms(from.fire_ms());
    }
  }
}

void FireSimpleBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.FireSimpleBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireSimpleBcMsg::CopyFrom(const FireSimpleBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.FireSimpleBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireSimpleBcMsg::IsInitialized() const {
  return true;
}

void FireSimpleBcMsg::Swap(FireSimpleBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FireSimpleBcMsg::InternalSwap(FireSimpleBcMsg* other) {
  std::swap(dir_angle_, other->dir_angle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(life_seconds_, other->life_seconds_);
  std::swap(speed_, other->speed_);
  std::swap(shooter_id_, other->shooter_id_);
  std::swap(bullet_group_id_, other->bullet_group_id_);
  std::swap(fire_ms_, other->fire_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FireSimpleBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FireSimpleBcMsg

// optional uint32 dir_angle = 1;
bool FireSimpleBcMsg::has_dir_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FireSimpleBcMsg::set_has_dir_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void FireSimpleBcMsg::clear_has_dir_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void FireSimpleBcMsg::clear_dir_angle() {
  dir_angle_ = 0u;
  clear_has_dir_angle();
}
::google::protobuf::uint32 FireSimpleBcMsg::dir_angle() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.dir_angle)
  return dir_angle_;
}
void FireSimpleBcMsg::set_dir_angle(::google::protobuf::uint32 value) {
  set_has_dir_angle();
  dir_angle_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.dir_angle)
}

// optional uint32 x = 2;
bool FireSimpleBcMsg::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FireSimpleBcMsg::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void FireSimpleBcMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void FireSimpleBcMsg::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 FireSimpleBcMsg::x() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.x)
  return x_;
}
void FireSimpleBcMsg::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.x)
}

// optional uint32 y = 3;
bool FireSimpleBcMsg::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FireSimpleBcMsg::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void FireSimpleBcMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void FireSimpleBcMsg::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 FireSimpleBcMsg::y() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.y)
  return y_;
}
void FireSimpleBcMsg::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.y)
}

// optional uint32 life_seconds = 4;
bool FireSimpleBcMsg::has_life_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FireSimpleBcMsg::set_has_life_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
void FireSimpleBcMsg::clear_has_life_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
void FireSimpleBcMsg::clear_life_seconds() {
  life_seconds_ = 0u;
  clear_has_life_seconds();
}
::google::protobuf::uint32 FireSimpleBcMsg::life_seconds() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.life_seconds)
  return life_seconds_;
}
void FireSimpleBcMsg::set_life_seconds(::google::protobuf::uint32 value) {
  set_has_life_seconds();
  life_seconds_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.life_seconds)
}

// optional uint32 speed = 5;
bool FireSimpleBcMsg::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FireSimpleBcMsg::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void FireSimpleBcMsg::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void FireSimpleBcMsg::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 FireSimpleBcMsg::speed() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.speed)
  return speed_;
}
void FireSimpleBcMsg::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.speed)
}

// optional uint32 shooter_id = 6;
bool FireSimpleBcMsg::has_shooter_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FireSimpleBcMsg::set_has_shooter_id() {
  _has_bits_[0] |= 0x00000020u;
}
void FireSimpleBcMsg::clear_has_shooter_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void FireSimpleBcMsg::clear_shooter_id() {
  shooter_id_ = 0u;
  clear_has_shooter_id();
}
::google::protobuf::uint32 FireSimpleBcMsg::shooter_id() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.shooter_id)
  return shooter_id_;
}
void FireSimpleBcMsg::set_shooter_id(::google::protobuf::uint32 value) {
  set_has_shooter_id();
  shooter_id_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.shooter_id)
}

// optional uint32 bullet_group_id = 7;
bool FireSimpleBcMsg::has_bullet_group_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FireSimpleBcMsg::set_has_bullet_group_id() {
  _has_bits_[0] |= 0x00000040u;
}
void FireSimpleBcMsg::clear_has_bullet_group_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void FireSimpleBcMsg::clear_bullet_group_id() {
  bullet_group_id_ = 0u;
  clear_has_bullet_group_id();
}
::google::protobuf::uint32 FireSimpleBcMsg::bullet_group_id() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.bullet_group_id)
  return bullet_group_id_;
}
void FireSimpleBcMsg::set_bullet_group_id(::google::protobuf::uint32 value) {
  set_has_bullet_group_id();
  bullet_group_id_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.bullet_group_id)
}

// optional uint32 fire_ms = 8;
bool FireSimpleBcMsg::has_fire_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FireSimpleBcMsg::set_has_fire_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void FireSimpleBcMsg::clear_has_fire_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void FireSimpleBcMsg::clear_fire_ms() {
  fire_ms_ = 0u;
  clear_has_fire_ms();
}
::google::protobuf::uint32 FireSimpleBcMsg::fire_ms() const {
  // @@protoc_insertion_point(field_get:plane.FireSimpleBcMsg.fire_ms)
  return fire_ms_;
}
void FireSimpleBcMsg::set_fire_ms(::google::protobuf::uint32 value) {
  set_has_fire_ms();
  fire_ms_ = value;
  // @@protoc_insertion_point(field_set:plane.FireSimpleBcMsg.fire_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HitBcMsg::kBulletGroupIdFieldNumber;
const int HitBcMsg::kBulletIdFieldNumber;
const int HitBcMsg::kPlaneOwnerIdFieldNumber;
const int HitBcMsg::kPlaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HitBcMsg::HitBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.HitBcMsg)
}
HitBcMsg::HitBcMsg(const HitBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bullet_group_id_, &from.bullet_group_id_,
    reinterpret_cast<char*>(&plane_id_) -
    reinterpret_cast<char*>(&bullet_group_id_) + sizeof(plane_id_));
  // @@protoc_insertion_point(copy_constructor:plane.HitBcMsg)
}

void HitBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bullet_group_id_, 0, reinterpret_cast<char*>(&plane_id_) -
    reinterpret_cast<char*>(&bullet_group_id_) + sizeof(plane_id_));
}

HitBcMsg::~HitBcMsg() {
  // @@protoc_insertion_point(destructor:plane.HitBcMsg)
  SharedDtor();
}

void HitBcMsg::SharedDtor() {
}

void HitBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[7].descriptor;
}

const HitBcMsg& HitBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

HitBcMsg* HitBcMsg::New(::google::protobuf::Arena* arena) const {
  HitBcMsg* n = new HitBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HitBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.HitBcMsg)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&bullet_group_id_, 0, reinterpret_cast<char*>(&plane_id_) -
      reinterpret_cast<char*>(&bullet_group_id_) + sizeof(plane_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HitBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.HitBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bullet_group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_bullet_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_bullet_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 plane_owner_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_plane_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plane_owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 plane_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_plane_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.HitBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.HitBcMsg)
  return false;
#undef DO_
}

void HitBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.HitBcMsg)
  // optional uint32 bullet_group_id = 1;
  if (has_bullet_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bullet_group_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional uint32 plane_owner_id = 3;
  if (has_plane_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->plane_owner_id(), output);
  }

  // optional uint32 plane_id = 4;
  if (has_plane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->plane_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.HitBcMsg)
}

::google::protobuf::uint8* HitBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.HitBcMsg)
  // optional uint32 bullet_group_id = 1;
  if (has_bullet_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bullet_group_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional uint32 plane_owner_id = 3;
  if (has_plane_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->plane_owner_id(), target);
  }

  // optional uint32 plane_id = 4;
  if (has_plane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->plane_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.HitBcMsg)
  return target;
}

size_t HitBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.HitBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 bullet_group_id = 1;
    if (has_bullet_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_group_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional uint32 plane_owner_id = 3;
    if (has_plane_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plane_owner_id());
    }

    // optional uint32 plane_id = 4;
    if (has_plane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plane_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.HitBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HitBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HitBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.HitBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.HitBcMsg)
    MergeFrom(*source);
  }
}

void HitBcMsg::MergeFrom(const HitBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.HitBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_bullet_group_id()) {
      set_bullet_group_id(from.bullet_group_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_plane_owner_id()) {
      set_plane_owner_id(from.plane_owner_id());
    }
    if (from.has_plane_id()) {
      set_plane_id(from.plane_id());
    }
  }
}

void HitBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.HitBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitBcMsg::CopyFrom(const HitBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.HitBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitBcMsg::IsInitialized() const {
  return true;
}

void HitBcMsg::Swap(HitBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HitBcMsg::InternalSwap(HitBcMsg* other) {
  std::swap(bullet_group_id_, other->bullet_group_id_);
  std::swap(bullet_id_, other->bullet_id_);
  std::swap(plane_owner_id_, other->plane_owner_id_);
  std::swap(plane_id_, other->plane_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HitBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HitBcMsg

// optional uint32 bullet_group_id = 1;
bool HitBcMsg::has_bullet_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HitBcMsg::set_has_bullet_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HitBcMsg::clear_has_bullet_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HitBcMsg::clear_bullet_group_id() {
  bullet_group_id_ = 0u;
  clear_has_bullet_group_id();
}
::google::protobuf::uint32 HitBcMsg::bullet_group_id() const {
  // @@protoc_insertion_point(field_get:plane.HitBcMsg.bullet_group_id)
  return bullet_group_id_;
}
void HitBcMsg::set_bullet_group_id(::google::protobuf::uint32 value) {
  set_has_bullet_group_id();
  bullet_group_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitBcMsg.bullet_group_id)
}

// optional uint32 bullet_id = 2;
bool HitBcMsg::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HitBcMsg::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HitBcMsg::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HitBcMsg::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
::google::protobuf::uint32 HitBcMsg::bullet_id() const {
  // @@protoc_insertion_point(field_get:plane.HitBcMsg.bullet_id)
  return bullet_id_;
}
void HitBcMsg::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitBcMsg.bullet_id)
}

// optional uint32 plane_owner_id = 3;
bool HitBcMsg::has_plane_owner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HitBcMsg::set_has_plane_owner_id() {
  _has_bits_[0] |= 0x00000004u;
}
void HitBcMsg::clear_has_plane_owner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void HitBcMsg::clear_plane_owner_id() {
  plane_owner_id_ = 0u;
  clear_has_plane_owner_id();
}
::google::protobuf::uint32 HitBcMsg::plane_owner_id() const {
  // @@protoc_insertion_point(field_get:plane.HitBcMsg.plane_owner_id)
  return plane_owner_id_;
}
void HitBcMsg::set_plane_owner_id(::google::protobuf::uint32 value) {
  set_has_plane_owner_id();
  plane_owner_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitBcMsg.plane_owner_id)
}

// optional uint32 plane_id = 4;
bool HitBcMsg::has_plane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HitBcMsg::set_has_plane_id() {
  _has_bits_[0] |= 0x00000008u;
}
void HitBcMsg::clear_has_plane_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void HitBcMsg::clear_plane_id() {
  plane_id_ = 0u;
  clear_has_plane_id();
}
::google::protobuf::uint32 HitBcMsg::plane_id() const {
  // @@protoc_insertion_point(field_get:plane.HitBcMsg.plane_id)
  return plane_id_;
}
void HitBcMsg::set_plane_id(::google::protobuf::uint32 value) {
  set_has_plane_id();
  plane_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitBcMsg.plane_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HitEnergyMsg::kBulletGroupIdFieldNumber;
const int HitEnergyMsg::kBulletIdFieldNumber;
const int HitEnergyMsg::kEnergyIdFieldNumber;
const int HitEnergyMsg::kEnergyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HitEnergyMsg::HitEnergyMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.HitEnergyMsg)
}
HitEnergyMsg::HitEnergyMsg(const HitEnergyMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bullet_group_id_, &from.bullet_group_id_,
    reinterpret_cast<char*>(&energy_type_) -
    reinterpret_cast<char*>(&bullet_group_id_) + sizeof(energy_type_));
  // @@protoc_insertion_point(copy_constructor:plane.HitEnergyMsg)
}

void HitEnergyMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bullet_group_id_, 0, reinterpret_cast<char*>(&energy_type_) -
    reinterpret_cast<char*>(&bullet_group_id_) + sizeof(energy_type_));
}

HitEnergyMsg::~HitEnergyMsg() {
  // @@protoc_insertion_point(destructor:plane.HitEnergyMsg)
  SharedDtor();
}

void HitEnergyMsg::SharedDtor() {
}

void HitEnergyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitEnergyMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[8].descriptor;
}

const HitEnergyMsg& HitEnergyMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

HitEnergyMsg* HitEnergyMsg::New(::google::protobuf::Arena* arena) const {
  HitEnergyMsg* n = new HitEnergyMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HitEnergyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.HitEnergyMsg)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&bullet_group_id_, 0, reinterpret_cast<char*>(&energy_type_) -
      reinterpret_cast<char*>(&bullet_group_id_) + sizeof(energy_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HitEnergyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.HitEnergyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bullet_group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_bullet_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_bullet_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 energy_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_energy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 energy_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_energy_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.HitEnergyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.HitEnergyMsg)
  return false;
#undef DO_
}

void HitEnergyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.HitEnergyMsg)
  // optional uint32 bullet_group_id = 1;
  if (has_bullet_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bullet_group_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional uint32 energy_id = 3;
  if (has_energy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->energy_id(), output);
  }

  // optional uint32 energy_type = 4;
  if (has_energy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->energy_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.HitEnergyMsg)
}

::google::protobuf::uint8* HitEnergyMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.HitEnergyMsg)
  // optional uint32 bullet_group_id = 1;
  if (has_bullet_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bullet_group_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional uint32 energy_id = 3;
  if (has_energy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->energy_id(), target);
  }

  // optional uint32 energy_type = 4;
  if (has_energy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->energy_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.HitEnergyMsg)
  return target;
}

size_t HitEnergyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.HitEnergyMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 bullet_group_id = 1;
    if (has_bullet_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_group_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional uint32 energy_id = 3;
    if (has_energy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy_id());
    }

    // optional uint32 energy_type = 4;
    if (has_energy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitEnergyMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.HitEnergyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HitEnergyMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HitEnergyMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.HitEnergyMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.HitEnergyMsg)
    MergeFrom(*source);
  }
}

void HitEnergyMsg::MergeFrom(const HitEnergyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.HitEnergyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_bullet_group_id()) {
      set_bullet_group_id(from.bullet_group_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_energy_id()) {
      set_energy_id(from.energy_id());
    }
    if (from.has_energy_type()) {
      set_energy_type(from.energy_type());
    }
  }
}

void HitEnergyMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.HitEnergyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitEnergyMsg::CopyFrom(const HitEnergyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.HitEnergyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEnergyMsg::IsInitialized() const {
  return true;
}

void HitEnergyMsg::Swap(HitEnergyMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HitEnergyMsg::InternalSwap(HitEnergyMsg* other) {
  std::swap(bullet_group_id_, other->bullet_group_id_);
  std::swap(bullet_id_, other->bullet_id_);
  std::swap(energy_id_, other->energy_id_);
  std::swap(energy_type_, other->energy_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HitEnergyMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HitEnergyMsg

// optional uint32 bullet_group_id = 1;
bool HitEnergyMsg::has_bullet_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HitEnergyMsg::set_has_bullet_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HitEnergyMsg::clear_has_bullet_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HitEnergyMsg::clear_bullet_group_id() {
  bullet_group_id_ = 0u;
  clear_has_bullet_group_id();
}
::google::protobuf::uint32 HitEnergyMsg::bullet_group_id() const {
  // @@protoc_insertion_point(field_get:plane.HitEnergyMsg.bullet_group_id)
  return bullet_group_id_;
}
void HitEnergyMsg::set_bullet_group_id(::google::protobuf::uint32 value) {
  set_has_bullet_group_id();
  bullet_group_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitEnergyMsg.bullet_group_id)
}

// optional uint32 bullet_id = 2;
bool HitEnergyMsg::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HitEnergyMsg::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HitEnergyMsg::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HitEnergyMsg::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
::google::protobuf::uint32 HitEnergyMsg::bullet_id() const {
  // @@protoc_insertion_point(field_get:plane.HitEnergyMsg.bullet_id)
  return bullet_id_;
}
void HitEnergyMsg::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitEnergyMsg.bullet_id)
}

// optional uint32 energy_id = 3;
bool HitEnergyMsg::has_energy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HitEnergyMsg::set_has_energy_id() {
  _has_bits_[0] |= 0x00000004u;
}
void HitEnergyMsg::clear_has_energy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void HitEnergyMsg::clear_energy_id() {
  energy_id_ = 0u;
  clear_has_energy_id();
}
::google::protobuf::uint32 HitEnergyMsg::energy_id() const {
  // @@protoc_insertion_point(field_get:plane.HitEnergyMsg.energy_id)
  return energy_id_;
}
void HitEnergyMsg::set_energy_id(::google::protobuf::uint32 value) {
  set_has_energy_id();
  energy_id_ = value;
  // @@protoc_insertion_point(field_set:plane.HitEnergyMsg.energy_id)
}

// optional uint32 energy_type = 4;
bool HitEnergyMsg::has_energy_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HitEnergyMsg::set_has_energy_type() {
  _has_bits_[0] |= 0x00000008u;
}
void HitEnergyMsg::clear_has_energy_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void HitEnergyMsg::clear_energy_type() {
  energy_type_ = 0u;
  clear_has_energy_type();
}
::google::protobuf::uint32 HitEnergyMsg::energy_type() const {
  // @@protoc_insertion_point(field_get:plane.HitEnergyMsg.energy_type)
  return energy_type_;
}
void HitEnergyMsg::set_energy_type(::google::protobuf::uint32 value) {
  set_has_energy_type();
  energy_type_ = value;
  // @@protoc_insertion_point(field_set:plane.HitEnergyMsg.energy_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaneBcMsg::kMsAndIdFieldNumber;
const int PlaneBcMsg::kNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaneBcMsg::PlaneBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.PlaneBcMsg)
}
PlaneBcMsg::PlaneBcMsg(const PlaneBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ms_and_id()) {
    ms_and_id_ = new ::plane::MsAndId(*from.ms_and_id_);
  } else {
    ms_and_id_ = NULL;
  }
  if (from.has_new_()) {
    new__ = new ::plane::PlaneMsg(*from.new__);
  } else {
    new__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:plane.PlaneBcMsg)
}

void PlaneBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ms_and_id_, 0, reinterpret_cast<char*>(&new__) -
    reinterpret_cast<char*>(&ms_and_id_) + sizeof(new__));
}

PlaneBcMsg::~PlaneBcMsg() {
  // @@protoc_insertion_point(destructor:plane.PlaneBcMsg)
  SharedDtor();
}

void PlaneBcMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ms_and_id_;
  }
  if (this != internal_default_instance()) {
    delete new__;
  }
}

void PlaneBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaneBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[9].descriptor;
}

const PlaneBcMsg& PlaneBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaneBcMsg* PlaneBcMsg::New(::google::protobuf::Arena* arena) const {
  PlaneBcMsg* n = new PlaneBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaneBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.PlaneBcMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ms_and_id()) {
      GOOGLE_DCHECK(ms_and_id_ != NULL);
      ms_and_id_->::plane::MsAndId::Clear();
    }
    if (has_new_()) {
      GOOGLE_DCHECK(new__ != NULL);
      new__->::plane::PlaneMsg::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlaneBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.PlaneBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plane.MsAndId ms_and_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ms_and_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.PlaneMsg new = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.PlaneBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.PlaneBcMsg)
  return false;
#undef DO_
}

void PlaneBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.PlaneBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ms_and_id_, output);
  }

  // optional .plane.PlaneMsg new = 2;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new__, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.PlaneBcMsg)
}

::google::protobuf::uint8* PlaneBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.PlaneBcMsg)
  // optional .plane.MsAndId ms_and_id = 1;
  if (has_ms_and_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ms_and_id_, false, target);
  }

  // optional .plane.PlaneMsg new = 2;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new__, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.PlaneBcMsg)
  return target;
}

size_t PlaneBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.PlaneBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .plane.MsAndId ms_and_id = 1;
    if (has_ms_and_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ms_and_id_);
    }

    // optional .plane.PlaneMsg new = 2;
    if (has_new_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new__);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.PlaneBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaneBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.PlaneBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.PlaneBcMsg)
    MergeFrom(*source);
  }
}

void PlaneBcMsg::MergeFrom(const PlaneBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.PlaneBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_ms_and_id()) {
      mutable_ms_and_id()->::plane::MsAndId::MergeFrom(from.ms_and_id());
    }
    if (from.has_new_()) {
      mutable_new_()->::plane::PlaneMsg::MergeFrom(from.new_());
    }
  }
}

void PlaneBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.PlaneBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneBcMsg::CopyFrom(const PlaneBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.PlaneBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneBcMsg::IsInitialized() const {
  return true;
}

void PlaneBcMsg::Swap(PlaneBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaneBcMsg::InternalSwap(PlaneBcMsg* other) {
  std::swap(ms_and_id_, other->ms_and_id_);
  std::swap(new__, other->new__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaneBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaneBcMsg

// optional .plane.MsAndId ms_and_id = 1;
bool PlaneBcMsg::has_ms_and_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaneBcMsg::set_has_ms_and_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaneBcMsg::clear_has_ms_and_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaneBcMsg::clear_ms_and_id() {
  if (ms_and_id_ != NULL) ms_and_id_->::plane::MsAndId::Clear();
  clear_has_ms_and_id();
}
const ::plane::MsAndId& PlaneBcMsg::ms_and_id() const {
  // @@protoc_insertion_point(field_get:plane.PlaneBcMsg.ms_and_id)
  return ms_and_id_ != NULL ? *ms_and_id_
                         : *::plane::MsAndId::internal_default_instance();
}
::plane::MsAndId* PlaneBcMsg::mutable_ms_and_id() {
  set_has_ms_and_id();
  if (ms_and_id_ == NULL) {
    ms_and_id_ = new ::plane::MsAndId;
  }
  // @@protoc_insertion_point(field_mutable:plane.PlaneBcMsg.ms_and_id)
  return ms_and_id_;
}
::plane::MsAndId* PlaneBcMsg::release_ms_and_id() {
  // @@protoc_insertion_point(field_release:plane.PlaneBcMsg.ms_and_id)
  clear_has_ms_and_id();
  ::plane::MsAndId* temp = ms_and_id_;
  ms_and_id_ = NULL;
  return temp;
}
void PlaneBcMsg::set_allocated_ms_and_id(::plane::MsAndId* ms_and_id) {
  delete ms_and_id_;
  ms_and_id_ = ms_and_id;
  if (ms_and_id) {
    set_has_ms_and_id();
  } else {
    clear_has_ms_and_id();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.PlaneBcMsg.ms_and_id)
}

// optional .plane.PlaneMsg new = 2;
bool PlaneBcMsg::has_new_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlaneBcMsg::set_has_new_() {
  _has_bits_[0] |= 0x00000002u;
}
void PlaneBcMsg::clear_has_new_() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlaneBcMsg::clear_new_() {
  if (new__ != NULL) new__->::plane::PlaneMsg::Clear();
  clear_has_new_();
}
const ::plane::PlaneMsg& PlaneBcMsg::new_() const {
  // @@protoc_insertion_point(field_get:plane.PlaneBcMsg.new)
  return new__ != NULL ? *new__
                         : *::plane::PlaneMsg::internal_default_instance();
}
::plane::PlaneMsg* PlaneBcMsg::mutable_new_() {
  set_has_new_();
  if (new__ == NULL) {
    new__ = new ::plane::PlaneMsg;
  }
  // @@protoc_insertion_point(field_mutable:plane.PlaneBcMsg.new)
  return new__;
}
::plane::PlaneMsg* PlaneBcMsg::release_new_() {
  // @@protoc_insertion_point(field_release:plane.PlaneBcMsg.new)
  clear_has_new_();
  ::plane::PlaneMsg* temp = new__;
  new__ = NULL;
  return temp;
}
void PlaneBcMsg::set_allocated_new_(::plane::PlaneMsg* new_) {
  delete new__;
  new__ = new_;
  if (new_) {
    set_has_new_();
  } else {
    clear_has_new_();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.PlaneBcMsg.new)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRemovePlaneBcMsg::kPlayeridFieldNumber;
const int BatchRemovePlaneBcMsg::kPlaneIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRemovePlaneBcMsg::BatchRemovePlaneBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.BatchRemovePlaneBcMsg)
}
BatchRemovePlaneBcMsg::BatchRemovePlaneBcMsg(const BatchRemovePlaneBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      plane_ids_(from.plane_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:plane.BatchRemovePlaneBcMsg)
}

void BatchRemovePlaneBcMsg::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
}

BatchRemovePlaneBcMsg::~BatchRemovePlaneBcMsg() {
  // @@protoc_insertion_point(destructor:plane.BatchRemovePlaneBcMsg)
  SharedDtor();
}

void BatchRemovePlaneBcMsg::SharedDtor() {
}

void BatchRemovePlaneBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRemovePlaneBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[10].descriptor;
}

const BatchRemovePlaneBcMsg& BatchRemovePlaneBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchRemovePlaneBcMsg* BatchRemovePlaneBcMsg::New(::google::protobuf::Arena* arena) const {
  BatchRemovePlaneBcMsg* n = new BatchRemovePlaneBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchRemovePlaneBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.BatchRemovePlaneBcMsg)
  plane_ids_.Clear();
  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchRemovePlaneBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.BatchRemovePlaneBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 plane_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_plane_ids())));
        } else if (static_cast<::google::protobuf::uint8>(tag) ==
                   static_cast<::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_plane_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.BatchRemovePlaneBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.BatchRemovePlaneBcMsg)
  return false;
#undef DO_
}

void BatchRemovePlaneBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.BatchRemovePlaneBcMsg)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // repeated uint32 plane_ids = 2;
  for (int i = 0, n = this->plane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->plane_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.BatchRemovePlaneBcMsg)
}

::google::protobuf::uint8* BatchRemovePlaneBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.BatchRemovePlaneBcMsg)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // repeated uint32 plane_ids = 2;
  for (int i = 0, n = this->plane_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->plane_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.BatchRemovePlaneBcMsg)
  return target;
}

size_t BatchRemovePlaneBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.BatchRemovePlaneBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 plane_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->plane_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->plane_ids_size());
    total_size += data_size;
  }

  // optional uint32 playerid = 1;
  if (has_playerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRemovePlaneBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.BatchRemovePlaneBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRemovePlaneBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchRemovePlaneBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.BatchRemovePlaneBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.BatchRemovePlaneBcMsg)
    MergeFrom(*source);
  }
}

void BatchRemovePlaneBcMsg::MergeFrom(const BatchRemovePlaneBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.BatchRemovePlaneBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plane_ids_.MergeFrom(from.plane_ids_);
  if (from.has_playerid()) {
    set_playerid(from.playerid());
  }
}

void BatchRemovePlaneBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.BatchRemovePlaneBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRemovePlaneBcMsg::CopyFrom(const BatchRemovePlaneBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.BatchRemovePlaneBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRemovePlaneBcMsg::IsInitialized() const {
  return true;
}

void BatchRemovePlaneBcMsg::Swap(BatchRemovePlaneBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRemovePlaneBcMsg::InternalSwap(BatchRemovePlaneBcMsg* other) {
  plane_ids_.UnsafeArenaSwap(&other->plane_ids_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchRemovePlaneBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchRemovePlaneBcMsg

// optional uint32 playerid = 1;
bool BatchRemovePlaneBcMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchRemovePlaneBcMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchRemovePlaneBcMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchRemovePlaneBcMsg::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 BatchRemovePlaneBcMsg::playerid() const {
  // @@protoc_insertion_point(field_get:plane.BatchRemovePlaneBcMsg.playerid)
  return playerid_;
}
void BatchRemovePlaneBcMsg::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.BatchRemovePlaneBcMsg.playerid)
}

// repeated uint32 plane_ids = 2;
int BatchRemovePlaneBcMsg::plane_ids_size() const {
  return plane_ids_.size();
}
void BatchRemovePlaneBcMsg::clear_plane_ids() {
  plane_ids_.Clear();
}
::google::protobuf::uint32 BatchRemovePlaneBcMsg::plane_ids(int index) const {
  // @@protoc_insertion_point(field_get:plane.BatchRemovePlaneBcMsg.plane_ids)
  return plane_ids_.Get(index);
}
void BatchRemovePlaneBcMsg::set_plane_ids(int index, ::google::protobuf::uint32 value) {
  plane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:plane.BatchRemovePlaneBcMsg.plane_ids)
}
void BatchRemovePlaneBcMsg::add_plane_ids(::google::protobuf::uint32 value) {
  plane_ids_.Add(value);
  // @@protoc_insertion_point(field_add:plane.BatchRemovePlaneBcMsg.plane_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BatchRemovePlaneBcMsg::plane_ids() const {
  // @@protoc_insertion_point(field_list:plane.BatchRemovePlaneBcMsg.plane_ids)
  return plane_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BatchRemovePlaneBcMsg::mutable_plane_ids() {
  // @@protoc_insertion_point(field_mutable_list:plane.BatchRemovePlaneBcMsg.plane_ids)
  return &plane_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankDataMsg::kMyRankFieldNumber;
const int RankDataMsg::kMyScoreFieldNumber;
const int RankDataMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankDataMsg::RankDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.RankDataMsg)
}
RankDataMsg::RankDataMsg(const RankDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&my_rank_, &from.my_rank_,
    reinterpret_cast<char*>(&my_score_) -
    reinterpret_cast<char*>(&my_rank_) + sizeof(my_score_));
  // @@protoc_insertion_point(copy_constructor:plane.RankDataMsg)
}

void RankDataMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&my_rank_, 0, reinterpret_cast<char*>(&my_score_) -
    reinterpret_cast<char*>(&my_rank_) + sizeof(my_score_));
}

RankDataMsg::~RankDataMsg() {
  // @@protoc_insertion_point(destructor:plane.RankDataMsg)
  SharedDtor();
}

void RankDataMsg::SharedDtor() {
}

void RankDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankDataMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[11].descriptor;
}

const RankDataMsg& RankDataMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankDataMsg* RankDataMsg::New(::google::protobuf::Arena* arena) const {
  RankDataMsg* n = new RankDataMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.RankDataMsg)
  data_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&my_rank_, 0, reinterpret_cast<char*>(&my_score_) -
      reinterpret_cast<char*>(&my_rank_) + sizeof(my_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.RankDataMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 my_rank = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_my_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 my_score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_my_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .plane.RankData data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.RankDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.RankDataMsg)
  return false;
#undef DO_
}

void RankDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.RankDataMsg)
  // optional uint32 my_rank = 1;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->my_rank(), output);
  }

  // optional uint32 my_score = 2;
  if (has_my_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->my_score(), output);
  }

  // repeated .plane.RankData data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.RankDataMsg)
}

::google::protobuf::uint8* RankDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.RankDataMsg)
  // optional uint32 my_rank = 1;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->my_rank(), target);
  }

  // optional uint32 my_score = 2;
  if (has_my_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->my_score(), target);
  }

  // repeated .plane.RankData data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.RankDataMsg)
  return target;
}

size_t RankDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.RankDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.RankData data = 3;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 my_rank = 1;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_rank());
    }

    // optional uint32 my_score = 2;
    if (has_my_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.RankDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const RankDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.RankDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.RankDataMsg)
    MergeFrom(*source);
  }
}

void RankDataMsg::MergeFrom(const RankDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.RankDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_my_score()) {
      set_my_score(from.my_score());
    }
  }
}

void RankDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.RankDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankDataMsg::CopyFrom(const RankDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.RankDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankDataMsg::IsInitialized() const {
  return true;
}

void RankDataMsg::Swap(RankDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankDataMsg::InternalSwap(RankDataMsg* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(my_rank_, other->my_rank_);
  std::swap(my_score_, other->my_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankDataMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankDataMsg

// optional uint32 my_rank = 1;
bool RankDataMsg::has_my_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankDataMsg::set_has_my_rank() {
  _has_bits_[0] |= 0x00000001u;
}
void RankDataMsg::clear_has_my_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankDataMsg::clear_my_rank() {
  my_rank_ = 0u;
  clear_has_my_rank();
}
::google::protobuf::uint32 RankDataMsg::my_rank() const {
  // @@protoc_insertion_point(field_get:plane.RankDataMsg.my_rank)
  return my_rank_;
}
void RankDataMsg::set_my_rank(::google::protobuf::uint32 value) {
  set_has_my_rank();
  my_rank_ = value;
  // @@protoc_insertion_point(field_set:plane.RankDataMsg.my_rank)
}

// optional uint32 my_score = 2;
bool RankDataMsg::has_my_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RankDataMsg::set_has_my_score() {
  _has_bits_[0] |= 0x00000002u;
}
void RankDataMsg::clear_has_my_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void RankDataMsg::clear_my_score() {
  my_score_ = 0u;
  clear_has_my_score();
}
::google::protobuf::uint32 RankDataMsg::my_score() const {
  // @@protoc_insertion_point(field_get:plane.RankDataMsg.my_score)
  return my_score_;
}
void RankDataMsg::set_my_score(::google::protobuf::uint32 value) {
  set_has_my_score();
  my_score_ = value;
  // @@protoc_insertion_point(field_set:plane.RankDataMsg.my_score)
}

// repeated .plane.RankData data = 3;
int RankDataMsg::data_size() const {
  return data_.size();
}
void RankDataMsg::clear_data() {
  data_.Clear();
}
const ::plane::RankData& RankDataMsg::data(int index) const {
  // @@protoc_insertion_point(field_get:plane.RankDataMsg.data)
  return data_.Get(index);
}
::plane::RankData* RankDataMsg::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:plane.RankDataMsg.data)
  return data_.Mutable(index);
}
::plane::RankData* RankDataMsg::add_data() {
  // @@protoc_insertion_point(field_add:plane.RankDataMsg.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::RankData >*
RankDataMsg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:plane.RankDataMsg.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::RankData >&
RankDataMsg::data() const {
  // @@protoc_insertion_point(field_list:plane.RankDataMsg.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankData::kPlayeridFieldNumber;
const int RankData::kPlayernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankData::RankData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.RankData)
}
RankData::RankData(const RankData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:plane.RankData)
}

void RankData::SharedCtor() {
  _cached_size_ = 0;
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
}

RankData::~RankData() {
  // @@protoc_insertion_point(destructor:plane.RankData)
  SharedDtor();
}

void RankData::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankData::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[12].descriptor;
}

const RankData& RankData::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankData* RankData::New(::google::protobuf::Arena* arena) const {
  RankData* n = new RankData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankData::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.RankData)
  if (has_playername()) {
    GOOGLE_DCHECK(!playername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*playername_.UnsafeRawStringPointer())->clear();
  }
  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.RankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playername = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.RankData.playername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.RankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.RankData)
  return false;
#undef DO_
}

void RankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.RankData)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.RankData.playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.RankData)
}

::google::protobuf::uint8* RankData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.RankData)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.RankData.playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.RankData)
  return target;
}

size_t RankData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.RankData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.RankData)
  GOOGLE_DCHECK_NE(&from, this);
  const RankData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.RankData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.RankData)
    MergeFrom(*source);
  }
}

void RankData::MergeFrom(const RankData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.RankData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_playername()) {
      set_has_playername();
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
}

void RankData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.RankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankData::CopyFrom(const RankData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.RankData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankData::IsInitialized() const {
  return true;
}

void RankData::Swap(RankData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankData::InternalSwap(RankData* other) {
  playername_.Swap(&other->playername_);
  std::swap(playerid_, other->playerid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankData::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankData

// optional uint32 playerid = 1;
bool RankData::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RankData::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void RankData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RankData::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 RankData::playerid() const {
  // @@protoc_insertion_point(field_get:plane.RankData.playerid)
  return playerid_;
}
void RankData::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.RankData.playerid)
}

// optional string playername = 2;
bool RankData::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankData::set_has_playername() {
  _has_bits_[0] |= 0x00000001u;
}
void RankData::clear_has_playername() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankData::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playername();
}
const ::std::string& RankData::playername() const {
  // @@protoc_insertion_point(field_get:plane.RankData.playername)
  return playername_.GetNoArena();
}
void RankData::set_playername(const ::std::string& value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.RankData.playername)
}
#if LANG_CXX11
void RankData::set_playername(::std::string&& value) {
  set_has_playername();
  playername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.RankData.playername)
}
#endif
void RankData::set_playername(const char* value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.RankData.playername)
}
void RankData::set_playername(const char* value, size_t size) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.RankData.playername)
}
::std::string* RankData::mutable_playername() {
  set_has_playername();
  // @@protoc_insertion_point(field_mutable:plane.RankData.playername)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RankData::release_playername() {
  // @@protoc_insertion_point(field_release:plane.RankData.playername)
  clear_has_playername();
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RankData::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    set_has_playername();
  } else {
    clear_has_playername();
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:plane.RankData.playername)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreMsg::kMyScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreMsg::ScoreMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.ScoreMsg)
}
ScoreMsg::ScoreMsg(const ScoreMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  my_score_ = from.my_score_;
  // @@protoc_insertion_point(copy_constructor:plane.ScoreMsg)
}

void ScoreMsg::SharedCtor() {
  _cached_size_ = 0;
  my_score_ = 0u;
}

ScoreMsg::~ScoreMsg() {
  // @@protoc_insertion_point(destructor:plane.ScoreMsg)
  SharedDtor();
}

void ScoreMsg::SharedDtor() {
}

void ScoreMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[13].descriptor;
}

const ScoreMsg& ScoreMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScoreMsg* ScoreMsg::New(::google::protobuf::Arena* arena) const {
  ScoreMsg* n = new ScoreMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.ScoreMsg)
  my_score_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScoreMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.ScoreMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 my_score = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_my_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.ScoreMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.ScoreMsg)
  return false;
#undef DO_
}

void ScoreMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.ScoreMsg)
  // optional uint32 my_score = 1;
  if (has_my_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->my_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.ScoreMsg)
}

::google::protobuf::uint8* ScoreMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.ScoreMsg)
  // optional uint32 my_score = 1;
  if (has_my_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->my_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.ScoreMsg)
  return target;
}

size_t ScoreMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.ScoreMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 my_score = 1;
  if (has_my_score()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->my_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.ScoreMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoreMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.ScoreMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.ScoreMsg)
    MergeFrom(*source);
  }
}

void ScoreMsg::MergeFrom(const ScoreMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.ScoreMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_my_score()) {
    set_my_score(from.my_score());
  }
}

void ScoreMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.ScoreMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreMsg::CopyFrom(const ScoreMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.ScoreMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreMsg::IsInitialized() const {
  return true;
}

void ScoreMsg::Swap(ScoreMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreMsg::InternalSwap(ScoreMsg* other) {
  std::swap(my_score_, other->my_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreMsg

// optional uint32 my_score = 1;
bool ScoreMsg::has_my_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScoreMsg::set_has_my_score() {
  _has_bits_[0] |= 0x00000001u;
}
void ScoreMsg::clear_has_my_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScoreMsg::clear_my_score() {
  my_score_ = 0u;
  clear_has_my_score();
}
::google::protobuf::uint32 ScoreMsg::my_score() const {
  // @@protoc_insertion_point(field_get:plane.ScoreMsg.my_score)
  return my_score_;
}
void ScoreMsg::set_my_score(::google::protobuf::uint32 value) {
  set_has_my_score();
  my_score_ = value;
  // @@protoc_insertion_point(field_set:plane.ScoreMsg.my_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeathMsg::kKilledbynameFieldNumber;
const int DeathMsg::kReliveSecondsFieldNumber;
const int DeathMsg::kIsOutOfBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeathMsg::DeathMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.DeathMsg)
}
DeathMsg::DeathMsg(const DeathMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  killedbyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_killedbyname()) {
    killedbyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.killedbyname_);
  }
  ::memcpy(&relive_seconds_, &from.relive_seconds_,
    reinterpret_cast<char*>(&is_out_of_bound_) -
    reinterpret_cast<char*>(&relive_seconds_) + sizeof(is_out_of_bound_));
  // @@protoc_insertion_point(copy_constructor:plane.DeathMsg)
}

void DeathMsg::SharedCtor() {
  _cached_size_ = 0;
  killedbyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&relive_seconds_, 0, reinterpret_cast<char*>(&is_out_of_bound_) -
    reinterpret_cast<char*>(&relive_seconds_) + sizeof(is_out_of_bound_));
}

DeathMsg::~DeathMsg() {
  // @@protoc_insertion_point(destructor:plane.DeathMsg)
  SharedDtor();
}

void DeathMsg::SharedDtor() {
  killedbyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeathMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeathMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[14].descriptor;
}

const DeathMsg& DeathMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeathMsg* DeathMsg::New(::google::protobuf::Arena* arena) const {
  DeathMsg* n = new DeathMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeathMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.DeathMsg)
  if (has_killedbyname()) {
    GOOGLE_DCHECK(!killedbyname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*killedbyname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&relive_seconds_, 0, reinterpret_cast<char*>(&is_out_of_bound_) -
      reinterpret_cast<char*>(&relive_seconds_) + sizeof(is_out_of_bound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeathMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.DeathMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string killedbyname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killedbyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->killedbyname().data(), this->killedbyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.DeathMsg.killedbyname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 relive_seconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_relive_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relive_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_out_of_bound = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_is_out_of_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_out_of_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.DeathMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.DeathMsg)
  return false;
#undef DO_
}

void DeathMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.DeathMsg)
  // optional string killedbyname = 1;
  if (has_killedbyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killedbyname().data(), this->killedbyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.DeathMsg.killedbyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->killedbyname(), output);
  }

  // optional uint32 relive_seconds = 2;
  if (has_relive_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relive_seconds(), output);
  }

  // optional uint32 is_out_of_bound = 3;
  if (has_is_out_of_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_out_of_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.DeathMsg)
}

::google::protobuf::uint8* DeathMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.DeathMsg)
  // optional string killedbyname = 1;
  if (has_killedbyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killedbyname().data(), this->killedbyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.DeathMsg.killedbyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->killedbyname(), target);
  }

  // optional uint32 relive_seconds = 2;
  if (has_relive_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relive_seconds(), target);
  }

  // optional uint32 is_out_of_bound = 3;
  if (has_is_out_of_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_out_of_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.DeathMsg)
  return target;
}

size_t DeathMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.DeathMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string killedbyname = 1;
    if (has_killedbyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killedbyname());
    }

    // optional uint32 relive_seconds = 2;
    if (has_relive_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relive_seconds());
    }

    // optional uint32 is_out_of_bound = 3;
    if (has_is_out_of_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_out_of_bound());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeathMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.DeathMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DeathMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeathMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.DeathMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.DeathMsg)
    MergeFrom(*source);
  }
}

void DeathMsg::MergeFrom(const DeathMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.DeathMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_killedbyname()) {
      set_has_killedbyname();
      killedbyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.killedbyname_);
    }
    if (from.has_relive_seconds()) {
      set_relive_seconds(from.relive_seconds());
    }
    if (from.has_is_out_of_bound()) {
      set_is_out_of_bound(from.is_out_of_bound());
    }
  }
}

void DeathMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.DeathMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeathMsg::CopyFrom(const DeathMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.DeathMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathMsg::IsInitialized() const {
  return true;
}

void DeathMsg::Swap(DeathMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeathMsg::InternalSwap(DeathMsg* other) {
  killedbyname_.Swap(&other->killedbyname_);
  std::swap(relive_seconds_, other->relive_seconds_);
  std::swap(is_out_of_bound_, other->is_out_of_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeathMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeathMsg

// optional string killedbyname = 1;
bool DeathMsg::has_killedbyname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeathMsg::set_has_killedbyname() {
  _has_bits_[0] |= 0x00000001u;
}
void DeathMsg::clear_has_killedbyname() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeathMsg::clear_killedbyname() {
  killedbyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_killedbyname();
}
const ::std::string& DeathMsg::killedbyname() const {
  // @@protoc_insertion_point(field_get:plane.DeathMsg.killedbyname)
  return killedbyname_.GetNoArena();
}
void DeathMsg::set_killedbyname(const ::std::string& value) {
  set_has_killedbyname();
  killedbyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.DeathMsg.killedbyname)
}
#if LANG_CXX11
void DeathMsg::set_killedbyname(::std::string&& value) {
  set_has_killedbyname();
  killedbyname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.DeathMsg.killedbyname)
}
#endif
void DeathMsg::set_killedbyname(const char* value) {
  set_has_killedbyname();
  killedbyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.DeathMsg.killedbyname)
}
void DeathMsg::set_killedbyname(const char* value, size_t size) {
  set_has_killedbyname();
  killedbyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.DeathMsg.killedbyname)
}
::std::string* DeathMsg::mutable_killedbyname() {
  set_has_killedbyname();
  // @@protoc_insertion_point(field_mutable:plane.DeathMsg.killedbyname)
  return killedbyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeathMsg::release_killedbyname() {
  // @@protoc_insertion_point(field_release:plane.DeathMsg.killedbyname)
  clear_has_killedbyname();
  return killedbyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeathMsg::set_allocated_killedbyname(::std::string* killedbyname) {
  if (killedbyname != NULL) {
    set_has_killedbyname();
  } else {
    clear_has_killedbyname();
  }
  killedbyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), killedbyname);
  // @@protoc_insertion_point(field_set_allocated:plane.DeathMsg.killedbyname)
}

// optional uint32 relive_seconds = 2;
bool DeathMsg::has_relive_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeathMsg::set_has_relive_seconds() {
  _has_bits_[0] |= 0x00000002u;
}
void DeathMsg::clear_has_relive_seconds() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeathMsg::clear_relive_seconds() {
  relive_seconds_ = 0u;
  clear_has_relive_seconds();
}
::google::protobuf::uint32 DeathMsg::relive_seconds() const {
  // @@protoc_insertion_point(field_get:plane.DeathMsg.relive_seconds)
  return relive_seconds_;
}
void DeathMsg::set_relive_seconds(::google::protobuf::uint32 value) {
  set_has_relive_seconds();
  relive_seconds_ = value;
  // @@protoc_insertion_point(field_set:plane.DeathMsg.relive_seconds)
}

// optional uint32 is_out_of_bound = 3;
bool DeathMsg::has_is_out_of_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeathMsg::set_has_is_out_of_bound() {
  _has_bits_[0] |= 0x00000004u;
}
void DeathMsg::clear_has_is_out_of_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeathMsg::clear_is_out_of_bound() {
  is_out_of_bound_ = 0u;
  clear_has_is_out_of_bound();
}
::google::protobuf::uint32 DeathMsg::is_out_of_bound() const {
  // @@protoc_insertion_point(field_get:plane.DeathMsg.is_out_of_bound)
  return is_out_of_bound_;
}
void DeathMsg::set_is_out_of_bound(::google::protobuf::uint32 value) {
  set_has_is_out_of_bound();
  is_out_of_bound_ = value;
  // @@protoc_insertion_point(field_set:plane.DeathMsg.is_out_of_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateMsg::kPlayeridFieldNumber;
const int StateMsg::kStateNumFieldNumber;
const int StateMsg::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateMsg::StateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.StateMsg)
}
StateMsg::StateMsg(const StateMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:plane.StateMsg)
}

void StateMsg::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  state_num_ = 1;
  op_ = 1;
}

StateMsg::~StateMsg() {
  // @@protoc_insertion_point(destructor:plane.StateMsg)
  SharedDtor();
}

void StateMsg::SharedDtor() {
}

void StateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[15].descriptor;
}

const StateMsg& StateMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

StateMsg* StateMsg::New(::google::protobuf::Arena* arena) const {
  StateMsg* n = new StateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.StateMsg)
  if (_has_bits_[0 / 32] & 7u) {
    playerid_ = 0u;
    state_num_ = 1;
    op_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.StateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.StateMsg.State state_num = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plane::StateMsg_State_IsValid(value)) {
            set_state_num(static_cast< ::plane::StateMsg_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.StateMsg.StateOp op = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plane::StateMsg_StateOp_IsValid(value)) {
            set_op(static_cast< ::plane::StateMsg_StateOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.StateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.StateMsg)
  return false;
#undef DO_
}

void StateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.StateMsg)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional .plane.StateMsg.State state_num = 2;
  if (has_state_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state_num(), output);
  }

  // optional .plane.StateMsg.StateOp op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.StateMsg)
}

::google::protobuf::uint8* StateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.StateMsg)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional .plane.StateMsg.State state_num = 2;
  if (has_state_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state_num(), target);
  }

  // optional .plane.StateMsg.StateOp op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.StateMsg)
  return target;
}

size_t StateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.StateMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional .plane.StateMsg.State state_num = 2;
    if (has_state_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state_num());
    }

    // optional .plane.StateMsg.StateOp op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.StateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StateMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.StateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.StateMsg)
    MergeFrom(*source);
  }
}

void StateMsg::MergeFrom(const StateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.StateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_state_num()) {
      set_state_num(from.state_num());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
}

void StateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.StateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMsg::CopyFrom(const StateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.StateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMsg::IsInitialized() const {
  return true;
}

void StateMsg::Swap(StateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateMsg::InternalSwap(StateMsg* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(state_num_, other->state_num_);
  std::swap(op_, other->op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateMsg

// optional uint32 playerid = 1;
bool StateMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StateMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void StateMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void StateMsg::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 StateMsg::playerid() const {
  // @@protoc_insertion_point(field_get:plane.StateMsg.playerid)
  return playerid_;
}
void StateMsg::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.StateMsg.playerid)
}

// optional .plane.StateMsg.State state_num = 2;
bool StateMsg::has_state_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StateMsg::set_has_state_num() {
  _has_bits_[0] |= 0x00000002u;
}
void StateMsg::clear_has_state_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void StateMsg::clear_state_num() {
  state_num_ = 1;
  clear_has_state_num();
}
::plane::StateMsg_State StateMsg::state_num() const {
  // @@protoc_insertion_point(field_get:plane.StateMsg.state_num)
  return static_cast< ::plane::StateMsg_State >(state_num_);
}
void StateMsg::set_state_num(::plane::StateMsg_State value) {
  assert(::plane::StateMsg_State_IsValid(value));
  set_has_state_num();
  state_num_ = value;
  // @@protoc_insertion_point(field_set:plane.StateMsg.state_num)
}

// optional .plane.StateMsg.StateOp op = 3;
bool StateMsg::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StateMsg::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
void StateMsg::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
void StateMsg::clear_op() {
  op_ = 1;
  clear_has_op();
}
::plane::StateMsg_StateOp StateMsg::op() const {
  // @@protoc_insertion_point(field_get:plane.StateMsg.op)
  return static_cast< ::plane::StateMsg_StateOp >(op_);
}
void StateMsg::set_op(::plane::StateMsg_StateOp value) {
  assert(::plane::StateMsg_StateOp_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:plane.StateMsg.op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSpeedBcMsg::kPlayeridFieldNumber;
const int UpdateSpeedBcMsg::kSpeedFieldNumber;
const int UpdateSpeedBcMsg::kIsStartSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSpeedBcMsg::UpdateSpeedBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.UpdateSpeedBcMsg)
}
UpdateSpeedBcMsg::UpdateSpeedBcMsg(const UpdateSpeedBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    reinterpret_cast<char*>(&is_start_split_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(is_start_split_));
  // @@protoc_insertion_point(copy_constructor:plane.UpdateSpeedBcMsg)
}

void UpdateSpeedBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&is_start_split_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(is_start_split_));
}

UpdateSpeedBcMsg::~UpdateSpeedBcMsg() {
  // @@protoc_insertion_point(destructor:plane.UpdateSpeedBcMsg)
  SharedDtor();
}

void UpdateSpeedBcMsg::SharedDtor() {
}

void UpdateSpeedBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSpeedBcMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[16].descriptor;
}

const UpdateSpeedBcMsg& UpdateSpeedBcMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateSpeedBcMsg* UpdateSpeedBcMsg::New(::google::protobuf::Arena* arena) const {
  UpdateSpeedBcMsg* n = new UpdateSpeedBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateSpeedBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.UpdateSpeedBcMsg)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&playerid_, 0, reinterpret_cast<char*>(&is_start_split_) -
      reinterpret_cast<char*>(&playerid_) + sizeof(is_start_split_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateSpeedBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.UpdateSpeedBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_start_split = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_is_start_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_start_split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.UpdateSpeedBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.UpdateSpeedBcMsg)
  return false;
#undef DO_
}

void UpdateSpeedBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.UpdateSpeedBcMsg)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->speed(), output);
  }

  // optional uint32 is_start_split = 3;
  if (has_is_start_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_start_split(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.UpdateSpeedBcMsg)
}

::google::protobuf::uint8* UpdateSpeedBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.UpdateSpeedBcMsg)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed(), target);
  }

  // optional uint32 is_start_split = 3;
  if (has_is_start_split()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_start_split(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.UpdateSpeedBcMsg)
  return target;
}

size_t UpdateSpeedBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.UpdateSpeedBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 is_start_split = 3;
    if (has_is_start_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_start_split());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSpeedBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.UpdateSpeedBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSpeedBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSpeedBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.UpdateSpeedBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.UpdateSpeedBcMsg)
    MergeFrom(*source);
  }
}

void UpdateSpeedBcMsg::MergeFrom(const UpdateSpeedBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.UpdateSpeedBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_is_start_split()) {
      set_is_start_split(from.is_start_split());
    }
  }
}

void UpdateSpeedBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.UpdateSpeedBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSpeedBcMsg::CopyFrom(const UpdateSpeedBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.UpdateSpeedBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSpeedBcMsg::IsInitialized() const {
  return true;
}

void UpdateSpeedBcMsg::Swap(UpdateSpeedBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSpeedBcMsg::InternalSwap(UpdateSpeedBcMsg* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(speed_, other->speed_);
  std::swap(is_start_split_, other->is_start_split_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSpeedBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateSpeedBcMsg

// optional uint32 playerid = 1;
bool UpdateSpeedBcMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateSpeedBcMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateSpeedBcMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateSpeedBcMsg::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 UpdateSpeedBcMsg::playerid() const {
  // @@protoc_insertion_point(field_get:plane.UpdateSpeedBcMsg.playerid)
  return playerid_;
}
void UpdateSpeedBcMsg::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.UpdateSpeedBcMsg.playerid)
}

// optional uint32 speed = 2;
bool UpdateSpeedBcMsg::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateSpeedBcMsg::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateSpeedBcMsg::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateSpeedBcMsg::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 UpdateSpeedBcMsg::speed() const {
  // @@protoc_insertion_point(field_get:plane.UpdateSpeedBcMsg.speed)
  return speed_;
}
void UpdateSpeedBcMsg::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:plane.UpdateSpeedBcMsg.speed)
}

// optional uint32 is_start_split = 3;
bool UpdateSpeedBcMsg::has_is_start_split() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpdateSpeedBcMsg::set_has_is_start_split() {
  _has_bits_[0] |= 0x00000004u;
}
void UpdateSpeedBcMsg::clear_has_is_start_split() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpdateSpeedBcMsg::clear_is_start_split() {
  is_start_split_ = 0u;
  clear_has_is_start_split();
}
::google::protobuf::uint32 UpdateSpeedBcMsg::is_start_split() const {
  // @@protoc_insertion_point(field_get:plane.UpdateSpeedBcMsg.is_start_split)
  return is_start_split_;
}
void UpdateSpeedBcMsg::set_is_start_split(::google::protobuf::uint32 value) {
  set_has_is_start_split();
  is_start_split_ = value;
  // @@protoc_insertion_point(field_set:plane.UpdateSpeedBcMsg.is_start_split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShotCDMsg::kShotcdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShotCDMsg::ShotCDMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.ShotCDMsg)
}
ShotCDMsg::ShotCDMsg(const ShotCDMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shotcd_ = from.shotcd_;
  // @@protoc_insertion_point(copy_constructor:plane.ShotCDMsg)
}

void ShotCDMsg::SharedCtor() {
  _cached_size_ = 0;
  shotcd_ = 0u;
}

ShotCDMsg::~ShotCDMsg() {
  // @@protoc_insertion_point(destructor:plane.ShotCDMsg)
  SharedDtor();
}

void ShotCDMsg::SharedDtor() {
}

void ShotCDMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShotCDMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[17].descriptor;
}

const ShotCDMsg& ShotCDMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShotCDMsg* ShotCDMsg::New(::google::protobuf::Arena* arena) const {
  ShotCDMsg* n = new ShotCDMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShotCDMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.ShotCDMsg)
  shotcd_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShotCDMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.ShotCDMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shotcd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_shotcd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shotcd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.ShotCDMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.ShotCDMsg)
  return false;
#undef DO_
}

void ShotCDMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.ShotCDMsg)
  // optional uint32 shotcd = 1;
  if (has_shotcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shotcd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.ShotCDMsg)
}

::google::protobuf::uint8* ShotCDMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.ShotCDMsg)
  // optional uint32 shotcd = 1;
  if (has_shotcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shotcd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.ShotCDMsg)
  return target;
}

size_t ShotCDMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.ShotCDMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 shotcd = 1;
  if (has_shotcd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shotcd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShotCDMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.ShotCDMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ShotCDMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShotCDMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.ShotCDMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.ShotCDMsg)
    MergeFrom(*source);
  }
}

void ShotCDMsg::MergeFrom(const ShotCDMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.ShotCDMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shotcd()) {
    set_shotcd(from.shotcd());
  }
}

void ShotCDMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.ShotCDMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShotCDMsg::CopyFrom(const ShotCDMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.ShotCDMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotCDMsg::IsInitialized() const {
  return true;
}

void ShotCDMsg::Swap(ShotCDMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShotCDMsg::InternalSwap(ShotCDMsg* other) {
  std::swap(shotcd_, other->shotcd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShotCDMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShotCDMsg

// optional uint32 shotcd = 1;
bool ShotCDMsg::has_shotcd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShotCDMsg::set_has_shotcd() {
  _has_bits_[0] |= 0x00000001u;
}
void ShotCDMsg::clear_has_shotcd() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShotCDMsg::clear_shotcd() {
  shotcd_ = 0u;
  clear_has_shotcd();
}
::google::protobuf::uint32 ShotCDMsg::shotcd() const {
  // @@protoc_insertion_point(field_get:plane.ShotCDMsg.shotcd)
  return shotcd_;
}
void ShotCDMsg::set_shotcd(::google::protobuf::uint32 value) {
  set_has_shotcd();
  shotcd_ = value;
  // @@protoc_insertion_point(field_set:plane.ShotCDMsg.shotcd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LevelMsg::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LevelMsg::LevelMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.LevelMsg)
}
LevelMsg::LevelMsg(const LevelMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:plane.LevelMsg)
}

void LevelMsg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
}

LevelMsg::~LevelMsg() {
  // @@protoc_insertion_point(destructor:plane.LevelMsg)
  SharedDtor();
}

void LevelMsg::SharedDtor() {
}

void LevelMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelMsg::descriptor() {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[18].descriptor;
}

const LevelMsg& LevelMsg::default_instance() {
  protobuf_plane_2fplane_5fpush_2eproto::InitDefaults();
  return *internal_default_instance();
}

LevelMsg* LevelMsg::New(::google::protobuf::Arena* arena) const {
  LevelMsg* n = new LevelMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LevelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.LevelMsg)
  level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LevelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.LevelMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.LevelMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.LevelMsg)
  return false;
#undef DO_
}

void LevelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.LevelMsg)
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.LevelMsg)
}

::google::protobuf::uint8* LevelMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.LevelMsg)
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.LevelMsg)
  return target;
}

size_t LevelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.LevelMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 level = 1;
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.LevelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LevelMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.LevelMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.LevelMsg)
    MergeFrom(*source);
  }
}

void LevelMsg::MergeFrom(const LevelMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.LevelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_level()) {
    set_level(from.level());
  }
}

void LevelMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.LevelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelMsg::CopyFrom(const LevelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.LevelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelMsg::IsInitialized() const {
  return true;
}

void LevelMsg::Swap(LevelMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LevelMsg::InternalSwap(LevelMsg* other) {
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LevelMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fpush_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fpush_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LevelMsg

// optional uint32 level = 1;
bool LevelMsg::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LevelMsg::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void LevelMsg::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void LevelMsg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 LevelMsg::level() const {
  // @@protoc_insertion_point(field_get:plane.LevelMsg.level)
  return level_;
}
void LevelMsg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:plane.LevelMsg.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace plane

// @@protoc_insertion_point(global_scope)
