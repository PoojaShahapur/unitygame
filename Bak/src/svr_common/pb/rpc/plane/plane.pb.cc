// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plane/plane.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plane/plane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plane {
class GMCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GMCmd> {
} _GMCmd_default_instance_;
class EnterRoomMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnterRoomMsg> {
} _EnterRoomMsg_default_instance_;
class JoinRoomMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomMsg> {
} _JoinRoomMsg_default_instance_;

namespace protobuf_plane_2fplane_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCmd, cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomMsg, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomMsg, mode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomMsg, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomMsg, nickname_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(GMCmd)},
  { 6, 12, sizeof(EnterRoomMsg)},
  { 14, 20, sizeof(JoinRoomMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GMCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnterRoomMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinRoomMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "plane/plane.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _GMCmd_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EnterRoomMsg_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _JoinRoomMsg_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::rpc::protobuf_empty_5fmsg_2eproto::InitDefaults();
  ::plane::protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  _GMCmd_default_instance_.DefaultConstruct();
  _EnterRoomMsg_default_instance_.DefaultConstruct();
  _JoinRoomMsg_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021plane/plane.proto\022\005plane\032\017empty_msg.pr"
      "oto\032\025plane/plane_msg.proto\"\024\n\005GMCmd\022\013\n\003c"
      "md\030\001 \001(\t\".\n\014EnterRoomMsg\022\020\n\010nickname\030\001 \001"
      "(\t\022\014\n\004mode\030\002 \001(\r\",\n\013JoinRoomMsg\022\013\n\003uid\030\001"
      " \001(\r\022\020\n\010nickname\030\002 \001(\t2\363\003\n\005Plane\022/\n\tEnte"
      "rRoom\022\023.plane.EnterRoomMsg\032\r.rpc.EmptyMs"
      "g\022-\n\010JoinRoom\022\022.plane.JoinRoomMsg\032\r.rpc."
      "EmptyMsg\022)\n\006TurnTo\022\020.plane.TurnToMsg\032\r.r"
      "pc.EmptyMsg\022$\n\004Fire\022\r.rpc.EmptyMsg\032\r.rpc"
      ".EmptyMsg\022*\n\010StopMove\022\017.plane.MoveInfo\032\r"
      ".rpc.EmptyMsg\022+\n\013ReqRankData\022\r.rpc.Empty"
      "Msg\032\r.rpc.EmptyMsg\0222\n\rSmallPlaneDie\022\022.pl"
      "ane.PlaneDieMsg\032\r.rpc.EmptyMsg\022%\n\005Split\022"
      "\r.rpc.EmptyMsg\032\r.rpc.EmptyMsg\022\'\n\010RunGMCm"
      "d\022\014.plane.GMCmd\032\r.rpc.EmptyMsg\022(\n\010BackHa"
      "ll\022\r.rpc.EmptyMsg\032\r.rpc.EmptyMsg\0222\n\022Reco"
      "nnectEnterRoom\022\r.rpc.EmptyMsg\032\r.rpc.Empt"
      "yMsg"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plane/plane.proto", &protobuf_RegisterTypes);
  ::rpc::protobuf_empty_5fmsg_2eproto::AddDescriptors();
  ::plane::protobuf_plane_2fplane_5fmsg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_plane_2fplane_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMCmd::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMCmd::GMCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.GMCmd)
}
GMCmd::GMCmd(const GMCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmd()) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:plane.GMCmd)
}

void GMCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GMCmd::~GMCmd() {
  // @@protoc_insertion_point(destructor:plane.GMCmd)
  SharedDtor();
}

void GMCmd::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GMCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCmd::descriptor() {
  protobuf_plane_2fplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_2eproto::file_level_metadata[0].descriptor;
}

const GMCmd& GMCmd::default_instance() {
  protobuf_plane_2fplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

GMCmd* GMCmd::New(::google::protobuf::Arena* arena) const {
  GMCmd* n = new GMCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GMCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.GMCmd)
  if (has_cmd()) {
    GOOGLE_DCHECK(!cmd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cmd_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GMCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.GMCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.GMCmd.cmd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.GMCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.GMCmd)
  return false;
#undef DO_
}

void GMCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.GMCmd)
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.GMCmd.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.GMCmd)
}

::google::protobuf::uint8* GMCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.GMCmd)
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.GMCmd.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.GMCmd)
  return target;
}

size_t GMCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.GMCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.GMCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const GMCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.GMCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.GMCmd)
    MergeFrom(*source);
  }
}

void GMCmd::MergeFrom(const GMCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.GMCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    set_has_cmd();
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void GMCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.GMCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCmd::CopyFrom(const GMCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.GMCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCmd::IsInitialized() const {
  return true;
}

void GMCmd::Swap(GMCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMCmd::InternalSwap(GMCmd* other) {
  cmd_.Swap(&other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMCmd::GetMetadata() const {
  protobuf_plane_2fplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GMCmd

// optional string cmd = 1;
bool GMCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GMCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void GMCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void GMCmd::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
const ::std::string& GMCmd::cmd() const {
  // @@protoc_insertion_point(field_get:plane.GMCmd.cmd)
  return cmd_.GetNoArena();
}
void GMCmd::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.GMCmd.cmd)
}
#if LANG_CXX11
void GMCmd::set_cmd(::std::string&& value) {
  set_has_cmd();
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.GMCmd.cmd)
}
#endif
void GMCmd::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.GMCmd.cmd)
}
void GMCmd::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.GMCmd.cmd)
}
::std::string* GMCmd::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:plane.GMCmd.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GMCmd::release_cmd() {
  // @@protoc_insertion_point(field_release:plane.GMCmd.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GMCmd::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:plane.GMCmd.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnterRoomMsg::kNicknameFieldNumber;
const int EnterRoomMsg::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnterRoomMsg::EnterRoomMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.EnterRoomMsg)
}
EnterRoomMsg::EnterRoomMsg(const EnterRoomMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:plane.EnterRoomMsg)
}

void EnterRoomMsg::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0u;
}

EnterRoomMsg::~EnterRoomMsg() {
  // @@protoc_insertion_point(destructor:plane.EnterRoomMsg)
  SharedDtor();
}

void EnterRoomMsg::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnterRoomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomMsg::descriptor() {
  protobuf_plane_2fplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_2eproto::file_level_metadata[1].descriptor;
}

const EnterRoomMsg& EnterRoomMsg::default_instance() {
  protobuf_plane_2fplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnterRoomMsg* EnterRoomMsg::New(::google::protobuf::Arena* arena) const {
  EnterRoomMsg* n = new EnterRoomMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.EnterRoomMsg)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnterRoomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.EnterRoomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.EnterRoomMsg.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.EnterRoomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.EnterRoomMsg)
  return false;
#undef DO_
}

void EnterRoomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.EnterRoomMsg)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.EnterRoomMsg.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.EnterRoomMsg)
}

::google::protobuf::uint8* EnterRoomMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.EnterRoomMsg)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.EnterRoomMsg.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.EnterRoomMsg)
  return target;
}

size_t EnterRoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.EnterRoomMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.EnterRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterRoomMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.EnterRoomMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.EnterRoomMsg)
    MergeFrom(*source);
  }
}

void EnterRoomMsg::MergeFrom(const EnterRoomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.EnterRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
}

void EnterRoomMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.EnterRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomMsg::CopyFrom(const EnterRoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.EnterRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomMsg::IsInitialized() const {
  return true;
}

void EnterRoomMsg::Swap(EnterRoomMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomMsg::InternalSwap(EnterRoomMsg* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(mode_, other->mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnterRoomMsg::GetMetadata() const {
  protobuf_plane_2fplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomMsg

// optional string nickname = 1;
bool EnterRoomMsg::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomMsg::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomMsg::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomMsg::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& EnterRoomMsg::nickname() const {
  // @@protoc_insertion_point(field_get:plane.EnterRoomMsg.nickname)
  return nickname_.GetNoArena();
}
void EnterRoomMsg::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.EnterRoomMsg.nickname)
}
#if LANG_CXX11
void EnterRoomMsg::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.EnterRoomMsg.nickname)
}
#endif
void EnterRoomMsg::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.EnterRoomMsg.nickname)
}
void EnterRoomMsg::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.EnterRoomMsg.nickname)
}
::std::string* EnterRoomMsg::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:plane.EnterRoomMsg.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnterRoomMsg::release_nickname() {
  // @@protoc_insertion_point(field_release:plane.EnterRoomMsg.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnterRoomMsg::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:plane.EnterRoomMsg.nickname)
}

// optional uint32 mode = 2;
bool EnterRoomMsg::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomMsg::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomMsg::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomMsg::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
::google::protobuf::uint32 EnterRoomMsg::mode() const {
  // @@protoc_insertion_point(field_get:plane.EnterRoomMsg.mode)
  return mode_;
}
void EnterRoomMsg::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:plane.EnterRoomMsg.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomMsg::kUidFieldNumber;
const int JoinRoomMsg::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomMsg::JoinRoomMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.JoinRoomMsg)
}
JoinRoomMsg::JoinRoomMsg(const JoinRoomMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:plane.JoinRoomMsg)
}

void JoinRoomMsg::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0u;
}

JoinRoomMsg::~JoinRoomMsg() {
  // @@protoc_insertion_point(destructor:plane.JoinRoomMsg)
  SharedDtor();
}

void JoinRoomMsg::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinRoomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomMsg::descriptor() {
  protobuf_plane_2fplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_2eproto::file_level_metadata[2].descriptor;
}

const JoinRoomMsg& JoinRoomMsg::default_instance() {
  protobuf_plane_2fplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinRoomMsg* JoinRoomMsg::New(::google::protobuf::Arena* arena) const {
  JoinRoomMsg* n = new JoinRoomMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.JoinRoomMsg)
  if (has_nickname()) {
    GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nickname_.UnsafeRawStringPointer())->clear();
  }
  uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JoinRoomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.JoinRoomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.JoinRoomMsg.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.JoinRoomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.JoinRoomMsg)
  return false;
#undef DO_
}

void JoinRoomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.JoinRoomMsg)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.JoinRoomMsg.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.JoinRoomMsg)
}

::google::protobuf::uint8* JoinRoomMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.JoinRoomMsg)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.JoinRoomMsg.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.JoinRoomMsg)
  return target;
}

size_t JoinRoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.JoinRoomMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.JoinRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.JoinRoomMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.JoinRoomMsg)
    MergeFrom(*source);
  }
}

void JoinRoomMsg::MergeFrom(const JoinRoomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.JoinRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
}

void JoinRoomMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.JoinRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomMsg::CopyFrom(const JoinRoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.JoinRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomMsg::IsInitialized() const {
  return true;
}

void JoinRoomMsg::Swap(JoinRoomMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomMsg::InternalSwap(JoinRoomMsg* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomMsg::GetMetadata() const {
  protobuf_plane_2fplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomMsg

// optional uint32 uid = 1;
bool JoinRoomMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinRoomMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinRoomMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinRoomMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 JoinRoomMsg::uid() const {
  // @@protoc_insertion_point(field_get:plane.JoinRoomMsg.uid)
  return uid_;
}
void JoinRoomMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:plane.JoinRoomMsg.uid)
}

// optional string nickname = 2;
bool JoinRoomMsg::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinRoomMsg::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinRoomMsg::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinRoomMsg::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& JoinRoomMsg::nickname() const {
  // @@protoc_insertion_point(field_get:plane.JoinRoomMsg.nickname)
  return nickname_.GetNoArena();
}
void JoinRoomMsg::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.JoinRoomMsg.nickname)
}
#if LANG_CXX11
void JoinRoomMsg::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.JoinRoomMsg.nickname)
}
#endif
void JoinRoomMsg::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.JoinRoomMsg.nickname)
}
void JoinRoomMsg::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.JoinRoomMsg.nickname)
}
::std::string* JoinRoomMsg::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:plane.JoinRoomMsg.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomMsg::release_nickname() {
  // @@protoc_insertion_point(field_release:plane.JoinRoomMsg.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomMsg::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:plane.JoinRoomMsg.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace plane

// @@protoc_insertion_point(global_scope)
