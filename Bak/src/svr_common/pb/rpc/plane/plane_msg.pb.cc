// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plane/plane_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plane/plane_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plane {
class MsAndIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsAndId> {
} _MsAndId_default_instance_;
class MoveToMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveToMsg> {
} _MoveToMsg_default_instance_;
class PlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo> {
} _PlayerInfo_default_instance_;
class MoveInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveInfo> {
} _MoveInfo_default_instance_;
class FoodMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FoodMsg> {
} _FoodMsg_default_instance_;
class BatchAddEnergyPlaneBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchAddEnergyPlaneBcMsg> {
} _BatchAddEnergyPlaneBcMsg_default_instance_;
class OneBatchPlaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneBatchPlane> {
} _OneBatchPlane_default_instance_;
class TurnToMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TurnToMsg> {
} _TurnToMsg_default_instance_;
class PlaneMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlaneMsg> {
} _PlaneMsg_default_instance_;
class OneResultDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneResultData> {
} _OneResultData_default_instance_;
class ResultDataMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResultDataMsg> {
} _ResultDataMsg_default_instance_;
class PlaneDieMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlaneDieMsg> {
} _PlaneDieMsg_default_instance_;
class FrameHitBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameHitBcMsg> {
} _FrameHitBcMsg_default_instance_;
class OneBulletGroupHitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneBulletGroupHit> {
} _OneBulletGroupHit_default_instance_;
class OneEnergyHitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneEnergyHit> {
} _OneEnergyHit_default_instance_;
class OnePlaneHitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnePlaneHit> {
} _OnePlaneHit_default_instance_;
class BatchAddFoodBcMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchAddFoodBcMsg> {
} _BatchAddFoodBcMsg_default_instance_;
class UidMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UidMsg> {
} _UidMsg_default_instance_;
class UidListMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UidListMsg> {
} _UidListMsg_default_instance_;

namespace protobuf_plane_2fplane_5fmsg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsAndId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsAndId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsAndId, ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsAndId, id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveToMsg, small_plane_ids_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, skinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bulletskinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, random_formation_id_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInfo, is_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveInfo, angle_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodMsg, food_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodMsg, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodMsg, y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddEnergyPlaneBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddEnergyPlaneBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddEnergyPlaneBcMsg, skinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddEnergyPlaneBcMsg, dir_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddEnergyPlaneBcMsg, add_planes_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBatchPlane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBatchPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBatchPlane, plane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBatchPlane, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBatchPlane, y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnToMsg, angle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, plane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneMsg, move_speed_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, killnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, reward_sugar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, reward_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, is_ai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, avatarid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, header_imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneResultData, is_mvp_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultDataMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultDataMsg, datas_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneDieMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneDieMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaneDieMsg, planeid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHitBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHitBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHitBcMsg, hits_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBulletGroupHit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBulletGroupHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBulletGroupHit, bulletgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBulletGroupHit, eneryhits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBulletGroupHit, planehits_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, bulletid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, planeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneEnergyHit, speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, bulletid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, hit_playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, hit_planeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, ownerspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, attackerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, addplaneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnePlaneHit, speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddFoodBcMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddFoodBcMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchAddFoodBcMsg, foods_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidMsg, uid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidListMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidListMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidListMsg, uids_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(MsAndId)},
  { 8, 17, sizeof(MoveToMsg)},
  { 22, 33, sizeof(PlayerInfo)},
  { 40, 46, sizeof(MoveInfo)},
  { 48, 55, sizeof(FoodMsg)},
  { 58, 65, sizeof(BatchAddEnergyPlaneBcMsg)},
  { 68, 75, sizeof(OneBatchPlane)},
  { 78, 83, sizeof(TurnToMsg)},
  { 84, 90, sizeof(PlaneMsg)},
  { 92, 110, sizeof(OneResultData)},
  { 124, 129, sizeof(ResultDataMsg)},
  { 130, 135, sizeof(PlaneDieMsg)},
  { 136, 141, sizeof(FrameHitBcMsg)},
  { 142, 149, sizeof(OneBulletGroupHit)},
  { 152, 162, sizeof(OneEnergyHit)},
  { 168, 179, sizeof(OnePlaneHit)},
  { 186, 191, sizeof(BatchAddFoodBcMsg)},
  { 192, 197, sizeof(UidMsg)},
  { 198, 203, sizeof(UidListMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsAndId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveToMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FoodMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchAddEnergyPlaneBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneBatchPlane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TurnToMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaneMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneResultData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultDataMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaneDieMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameHitBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneBulletGroupHit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneEnergyHit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnePlaneHit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchAddFoodBcMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UidMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UidListMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "plane/plane_msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _MsAndId_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MoveToMsg_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MoveInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FoodMsg_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _BatchAddEnergyPlaneBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _OneBatchPlane_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TurnToMsg_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _PlaneMsg_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _OneResultData_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ResultDataMsg_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _PlaneDieMsg_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _FrameHitBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _OneBulletGroupHit_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _OneEnergyHit_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _OnePlaneHit_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _BatchAddFoodBcMsg_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _UidMsg_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _UidListMsg_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MsAndId_default_instance_.DefaultConstruct();
  _MoveToMsg_default_instance_.DefaultConstruct();
  _PlayerInfo_default_instance_.DefaultConstruct();
  _MoveInfo_default_instance_.DefaultConstruct();
  _FoodMsg_default_instance_.DefaultConstruct();
  _BatchAddEnergyPlaneBcMsg_default_instance_.DefaultConstruct();
  _OneBatchPlane_default_instance_.DefaultConstruct();
  _TurnToMsg_default_instance_.DefaultConstruct();
  _PlaneMsg_default_instance_.DefaultConstruct();
  _OneResultData_default_instance_.DefaultConstruct();
  _ResultDataMsg_default_instance_.DefaultConstruct();
  _PlaneDieMsg_default_instance_.DefaultConstruct();
  _FrameHitBcMsg_default_instance_.DefaultConstruct();
  _OneBulletGroupHit_default_instance_.DefaultConstruct();
  _OneEnergyHit_default_instance_.DefaultConstruct();
  _OnePlaneHit_default_instance_.DefaultConstruct();
  _BatchAddFoodBcMsg_default_instance_.DefaultConstruct();
  _UidMsg_default_instance_.DefaultConstruct();
  _UidListMsg_default_instance_.DefaultConstruct();
  _PlayerInfo_default_instance_.get_mutable()->move_ = const_cast< ::plane::MoveToMsg*>(
      ::plane::MoveToMsg::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025plane/plane_msg.proto\022\005plane\"!\n\007MsAndI"
      "d\022\n\n\002ms\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"X\n\tMoveToMsg\022\r"
      "\n\005angle\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\022\t\n\001x\030\003 \001(\r\022"
      "\t\n\001y\030\004 \001(\r\022\027\n\017small_plane_ids\030\005 \003(\r\"\230\001\n\n"
      "PlayerInfo\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\036\n\004"
      "move\030\003 \001(\0132\020.plane.MoveToMsg\022\r\n\005speed\030\004 "
      "\001(\r\022\016\n\006skinid\030\005 \001(\r\022\024\n\014bulletskinid\030\006 \001("
      "\r\022\033\n\023random_formation_id\030\007 \001(\r\"*\n\010MoveIn"
      "fo\022\017\n\007is_stop\030\001 \001(\010\022\r\n\005angle\030\002 \001(\r\"0\n\007Fo"
      "odMsg\022\017\n\007food_id\030\001 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004"
      " \001(\r\"g\n\030BatchAddEnergyPlaneBcMsg\022\016\n\006skin"
      "id\030\001 \001(\r\022\021\n\tdir_angle\030\002 \001(\r\022(\n\nadd_plane"
      "s\030\003 \003(\0132\024.plane.OneBatchPlane\"7\n\rOneBatc"
      "hPlane\022\020\n\010plane_id\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y"
      "\030\003 \001(\r\"\032\n\tTurnToMsg\022\r\n\005angle\030\001 \001(\r\"0\n\010Pl"
      "aneMsg\022\020\n\010plane_id\030\001 \001(\r\022\022\n\nmove_speed\030\002"
      " \001(\r\"\202\002\n\rOneResultData\022\020\n\010playerid\030\001 \001(\r"
      "\022\020\n\010nickname\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\017\n\007"
      "killnum\030\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\024\n\014reward_s"
      "ugar\030\006 \001(\r\022\025\n\rreward_cookie\030\007 \001(\r\022\r\n\005is_"
      "ai\030\010 \001(\r\022\013\n\003uid\030\t \001(\r\022\020\n\010avatarid\030\n \001(\r\022"
      "\025\n\rheader_imgurl\030\013 \001(\r\022\013\n\003sex\030\014 \001(\r\022\014\n\004r"
      "ank\030\r \001(\r\022\016\n\006is_mvp\030\016 \001(\r\"4\n\rResultDataM"
      "sg\022#\n\005datas\030\001 \003(\0132\024.plane.OneResultData\""
      "\036\n\013PlaneDieMsg\022\017\n\007planeid\030\001 \001(\r\"7\n\rFrame"
      "HitBcMsg\022&\n\004hits\030\001 \003(\0132\030.plane.OneBullet"
      "GroupHit\"y\n\021OneBulletGroupHit\022\025\n\rbulletg"
      "roupid\030\001 \001(\r\022&\n\teneryhits\030\002 \003(\0132\023.plane."
      "OneEnergyHit\022%\n\tplanehits\030\003 \003(\0132\022.plane."
      "OnePlaneHit\"l\n\014OneEnergyHit\022\020\n\010bulletid\030"
      "\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\020\n\010playe"
      "rid\030\004 \001(\r\022\017\n\007planeid\030\005 \001(\r\022\r\n\005speed\030\006 \001("
      "\r\"\225\001\n\013OnePlaneHit\022\020\n\010bulletid\030\001 \001(\r\022\024\n\014h"
      "it_playerid\030\002 \001(\r\022\023\n\013hit_planeid\030\003 \001(\r\022\022"
      "\n\nownerspeed\030\004 \001(\r\022\022\n\nattackerid\030\005 \001(\r\022\022"
      "\n\naddplaneid\030\006 \001(\r\022\r\n\005speed\030\007 \001(\r\"2\n\021Bat"
      "chAddFoodBcMsg\022\035\n\005foods\030\001 \003(\0132\016.plane.Fo"
      "odMsg\"\025\n\006UidMsg\022\013\n\003uid\030\001 \001(\r\"\032\n\nUidListM"
      "sg\022\014\n\004uids\030\001 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plane/plane_msg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_plane_2fplane_5fmsg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsAndId::kMsFieldNumber;
const int MsAndId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsAndId::MsAndId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.MsAndId)
}
MsAndId::MsAndId(const MsAndId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ms_, &from.ms_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ms_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:plane.MsAndId)
}

void MsAndId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ms_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ms_) + sizeof(id_));
}

MsAndId::~MsAndId() {
  // @@protoc_insertion_point(destructor:plane.MsAndId)
  SharedDtor();
}

void MsAndId::SharedDtor() {
}

void MsAndId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsAndId::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[0].descriptor;
}

const MsAndId& MsAndId::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsAndId* MsAndId::New(::google::protobuf::Arena* arena) const {
  MsAndId* n = new MsAndId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsAndId::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.MsAndId)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ms_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ms_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsAndId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.MsAndId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ms = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.MsAndId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.MsAndId)
  return false;
#undef DO_
}

void MsAndId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.MsAndId)
  // optional uint32 ms = 1;
  if (has_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ms(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.MsAndId)
}

::google::protobuf::uint8* MsAndId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.MsAndId)
  // optional uint32 ms = 1;
  if (has_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ms(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.MsAndId)
  return target;
}

size_t MsAndId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.MsAndId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ms = 1;
    if (has_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsAndId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.MsAndId)
  GOOGLE_DCHECK_NE(&from, this);
  const MsAndId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsAndId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.MsAndId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.MsAndId)
    MergeFrom(*source);
  }
}

void MsAndId::MergeFrom(const MsAndId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.MsAndId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_ms()) {
      set_ms(from.ms());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void MsAndId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.MsAndId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsAndId::CopyFrom(const MsAndId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.MsAndId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsAndId::IsInitialized() const {
  return true;
}

void MsAndId::Swap(MsAndId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsAndId::InternalSwap(MsAndId* other) {
  std::swap(ms_, other->ms_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsAndId::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsAndId

// optional uint32 ms = 1;
bool MsAndId::has_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsAndId::set_has_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void MsAndId::clear_has_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsAndId::clear_ms() {
  ms_ = 0u;
  clear_has_ms();
}
::google::protobuf::uint32 MsAndId::ms() const {
  // @@protoc_insertion_point(field_get:plane.MsAndId.ms)
  return ms_;
}
void MsAndId::set_ms(::google::protobuf::uint32 value) {
  set_has_ms();
  ms_ = value;
  // @@protoc_insertion_point(field_set:plane.MsAndId.ms)
}

// optional uint32 id = 2;
bool MsAndId::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsAndId::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsAndId::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsAndId::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 MsAndId::id() const {
  // @@protoc_insertion_point(field_get:plane.MsAndId.id)
  return id_;
}
void MsAndId::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:plane.MsAndId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveToMsg::kAngleFieldNumber;
const int MoveToMsg::kScoreFieldNumber;
const int MoveToMsg::kXFieldNumber;
const int MoveToMsg::kYFieldNumber;
const int MoveToMsg::kSmallPlaneIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveToMsg::MoveToMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.MoveToMsg)
}
MoveToMsg::MoveToMsg(const MoveToMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      small_plane_ids_(from.small_plane_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&angle_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:plane.MoveToMsg)
}

void MoveToMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angle_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&angle_) + sizeof(y_));
}

MoveToMsg::~MoveToMsg() {
  // @@protoc_insertion_point(destructor:plane.MoveToMsg)
  SharedDtor();
}

void MoveToMsg::SharedDtor() {
}

void MoveToMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveToMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[1].descriptor;
}

const MoveToMsg& MoveToMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveToMsg* MoveToMsg::New(::google::protobuf::Arena* arena) const {
  MoveToMsg* n = new MoveToMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveToMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.MoveToMsg)
  small_plane_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&angle_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&angle_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveToMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.MoveToMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 small_plane_ids = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_small_plane_ids())));
        } else if (static_cast<::google::protobuf::uint8>(tag) ==
                   static_cast<::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_small_plane_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.MoveToMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.MoveToMsg)
  return false;
#undef DO_
}

void MoveToMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.MoveToMsg)
  // optional uint32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->angle(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // repeated uint32 small_plane_ids = 5;
  for (int i = 0, n = this->small_plane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->small_plane_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.MoveToMsg)
}

::google::protobuf::uint8* MoveToMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.MoveToMsg)
  // optional uint32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->angle(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // repeated uint32 small_plane_ids = 5;
  for (int i = 0, n = this->small_plane_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->small_plane_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.MoveToMsg)
  return target;
}

size_t MoveToMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.MoveToMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 small_plane_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->small_plane_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->small_plane_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->angle());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveToMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.MoveToMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveToMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveToMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.MoveToMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.MoveToMsg)
    MergeFrom(*source);
  }
}

void MoveToMsg::MergeFrom(const MoveToMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.MoveToMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  small_plane_ids_.MergeFrom(from.small_plane_ids_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void MoveToMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.MoveToMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveToMsg::CopyFrom(const MoveToMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.MoveToMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveToMsg::IsInitialized() const {
  return true;
}

void MoveToMsg::Swap(MoveToMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveToMsg::InternalSwap(MoveToMsg* other) {
  small_plane_ids_.UnsafeArenaSwap(&other->small_plane_ids_);
  std::swap(angle_, other->angle_);
  std::swap(score_, other->score_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveToMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveToMsg

// optional uint32 angle = 1;
bool MoveToMsg::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoveToMsg::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void MoveToMsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoveToMsg::clear_angle() {
  angle_ = 0u;
  clear_has_angle();
}
::google::protobuf::uint32 MoveToMsg::angle() const {
  // @@protoc_insertion_point(field_get:plane.MoveToMsg.angle)
  return angle_;
}
void MoveToMsg::set_angle(::google::protobuf::uint32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:plane.MoveToMsg.angle)
}

// optional uint32 score = 2;
bool MoveToMsg::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MoveToMsg::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void MoveToMsg::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void MoveToMsg::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 MoveToMsg::score() const {
  // @@protoc_insertion_point(field_get:plane.MoveToMsg.score)
  return score_;
}
void MoveToMsg::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:plane.MoveToMsg.score)
}

// optional uint32 x = 3;
bool MoveToMsg::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MoveToMsg::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void MoveToMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void MoveToMsg::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 MoveToMsg::x() const {
  // @@protoc_insertion_point(field_get:plane.MoveToMsg.x)
  return x_;
}
void MoveToMsg::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:plane.MoveToMsg.x)
}

// optional uint32 y = 4;
bool MoveToMsg::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MoveToMsg::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void MoveToMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void MoveToMsg::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 MoveToMsg::y() const {
  // @@protoc_insertion_point(field_get:plane.MoveToMsg.y)
  return y_;
}
void MoveToMsg::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:plane.MoveToMsg.y)
}

// repeated uint32 small_plane_ids = 5;
int MoveToMsg::small_plane_ids_size() const {
  return small_plane_ids_.size();
}
void MoveToMsg::clear_small_plane_ids() {
  small_plane_ids_.Clear();
}
::google::protobuf::uint32 MoveToMsg::small_plane_ids(int index) const {
  // @@protoc_insertion_point(field_get:plane.MoveToMsg.small_plane_ids)
  return small_plane_ids_.Get(index);
}
void MoveToMsg::set_small_plane_ids(int index, ::google::protobuf::uint32 value) {
  small_plane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:plane.MoveToMsg.small_plane_ids)
}
void MoveToMsg::add_small_plane_ids(::google::protobuf::uint32 value) {
  small_plane_ids_.Add(value);
  // @@protoc_insertion_point(field_add:plane.MoveToMsg.small_plane_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MoveToMsg::small_plane_ids() const {
  // @@protoc_insertion_point(field_list:plane.MoveToMsg.small_plane_ids)
  return small_plane_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MoveToMsg::mutable_small_plane_ids() {
  // @@protoc_insertion_point(field_mutable_list:plane.MoveToMsg.small_plane_ids)
  return &small_plane_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kIdFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kMoveFieldNumber;
const int PlayerInfo::kSpeedFieldNumber;
const int PlayerInfo::kSkinidFieldNumber;
const int PlayerInfo::kBulletskinidFieldNumber;
const int PlayerInfo::kRandomFormationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_move()) {
    move_ = new ::plane::MoveToMsg(*from.move_);
  } else {
    move_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&random_formation_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(random_formation_id_));
  // @@protoc_insertion_point(copy_constructor:plane.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&move_, 0, reinterpret_cast<char*>(&random_formation_id_) -
    reinterpret_cast<char*>(&move_) + sizeof(random_formation_id_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:plane.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete move_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[2].descriptor;
}

const PlayerInfo& PlayerInfo::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.PlayerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_move()) {
      GOOGLE_DCHECK(move_ != NULL);
      move_->::plane::MoveToMsg::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&random_formation_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(random_formation_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.PlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .plane.MoveToMsg move = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skinid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_skinid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bulletskinid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_bulletskinid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletskinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 random_formation_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_random_formation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_formation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.PlayerInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .plane.MoveToMsg move = 3;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->move_, output);
  }

  // optional uint32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }

  // optional uint32 skinid = 5;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skinid(), output);
  }

  // optional uint32 bulletskinid = 6;
  if (has_bulletskinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bulletskinid(), output);
  }

  // optional uint32 random_formation_id = 7;
  if (has_random_formation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->random_formation_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.PlayerInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .plane.MoveToMsg move = 3;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->move_, false, target);
  }

  // optional uint32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }

  // optional uint32 skinid = 5;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skinid(), target);
  }

  // optional uint32 bulletskinid = 6;
  if (has_bulletskinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bulletskinid(), target);
  }

  // optional uint32 random_formation_id = 7;
  if (has_random_formation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->random_formation_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.PlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .plane.MoveToMsg move = 3;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->move_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 skinid = 5;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skinid());
    }

    // optional uint32 bulletskinid = 6;
    if (has_bulletskinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletskinid());
    }

    // optional uint32 random_formation_id = 7;
    if (has_random_formation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_formation_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_move()) {
      mutable_move()->::plane::MoveToMsg::MergeFrom(from.move());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_bulletskinid()) {
      set_bulletskinid(from.bulletskinid());
    }
    if (from.has_random_formation_id()) {
      set_random_formation_id(from.random_formation_id());
    }
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  name_.Swap(&other->name_);
  std::swap(move_, other->move_);
  std::swap(id_, other->id_);
  std::swap(speed_, other->speed_);
  std::swap(skinid_, other->skinid_);
  std::swap(bulletskinid_, other->bulletskinid_);
  std::swap(random_formation_id_, other->random_formation_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional uint32 id = 1;
bool PlayerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.id)
  return id_;
}
void PlayerInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:plane.PlayerInfo.id)
}

// optional string name = 2;
bool PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.name)
  return name_.GetNoArena();
}
void PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.PlayerInfo.name)
}
#if LANG_CXX11
void PlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.PlayerInfo.name)
}
#endif
void PlayerInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.PlayerInfo.name)
}
void PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.PlayerInfo.name)
}
::std::string* PlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:plane.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:plane.PlayerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plane.PlayerInfo.name)
}

// optional .plane.MoveToMsg move = 3;
bool PlayerInfo::has_move() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfo::set_has_move() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfo::clear_has_move() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfo::clear_move() {
  if (move_ != NULL) move_->::plane::MoveToMsg::Clear();
  clear_has_move();
}
const ::plane::MoveToMsg& PlayerInfo::move() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.move)
  return move_ != NULL ? *move_
                         : *::plane::MoveToMsg::internal_default_instance();
}
::plane::MoveToMsg* PlayerInfo::mutable_move() {
  set_has_move();
  if (move_ == NULL) {
    move_ = new ::plane::MoveToMsg;
  }
  // @@protoc_insertion_point(field_mutable:plane.PlayerInfo.move)
  return move_;
}
::plane::MoveToMsg* PlayerInfo::release_move() {
  // @@protoc_insertion_point(field_release:plane.PlayerInfo.move)
  clear_has_move();
  ::plane::MoveToMsg* temp = move_;
  move_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_move(::plane::MoveToMsg* move) {
  delete move_;
  move_ = move;
  if (move) {
    set_has_move();
  } else {
    clear_has_move();
  }
  // @@protoc_insertion_point(field_set_allocated:plane.PlayerInfo.move)
}

// optional uint32 speed = 4;
bool PlayerInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerInfo::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 PlayerInfo::speed() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.speed)
  return speed_;
}
void PlayerInfo::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:plane.PlayerInfo.speed)
}

// optional uint32 skinid = 5;
bool PlayerInfo::has_skinid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerInfo::set_has_skinid() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerInfo::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerInfo::clear_skinid() {
  skinid_ = 0u;
  clear_has_skinid();
}
::google::protobuf::uint32 PlayerInfo::skinid() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.skinid)
  return skinid_;
}
void PlayerInfo::set_skinid(::google::protobuf::uint32 value) {
  set_has_skinid();
  skinid_ = value;
  // @@protoc_insertion_point(field_set:plane.PlayerInfo.skinid)
}

// optional uint32 bulletskinid = 6;
bool PlayerInfo::has_bulletskinid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerInfo::set_has_bulletskinid() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerInfo::clear_has_bulletskinid() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerInfo::clear_bulletskinid() {
  bulletskinid_ = 0u;
  clear_has_bulletskinid();
}
::google::protobuf::uint32 PlayerInfo::bulletskinid() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.bulletskinid)
  return bulletskinid_;
}
void PlayerInfo::set_bulletskinid(::google::protobuf::uint32 value) {
  set_has_bulletskinid();
  bulletskinid_ = value;
  // @@protoc_insertion_point(field_set:plane.PlayerInfo.bulletskinid)
}

// optional uint32 random_formation_id = 7;
bool PlayerInfo::has_random_formation_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerInfo::set_has_random_formation_id() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerInfo::clear_has_random_formation_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerInfo::clear_random_formation_id() {
  random_formation_id_ = 0u;
  clear_has_random_formation_id();
}
::google::protobuf::uint32 PlayerInfo::random_formation_id() const {
  // @@protoc_insertion_point(field_get:plane.PlayerInfo.random_formation_id)
  return random_formation_id_;
}
void PlayerInfo::set_random_formation_id(::google::protobuf::uint32 value) {
  set_has_random_formation_id();
  random_formation_id_ = value;
  // @@protoc_insertion_point(field_set:plane.PlayerInfo.random_formation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveInfo::kIsStopFieldNumber;
const int MoveInfo::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveInfo::MoveInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.MoveInfo)
}
MoveInfo::MoveInfo(const MoveInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_stop_, &from.is_stop_,
    reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&is_stop_) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:plane.MoveInfo)
}

void MoveInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_stop_, 0, reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&is_stop_) + sizeof(angle_));
}

MoveInfo::~MoveInfo() {
  // @@protoc_insertion_point(destructor:plane.MoveInfo)
  SharedDtor();
}

void MoveInfo::SharedDtor() {
}

void MoveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveInfo::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[3].descriptor;
}

const MoveInfo& MoveInfo::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveInfo* MoveInfo::New(::google::protobuf::Arena* arena) const {
  MoveInfo* n = new MoveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.MoveInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&is_stop_, 0, reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&is_stop_) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.MoveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_stop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_is_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 angle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.MoveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.MoveInfo)
  return false;
#undef DO_
}

void MoveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.MoveInfo)
  // optional bool is_stop = 1;
  if (has_is_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_stop(), output);
  }

  // optional uint32 angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.MoveInfo)
}

::google::protobuf::uint8* MoveInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.MoveInfo)
  // optional bool is_stop = 1;
  if (has_is_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_stop(), target);
  }

  // optional uint32 angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.MoveInfo)
  return target;
}

size_t MoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.MoveInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool is_stop = 1;
    if (has_is_stop()) {
      total_size += 1 + 1;
    }

    // optional uint32 angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->angle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.MoveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.MoveInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.MoveInfo)
    MergeFrom(*source);
  }
}

void MoveInfo::MergeFrom(const MoveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.MoveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_is_stop()) {
      set_is_stop(from.is_stop());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
}

void MoveInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.MoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveInfo::CopyFrom(const MoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.MoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveInfo::IsInitialized() const {
  return true;
}

void MoveInfo::Swap(MoveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveInfo::InternalSwap(MoveInfo* other) {
  std::swap(is_stop_, other->is_stop_);
  std::swap(angle_, other->angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveInfo::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveInfo

// optional bool is_stop = 1;
bool MoveInfo::has_is_stop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoveInfo::set_has_is_stop() {
  _has_bits_[0] |= 0x00000001u;
}
void MoveInfo::clear_has_is_stop() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoveInfo::clear_is_stop() {
  is_stop_ = false;
  clear_has_is_stop();
}
bool MoveInfo::is_stop() const {
  // @@protoc_insertion_point(field_get:plane.MoveInfo.is_stop)
  return is_stop_;
}
void MoveInfo::set_is_stop(bool value) {
  set_has_is_stop();
  is_stop_ = value;
  // @@protoc_insertion_point(field_set:plane.MoveInfo.is_stop)
}

// optional uint32 angle = 2;
bool MoveInfo::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MoveInfo::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void MoveInfo::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void MoveInfo::clear_angle() {
  angle_ = 0u;
  clear_has_angle();
}
::google::protobuf::uint32 MoveInfo::angle() const {
  // @@protoc_insertion_point(field_get:plane.MoveInfo.angle)
  return angle_;
}
void MoveInfo::set_angle(::google::protobuf::uint32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:plane.MoveInfo.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FoodMsg::kFoodIdFieldNumber;
const int FoodMsg::kXFieldNumber;
const int FoodMsg::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FoodMsg::FoodMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.FoodMsg)
}
FoodMsg::FoodMsg(const FoodMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&food_id_, &from.food_id_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&food_id_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:plane.FoodMsg)
}

void FoodMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&food_id_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&food_id_) + sizeof(y_));
}

FoodMsg::~FoodMsg() {
  // @@protoc_insertion_point(destructor:plane.FoodMsg)
  SharedDtor();
}

void FoodMsg::SharedDtor() {
}

void FoodMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[4].descriptor;
}

const FoodMsg& FoodMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

FoodMsg* FoodMsg::New(::google::protobuf::Arena* arena) const {
  FoodMsg* n = new FoodMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FoodMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.FoodMsg)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&food_id_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&food_id_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FoodMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.FoodMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 food_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_food_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.FoodMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.FoodMsg)
  return false;
#undef DO_
}

void FoodMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.FoodMsg)
  // optional uint32 food_id = 1;
  if (has_food_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->food_id(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.FoodMsg)
}

::google::protobuf::uint8* FoodMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.FoodMsg)
  // optional uint32 food_id = 1;
  if (has_food_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->food_id(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.FoodMsg)
  return target;
}

size_t FoodMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.FoodMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 food_id = 1;
    if (has_food_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_id());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.FoodMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FoodMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FoodMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.FoodMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.FoodMsg)
    MergeFrom(*source);
  }
}

void FoodMsg::MergeFrom(const FoodMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.FoodMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_food_id()) {
      set_food_id(from.food_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void FoodMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.FoodMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodMsg::CopyFrom(const FoodMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.FoodMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodMsg::IsInitialized() const {
  return true;
}

void FoodMsg::Swap(FoodMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FoodMsg::InternalSwap(FoodMsg* other) {
  std::swap(food_id_, other->food_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FoodMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FoodMsg

// optional uint32 food_id = 1;
bool FoodMsg::has_food_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FoodMsg::set_has_food_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FoodMsg::clear_has_food_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FoodMsg::clear_food_id() {
  food_id_ = 0u;
  clear_has_food_id();
}
::google::protobuf::uint32 FoodMsg::food_id() const {
  // @@protoc_insertion_point(field_get:plane.FoodMsg.food_id)
  return food_id_;
}
void FoodMsg::set_food_id(::google::protobuf::uint32 value) {
  set_has_food_id();
  food_id_ = value;
  // @@protoc_insertion_point(field_set:plane.FoodMsg.food_id)
}

// optional uint32 x = 3;
bool FoodMsg::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FoodMsg::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void FoodMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void FoodMsg::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 FoodMsg::x() const {
  // @@protoc_insertion_point(field_get:plane.FoodMsg.x)
  return x_;
}
void FoodMsg::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:plane.FoodMsg.x)
}

// optional uint32 y = 4;
bool FoodMsg::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FoodMsg::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void FoodMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void FoodMsg::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 FoodMsg::y() const {
  // @@protoc_insertion_point(field_get:plane.FoodMsg.y)
  return y_;
}
void FoodMsg::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:plane.FoodMsg.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchAddEnergyPlaneBcMsg::kSkinidFieldNumber;
const int BatchAddEnergyPlaneBcMsg::kDirAngleFieldNumber;
const int BatchAddEnergyPlaneBcMsg::kAddPlanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchAddEnergyPlaneBcMsg::BatchAddEnergyPlaneBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.BatchAddEnergyPlaneBcMsg)
}
BatchAddEnergyPlaneBcMsg::BatchAddEnergyPlaneBcMsg(const BatchAddEnergyPlaneBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      add_planes_(from.add_planes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skinid_, &from.skinid_,
    reinterpret_cast<char*>(&dir_angle_) -
    reinterpret_cast<char*>(&skinid_) + sizeof(dir_angle_));
  // @@protoc_insertion_point(copy_constructor:plane.BatchAddEnergyPlaneBcMsg)
}

void BatchAddEnergyPlaneBcMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&skinid_, 0, reinterpret_cast<char*>(&dir_angle_) -
    reinterpret_cast<char*>(&skinid_) + sizeof(dir_angle_));
}

BatchAddEnergyPlaneBcMsg::~BatchAddEnergyPlaneBcMsg() {
  // @@protoc_insertion_point(destructor:plane.BatchAddEnergyPlaneBcMsg)
  SharedDtor();
}

void BatchAddEnergyPlaneBcMsg::SharedDtor() {
}

void BatchAddEnergyPlaneBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchAddEnergyPlaneBcMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[5].descriptor;
}

const BatchAddEnergyPlaneBcMsg& BatchAddEnergyPlaneBcMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchAddEnergyPlaneBcMsg* BatchAddEnergyPlaneBcMsg::New(::google::protobuf::Arena* arena) const {
  BatchAddEnergyPlaneBcMsg* n = new BatchAddEnergyPlaneBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchAddEnergyPlaneBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.BatchAddEnergyPlaneBcMsg)
  add_planes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&skinid_, 0, reinterpret_cast<char*>(&dir_angle_) -
      reinterpret_cast<char*>(&skinid_) + sizeof(dir_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchAddEnergyPlaneBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.BatchAddEnergyPlaneBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skinid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_skinid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dir_angle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_dir_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .plane.OneBatchPlane add_planes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_add_planes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.BatchAddEnergyPlaneBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.BatchAddEnergyPlaneBcMsg)
  return false;
#undef DO_
}

void BatchAddEnergyPlaneBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.BatchAddEnergyPlaneBcMsg)
  // optional uint32 skinid = 1;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skinid(), output);
  }

  // optional uint32 dir_angle = 2;
  if (has_dir_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dir_angle(), output);
  }

  // repeated .plane.OneBatchPlane add_planes = 3;
  for (unsigned int i = 0, n = this->add_planes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->add_planes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.BatchAddEnergyPlaneBcMsg)
}

::google::protobuf::uint8* BatchAddEnergyPlaneBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.BatchAddEnergyPlaneBcMsg)
  // optional uint32 skinid = 1;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skinid(), target);
  }

  // optional uint32 dir_angle = 2;
  if (has_dir_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dir_angle(), target);
  }

  // repeated .plane.OneBatchPlane add_planes = 3;
  for (unsigned int i = 0, n = this->add_planes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->add_planes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.BatchAddEnergyPlaneBcMsg)
  return target;
}

size_t BatchAddEnergyPlaneBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.BatchAddEnergyPlaneBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.OneBatchPlane add_planes = 3;
  {
    unsigned int count = this->add_planes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_planes(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 skinid = 1;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skinid());
    }

    // optional uint32 dir_angle = 2;
    if (has_dir_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_angle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchAddEnergyPlaneBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.BatchAddEnergyPlaneBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAddEnergyPlaneBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchAddEnergyPlaneBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.BatchAddEnergyPlaneBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.BatchAddEnergyPlaneBcMsg)
    MergeFrom(*source);
  }
}

void BatchAddEnergyPlaneBcMsg::MergeFrom(const BatchAddEnergyPlaneBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.BatchAddEnergyPlaneBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  add_planes_.MergeFrom(from.add_planes_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_dir_angle()) {
      set_dir_angle(from.dir_angle());
    }
  }
}

void BatchAddEnergyPlaneBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.BatchAddEnergyPlaneBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAddEnergyPlaneBcMsg::CopyFrom(const BatchAddEnergyPlaneBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.BatchAddEnergyPlaneBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAddEnergyPlaneBcMsg::IsInitialized() const {
  return true;
}

void BatchAddEnergyPlaneBcMsg::Swap(BatchAddEnergyPlaneBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchAddEnergyPlaneBcMsg::InternalSwap(BatchAddEnergyPlaneBcMsg* other) {
  add_planes_.UnsafeArenaSwap(&other->add_planes_);
  std::swap(skinid_, other->skinid_);
  std::swap(dir_angle_, other->dir_angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchAddEnergyPlaneBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchAddEnergyPlaneBcMsg

// optional uint32 skinid = 1;
bool BatchAddEnergyPlaneBcMsg::has_skinid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchAddEnergyPlaneBcMsg::set_has_skinid() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchAddEnergyPlaneBcMsg::clear_has_skinid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchAddEnergyPlaneBcMsg::clear_skinid() {
  skinid_ = 0u;
  clear_has_skinid();
}
::google::protobuf::uint32 BatchAddEnergyPlaneBcMsg::skinid() const {
  // @@protoc_insertion_point(field_get:plane.BatchAddEnergyPlaneBcMsg.skinid)
  return skinid_;
}
void BatchAddEnergyPlaneBcMsg::set_skinid(::google::protobuf::uint32 value) {
  set_has_skinid();
  skinid_ = value;
  // @@protoc_insertion_point(field_set:plane.BatchAddEnergyPlaneBcMsg.skinid)
}

// optional uint32 dir_angle = 2;
bool BatchAddEnergyPlaneBcMsg::has_dir_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchAddEnergyPlaneBcMsg::set_has_dir_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchAddEnergyPlaneBcMsg::clear_has_dir_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchAddEnergyPlaneBcMsg::clear_dir_angle() {
  dir_angle_ = 0u;
  clear_has_dir_angle();
}
::google::protobuf::uint32 BatchAddEnergyPlaneBcMsg::dir_angle() const {
  // @@protoc_insertion_point(field_get:plane.BatchAddEnergyPlaneBcMsg.dir_angle)
  return dir_angle_;
}
void BatchAddEnergyPlaneBcMsg::set_dir_angle(::google::protobuf::uint32 value) {
  set_has_dir_angle();
  dir_angle_ = value;
  // @@protoc_insertion_point(field_set:plane.BatchAddEnergyPlaneBcMsg.dir_angle)
}

// repeated .plane.OneBatchPlane add_planes = 3;
int BatchAddEnergyPlaneBcMsg::add_planes_size() const {
  return add_planes_.size();
}
void BatchAddEnergyPlaneBcMsg::clear_add_planes() {
  add_planes_.Clear();
}
const ::plane::OneBatchPlane& BatchAddEnergyPlaneBcMsg::add_planes(int index) const {
  // @@protoc_insertion_point(field_get:plane.BatchAddEnergyPlaneBcMsg.add_planes)
  return add_planes_.Get(index);
}
::plane::OneBatchPlane* BatchAddEnergyPlaneBcMsg::mutable_add_planes(int index) {
  // @@protoc_insertion_point(field_mutable:plane.BatchAddEnergyPlaneBcMsg.add_planes)
  return add_planes_.Mutable(index);
}
::plane::OneBatchPlane* BatchAddEnergyPlaneBcMsg::add_add_planes() {
  // @@protoc_insertion_point(field_add:plane.BatchAddEnergyPlaneBcMsg.add_planes)
  return add_planes_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::OneBatchPlane >*
BatchAddEnergyPlaneBcMsg::mutable_add_planes() {
  // @@protoc_insertion_point(field_mutable_list:plane.BatchAddEnergyPlaneBcMsg.add_planes)
  return &add_planes_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::OneBatchPlane >&
BatchAddEnergyPlaneBcMsg::add_planes() const {
  // @@protoc_insertion_point(field_list:plane.BatchAddEnergyPlaneBcMsg.add_planes)
  return add_planes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneBatchPlane::kPlaneIdFieldNumber;
const int OneBatchPlane::kXFieldNumber;
const int OneBatchPlane::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneBatchPlane::OneBatchPlane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.OneBatchPlane)
}
OneBatchPlane::OneBatchPlane(const OneBatchPlane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&plane_id_, &from.plane_id_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&plane_id_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:plane.OneBatchPlane)
}

void OneBatchPlane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&plane_id_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&plane_id_) + sizeof(y_));
}

OneBatchPlane::~OneBatchPlane() {
  // @@protoc_insertion_point(destructor:plane.OneBatchPlane)
  SharedDtor();
}

void OneBatchPlane::SharedDtor() {
}

void OneBatchPlane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneBatchPlane::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[6].descriptor;
}

const OneBatchPlane& OneBatchPlane::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneBatchPlane* OneBatchPlane::New(::google::protobuf::Arena* arena) const {
  OneBatchPlane* n = new OneBatchPlane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneBatchPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.OneBatchPlane)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&plane_id_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&plane_id_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneBatchPlane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.OneBatchPlane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 plane_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_plane_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.OneBatchPlane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.OneBatchPlane)
  return false;
#undef DO_
}

void OneBatchPlane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.OneBatchPlane)
  // optional uint32 plane_id = 1;
  if (has_plane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plane_id(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.OneBatchPlane)
}

::google::protobuf::uint8* OneBatchPlane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.OneBatchPlane)
  // optional uint32 plane_id = 1;
  if (has_plane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plane_id(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.OneBatchPlane)
  return target;
}

size_t OneBatchPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.OneBatchPlane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 plane_id = 1;
    if (has_plane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plane_id());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneBatchPlane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.OneBatchPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const OneBatchPlane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneBatchPlane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.OneBatchPlane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.OneBatchPlane)
    MergeFrom(*source);
  }
}

void OneBatchPlane::MergeFrom(const OneBatchPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.OneBatchPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_plane_id()) {
      set_plane_id(from.plane_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void OneBatchPlane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.OneBatchPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneBatchPlane::CopyFrom(const OneBatchPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.OneBatchPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBatchPlane::IsInitialized() const {
  return true;
}

void OneBatchPlane::Swap(OneBatchPlane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneBatchPlane::InternalSwap(OneBatchPlane* other) {
  std::swap(plane_id_, other->plane_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneBatchPlane::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneBatchPlane

// optional uint32 plane_id = 1;
bool OneBatchPlane::has_plane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneBatchPlane::set_has_plane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OneBatchPlane::clear_has_plane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneBatchPlane::clear_plane_id() {
  plane_id_ = 0u;
  clear_has_plane_id();
}
::google::protobuf::uint32 OneBatchPlane::plane_id() const {
  // @@protoc_insertion_point(field_get:plane.OneBatchPlane.plane_id)
  return plane_id_;
}
void OneBatchPlane::set_plane_id(::google::protobuf::uint32 value) {
  set_has_plane_id();
  plane_id_ = value;
  // @@protoc_insertion_point(field_set:plane.OneBatchPlane.plane_id)
}

// optional uint32 x = 2;
bool OneBatchPlane::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneBatchPlane::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void OneBatchPlane::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneBatchPlane::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 OneBatchPlane::x() const {
  // @@protoc_insertion_point(field_get:plane.OneBatchPlane.x)
  return x_;
}
void OneBatchPlane::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:plane.OneBatchPlane.x)
}

// optional uint32 y = 3;
bool OneBatchPlane::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneBatchPlane::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void OneBatchPlane::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneBatchPlane::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 OneBatchPlane::y() const {
  // @@protoc_insertion_point(field_get:plane.OneBatchPlane.y)
  return y_;
}
void OneBatchPlane::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:plane.OneBatchPlane.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnToMsg::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnToMsg::TurnToMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.TurnToMsg)
}
TurnToMsg::TurnToMsg(const TurnToMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:plane.TurnToMsg)
}

void TurnToMsg::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0u;
}

TurnToMsg::~TurnToMsg() {
  // @@protoc_insertion_point(destructor:plane.TurnToMsg)
  SharedDtor();
}

void TurnToMsg::SharedDtor() {
}

void TurnToMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnToMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[7].descriptor;
}

const TurnToMsg& TurnToMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

TurnToMsg* TurnToMsg::New(::google::protobuf::Arena* arena) const {
  TurnToMsg* n = new TurnToMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TurnToMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.TurnToMsg)
  angle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TurnToMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.TurnToMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.TurnToMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.TurnToMsg)
  return false;
#undef DO_
}

void TurnToMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.TurnToMsg)
  // optional uint32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.TurnToMsg)
}

::google::protobuf::uint8* TurnToMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.TurnToMsg)
  // optional uint32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.TurnToMsg)
  return target;
}

size_t TurnToMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.TurnToMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 angle = 1;
  if (has_angle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->angle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnToMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.TurnToMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnToMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnToMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.TurnToMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.TurnToMsg)
    MergeFrom(*source);
  }
}

void TurnToMsg::MergeFrom(const TurnToMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.TurnToMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    set_angle(from.angle());
  }
}

void TurnToMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.TurnToMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnToMsg::CopyFrom(const TurnToMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.TurnToMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnToMsg::IsInitialized() const {
  return true;
}

void TurnToMsg::Swap(TurnToMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnToMsg::InternalSwap(TurnToMsg* other) {
  std::swap(angle_, other->angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TurnToMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnToMsg

// optional uint32 angle = 1;
bool TurnToMsg::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TurnToMsg::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void TurnToMsg::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void TurnToMsg::clear_angle() {
  angle_ = 0u;
  clear_has_angle();
}
::google::protobuf::uint32 TurnToMsg::angle() const {
  // @@protoc_insertion_point(field_get:plane.TurnToMsg.angle)
  return angle_;
}
void TurnToMsg::set_angle(::google::protobuf::uint32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:plane.TurnToMsg.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaneMsg::kPlaneIdFieldNumber;
const int PlaneMsg::kMoveSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaneMsg::PlaneMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.PlaneMsg)
}
PlaneMsg::PlaneMsg(const PlaneMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&plane_id_, &from.plane_id_,
    reinterpret_cast<char*>(&move_speed_) -
    reinterpret_cast<char*>(&plane_id_) + sizeof(move_speed_));
  // @@protoc_insertion_point(copy_constructor:plane.PlaneMsg)
}

void PlaneMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&plane_id_, 0, reinterpret_cast<char*>(&move_speed_) -
    reinterpret_cast<char*>(&plane_id_) + sizeof(move_speed_));
}

PlaneMsg::~PlaneMsg() {
  // @@protoc_insertion_point(destructor:plane.PlaneMsg)
  SharedDtor();
}

void PlaneMsg::SharedDtor() {
}

void PlaneMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaneMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[8].descriptor;
}

const PlaneMsg& PlaneMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaneMsg* PlaneMsg::New(::google::protobuf::Arena* arena) const {
  PlaneMsg* n = new PlaneMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaneMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.PlaneMsg)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&plane_id_, 0, reinterpret_cast<char*>(&move_speed_) -
      reinterpret_cast<char*>(&plane_id_) + sizeof(move_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlaneMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.PlaneMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 plane_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_plane_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_speed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_move_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.PlaneMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.PlaneMsg)
  return false;
#undef DO_
}

void PlaneMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.PlaneMsg)
  // optional uint32 plane_id = 1;
  if (has_plane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plane_id(), output);
  }

  // optional uint32 move_speed = 2;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->move_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.PlaneMsg)
}

::google::protobuf::uint8* PlaneMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.PlaneMsg)
  // optional uint32 plane_id = 1;
  if (has_plane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plane_id(), target);
  }

  // optional uint32 move_speed = 2;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->move_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.PlaneMsg)
  return target;
}

size_t PlaneMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.PlaneMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 plane_id = 1;
    if (has_plane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plane_id());
    }

    // optional uint32 move_speed = 2;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.PlaneMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaneMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.PlaneMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.PlaneMsg)
    MergeFrom(*source);
  }
}

void PlaneMsg::MergeFrom(const PlaneMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.PlaneMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_plane_id()) {
      set_plane_id(from.plane_id());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
  }
}

void PlaneMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.PlaneMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneMsg::CopyFrom(const PlaneMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.PlaneMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneMsg::IsInitialized() const {
  return true;
}

void PlaneMsg::Swap(PlaneMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaneMsg::InternalSwap(PlaneMsg* other) {
  std::swap(plane_id_, other->plane_id_);
  std::swap(move_speed_, other->move_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaneMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaneMsg

// optional uint32 plane_id = 1;
bool PlaneMsg::has_plane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaneMsg::set_has_plane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaneMsg::clear_has_plane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaneMsg::clear_plane_id() {
  plane_id_ = 0u;
  clear_has_plane_id();
}
::google::protobuf::uint32 PlaneMsg::plane_id() const {
  // @@protoc_insertion_point(field_get:plane.PlaneMsg.plane_id)
  return plane_id_;
}
void PlaneMsg::set_plane_id(::google::protobuf::uint32 value) {
  set_has_plane_id();
  plane_id_ = value;
  // @@protoc_insertion_point(field_set:plane.PlaneMsg.plane_id)
}

// optional uint32 move_speed = 2;
bool PlaneMsg::has_move_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlaneMsg::set_has_move_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void PlaneMsg::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlaneMsg::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
}
::google::protobuf::uint32 PlaneMsg::move_speed() const {
  // @@protoc_insertion_point(field_get:plane.PlaneMsg.move_speed)
  return move_speed_;
}
void PlaneMsg::set_move_speed(::google::protobuf::uint32 value) {
  set_has_move_speed();
  move_speed_ = value;
  // @@protoc_insertion_point(field_set:plane.PlaneMsg.move_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneResultData::kPlayeridFieldNumber;
const int OneResultData::kNicknameFieldNumber;
const int OneResultData::kUsernameFieldNumber;
const int OneResultData::kKillnumFieldNumber;
const int OneResultData::kScoreFieldNumber;
const int OneResultData::kRewardSugarFieldNumber;
const int OneResultData::kRewardCookieFieldNumber;
const int OneResultData::kIsAiFieldNumber;
const int OneResultData::kUidFieldNumber;
const int OneResultData::kAvataridFieldNumber;
const int OneResultData::kHeaderImgurlFieldNumber;
const int OneResultData::kSexFieldNumber;
const int OneResultData::kRankFieldNumber;
const int OneResultData::kIsMvpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneResultData::OneResultData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.OneResultData)
}
OneResultData::OneResultData(const OneResultData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    reinterpret_cast<char*>(&is_mvp_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(is_mvp_));
  // @@protoc_insertion_point(copy_constructor:plane.OneResultData)
}

void OneResultData::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&is_mvp_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(is_mvp_));
}

OneResultData::~OneResultData() {
  // @@protoc_insertion_point(destructor:plane.OneResultData)
  SharedDtor();
}

void OneResultData::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneResultData::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[9].descriptor;
}

const OneResultData& OneResultData::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneResultData* OneResultData::New(::google::protobuf::Arena* arena) const {
  OneResultData* n = new OneResultData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneResultData::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.OneResultData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&playerid_, 0, reinterpret_cast<char*>(&is_ai_) -
      reinterpret_cast<char*>(&playerid_) + sizeof(is_ai_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&is_mvp_) -
      reinterpret_cast<char*>(&uid_) + sizeof(is_mvp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.OneResultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.OneResultData.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plane.OneResultData.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killnum = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_killnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_sugar = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_reward_sugar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_sugar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_cookie = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_reward_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_ai = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(64u)) {
          set_has_is_ai();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uid = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(72u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avatarid = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(80u)) {
          set_has_avatarid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_imgurl = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(88u)) {
          set_has_header_imgurl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_imgurl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sex = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(96u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(104u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_mvp = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(112u)) {
          set_has_is_mvp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_mvp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.OneResultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.OneResultData)
  return false;
#undef DO_
}

void OneResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.OneResultData)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.OneResultData.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.OneResultData.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional uint32 killnum = 4;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killnum(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 reward_sugar = 6;
  if (has_reward_sugar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reward_sugar(), output);
  }

  // optional uint32 reward_cookie = 7;
  if (has_reward_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward_cookie(), output);
  }

  // optional uint32 is_ai = 8;
  if (has_is_ai()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_ai(), output);
  }

  // optional uint32 uid = 9;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uid(), output);
  }

  // optional uint32 avatarid = 10;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avatarid(), output);
  }

  // optional uint32 header_imgurl = 11;
  if (has_header_imgurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->header_imgurl(), output);
  }

  // optional uint32 sex = 12;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sex(), output);
  }

  // optional uint32 rank = 13;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->rank(), output);
  }

  // optional uint32 is_mvp = 14;
  if (has_is_mvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->is_mvp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.OneResultData)
}

::google::protobuf::uint8* OneResultData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.OneResultData)
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.OneResultData.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plane.OneResultData.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional uint32 killnum = 4;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killnum(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 reward_sugar = 6;
  if (has_reward_sugar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reward_sugar(), target);
  }

  // optional uint32 reward_cookie = 7;
  if (has_reward_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward_cookie(), target);
  }

  // optional uint32 is_ai = 8;
  if (has_is_ai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_ai(), target);
  }

  // optional uint32 uid = 9;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uid(), target);
  }

  // optional uint32 avatarid = 10;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avatarid(), target);
  }

  // optional uint32 header_imgurl = 11;
  if (has_header_imgurl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->header_imgurl(), target);
  }

  // optional uint32 sex = 12;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sex(), target);
  }

  // optional uint32 rank = 13;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->rank(), target);
  }

  // optional uint32 is_mvp = 14;
  if (has_is_mvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->is_mvp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.OneResultData)
  return target;
}

size_t OneResultData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.OneResultData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 killnum = 4;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 reward_sugar = 6;
    if (has_reward_sugar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_sugar());
    }

    // optional uint32 reward_cookie = 7;
    if (has_reward_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_cookie());
    }

    // optional uint32 is_ai = 8;
    if (has_is_ai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ai());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 uid = 9;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 avatarid = 10;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatarid());
    }

    // optional uint32 header_imgurl = 11;
    if (has_header_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->header_imgurl());
    }

    // optional uint32 sex = 12;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 rank = 13;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 is_mvp = 14;
    if (has_is_mvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_mvp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneResultData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.OneResultData)
  GOOGLE_DCHECK_NE(&from, this);
  const OneResultData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneResultData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.OneResultData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.OneResultData)
    MergeFrom(*source);
  }
}

void OneResultData::MergeFrom(const OneResultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.OneResultData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_reward_sugar()) {
      set_reward_sugar(from.reward_sugar());
    }
    if (from.has_reward_cookie()) {
      set_reward_cookie(from.reward_cookie());
    }
    if (from.has_is_ai()) {
      set_is_ai(from.is_ai());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_header_imgurl()) {
      set_header_imgurl(from.header_imgurl());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_is_mvp()) {
      set_is_mvp(from.is_mvp());
    }
  }
}

void OneResultData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.OneResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneResultData::CopyFrom(const OneResultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.OneResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneResultData::IsInitialized() const {
  return true;
}

void OneResultData::Swap(OneResultData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneResultData::InternalSwap(OneResultData* other) {
  nickname_.Swap(&other->nickname_);
  username_.Swap(&other->username_);
  std::swap(playerid_, other->playerid_);
  std::swap(killnum_, other->killnum_);
  std::swap(score_, other->score_);
  std::swap(reward_sugar_, other->reward_sugar_);
  std::swap(reward_cookie_, other->reward_cookie_);
  std::swap(is_ai_, other->is_ai_);
  std::swap(uid_, other->uid_);
  std::swap(avatarid_, other->avatarid_);
  std::swap(header_imgurl_, other->header_imgurl_);
  std::swap(sex_, other->sex_);
  std::swap(rank_, other->rank_);
  std::swap(is_mvp_, other->is_mvp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneResultData::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneResultData

// optional uint32 playerid = 1;
bool OneResultData::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneResultData::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
void OneResultData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneResultData::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 OneResultData::playerid() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.playerid)
  return playerid_;
}
void OneResultData::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.playerid)
}

// optional string nickname = 2;
bool OneResultData::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneResultData::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void OneResultData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneResultData::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& OneResultData::nickname() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.nickname)
  return nickname_.GetNoArena();
}
void OneResultData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.OneResultData.nickname)
}
#if LANG_CXX11
void OneResultData::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.OneResultData.nickname)
}
#endif
void OneResultData::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.OneResultData.nickname)
}
void OneResultData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.OneResultData.nickname)
}
::std::string* OneResultData::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:plane.OneResultData.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneResultData::release_nickname() {
  // @@protoc_insertion_point(field_release:plane.OneResultData.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneResultData::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:plane.OneResultData.nickname)
}

// optional string username = 3;
bool OneResultData::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneResultData::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void OneResultData::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneResultData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& OneResultData::username() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.username)
  return username_.GetNoArena();
}
void OneResultData::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plane.OneResultData.username)
}
#if LANG_CXX11
void OneResultData::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plane.OneResultData.username)
}
#endif
void OneResultData::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plane.OneResultData.username)
}
void OneResultData::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plane.OneResultData.username)
}
::std::string* OneResultData::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:plane.OneResultData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneResultData::release_username() {
  // @@protoc_insertion_point(field_release:plane.OneResultData.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneResultData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:plane.OneResultData.username)
}

// optional uint32 killnum = 4;
bool OneResultData::has_killnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneResultData::set_has_killnum() {
  _has_bits_[0] |= 0x00000008u;
}
void OneResultData::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneResultData::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
::google::protobuf::uint32 OneResultData::killnum() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.killnum)
  return killnum_;
}
void OneResultData::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.killnum)
}

// optional uint32 score = 5;
bool OneResultData::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OneResultData::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void OneResultData::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void OneResultData::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 OneResultData::score() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.score)
  return score_;
}
void OneResultData::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.score)
}

// optional uint32 reward_sugar = 6;
bool OneResultData::has_reward_sugar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OneResultData::set_has_reward_sugar() {
  _has_bits_[0] |= 0x00000020u;
}
void OneResultData::clear_has_reward_sugar() {
  _has_bits_[0] &= ~0x00000020u;
}
void OneResultData::clear_reward_sugar() {
  reward_sugar_ = 0u;
  clear_has_reward_sugar();
}
::google::protobuf::uint32 OneResultData::reward_sugar() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.reward_sugar)
  return reward_sugar_;
}
void OneResultData::set_reward_sugar(::google::protobuf::uint32 value) {
  set_has_reward_sugar();
  reward_sugar_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.reward_sugar)
}

// optional uint32 reward_cookie = 7;
bool OneResultData::has_reward_cookie() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OneResultData::set_has_reward_cookie() {
  _has_bits_[0] |= 0x00000040u;
}
void OneResultData::clear_has_reward_cookie() {
  _has_bits_[0] &= ~0x00000040u;
}
void OneResultData::clear_reward_cookie() {
  reward_cookie_ = 0u;
  clear_has_reward_cookie();
}
::google::protobuf::uint32 OneResultData::reward_cookie() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.reward_cookie)
  return reward_cookie_;
}
void OneResultData::set_reward_cookie(::google::protobuf::uint32 value) {
  set_has_reward_cookie();
  reward_cookie_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.reward_cookie)
}

// optional uint32 is_ai = 8;
bool OneResultData::has_is_ai() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OneResultData::set_has_is_ai() {
  _has_bits_[0] |= 0x00000080u;
}
void OneResultData::clear_has_is_ai() {
  _has_bits_[0] &= ~0x00000080u;
}
void OneResultData::clear_is_ai() {
  is_ai_ = 0u;
  clear_has_is_ai();
}
::google::protobuf::uint32 OneResultData::is_ai() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.is_ai)
  return is_ai_;
}
void OneResultData::set_is_ai(::google::protobuf::uint32 value) {
  set_has_is_ai();
  is_ai_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.is_ai)
}

// optional uint32 uid = 9;
bool OneResultData::has_uid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OneResultData::set_has_uid() {
  _has_bits_[0] |= 0x00000100u;
}
void OneResultData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000100u;
}
void OneResultData::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 OneResultData::uid() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.uid)
  return uid_;
}
void OneResultData::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.uid)
}

// optional uint32 avatarid = 10;
bool OneResultData::has_avatarid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OneResultData::set_has_avatarid() {
  _has_bits_[0] |= 0x00000200u;
}
void OneResultData::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000200u;
}
void OneResultData::clear_avatarid() {
  avatarid_ = 0u;
  clear_has_avatarid();
}
::google::protobuf::uint32 OneResultData::avatarid() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.avatarid)
  return avatarid_;
}
void OneResultData::set_avatarid(::google::protobuf::uint32 value) {
  set_has_avatarid();
  avatarid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.avatarid)
}

// optional uint32 header_imgurl = 11;
bool OneResultData::has_header_imgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OneResultData::set_has_header_imgurl() {
  _has_bits_[0] |= 0x00000400u;
}
void OneResultData::clear_has_header_imgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void OneResultData::clear_header_imgurl() {
  header_imgurl_ = 0u;
  clear_has_header_imgurl();
}
::google::protobuf::uint32 OneResultData::header_imgurl() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.header_imgurl)
  return header_imgurl_;
}
void OneResultData::set_header_imgurl(::google::protobuf::uint32 value) {
  set_has_header_imgurl();
  header_imgurl_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.header_imgurl)
}

// optional uint32 sex = 12;
bool OneResultData::has_sex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OneResultData::set_has_sex() {
  _has_bits_[0] |= 0x00000800u;
}
void OneResultData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000800u;
}
void OneResultData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
::google::protobuf::uint32 OneResultData::sex() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.sex)
  return sex_;
}
void OneResultData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.sex)
}

// optional uint32 rank = 13;
bool OneResultData::has_rank() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OneResultData::set_has_rank() {
  _has_bits_[0] |= 0x00001000u;
}
void OneResultData::clear_has_rank() {
  _has_bits_[0] &= ~0x00001000u;
}
void OneResultData::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 OneResultData::rank() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.rank)
  return rank_;
}
void OneResultData::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.rank)
}

// optional uint32 is_mvp = 14;
bool OneResultData::has_is_mvp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OneResultData::set_has_is_mvp() {
  _has_bits_[0] |= 0x00002000u;
}
void OneResultData::clear_has_is_mvp() {
  _has_bits_[0] &= ~0x00002000u;
}
void OneResultData::clear_is_mvp() {
  is_mvp_ = 0u;
  clear_has_is_mvp();
}
::google::protobuf::uint32 OneResultData::is_mvp() const {
  // @@protoc_insertion_point(field_get:plane.OneResultData.is_mvp)
  return is_mvp_;
}
void OneResultData::set_is_mvp(::google::protobuf::uint32 value) {
  set_has_is_mvp();
  is_mvp_ = value;
  // @@protoc_insertion_point(field_set:plane.OneResultData.is_mvp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultDataMsg::kDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultDataMsg::ResultDataMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.ResultDataMsg)
}
ResultDataMsg::ResultDataMsg(const ResultDataMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plane.ResultDataMsg)
}

void ResultDataMsg::SharedCtor() {
  _cached_size_ = 0;
}

ResultDataMsg::~ResultDataMsg() {
  // @@protoc_insertion_point(destructor:plane.ResultDataMsg)
  SharedDtor();
}

void ResultDataMsg::SharedDtor() {
}

void ResultDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultDataMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[10].descriptor;
}

const ResultDataMsg& ResultDataMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultDataMsg* ResultDataMsg::New(::google::protobuf::Arena* arena) const {
  ResultDataMsg* n = new ResultDataMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.ResultDataMsg)
  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.ResultDataMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .plane.OneResultData datas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.ResultDataMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.ResultDataMsg)
  return false;
#undef DO_
}

void ResultDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.ResultDataMsg)
  // repeated .plane.OneResultData datas = 1;
  for (unsigned int i = 0, n = this->datas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.ResultDataMsg)
}

::google::protobuf::uint8* ResultDataMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.ResultDataMsg)
  // repeated .plane.OneResultData datas = 1;
  for (unsigned int i = 0, n = this->datas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datas(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.ResultDataMsg)
  return target;
}

size_t ResultDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.ResultDataMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.OneResultData datas = 1;
  {
    unsigned int count = this->datas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datas(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.ResultDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultDataMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultDataMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.ResultDataMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.ResultDataMsg)
    MergeFrom(*source);
  }
}

void ResultDataMsg::MergeFrom(const ResultDataMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.ResultDataMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datas_.MergeFrom(from.datas_);
}

void ResultDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.ResultDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultDataMsg::CopyFrom(const ResultDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.ResultDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultDataMsg::IsInitialized() const {
  return true;
}

void ResultDataMsg::Swap(ResultDataMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultDataMsg::InternalSwap(ResultDataMsg* other) {
  datas_.UnsafeArenaSwap(&other->datas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultDataMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultDataMsg

// repeated .plane.OneResultData datas = 1;
int ResultDataMsg::datas_size() const {
  return datas_.size();
}
void ResultDataMsg::clear_datas() {
  datas_.Clear();
}
const ::plane::OneResultData& ResultDataMsg::datas(int index) const {
  // @@protoc_insertion_point(field_get:plane.ResultDataMsg.datas)
  return datas_.Get(index);
}
::plane::OneResultData* ResultDataMsg::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:plane.ResultDataMsg.datas)
  return datas_.Mutable(index);
}
::plane::OneResultData* ResultDataMsg::add_datas() {
  // @@protoc_insertion_point(field_add:plane.ResultDataMsg.datas)
  return datas_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::OneResultData >*
ResultDataMsg::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:plane.ResultDataMsg.datas)
  return &datas_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::OneResultData >&
ResultDataMsg::datas() const {
  // @@protoc_insertion_point(field_list:plane.ResultDataMsg.datas)
  return datas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaneDieMsg::kPlaneidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaneDieMsg::PlaneDieMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.PlaneDieMsg)
}
PlaneDieMsg::PlaneDieMsg(const PlaneDieMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planeid_ = from.planeid_;
  // @@protoc_insertion_point(copy_constructor:plane.PlaneDieMsg)
}

void PlaneDieMsg::SharedCtor() {
  _cached_size_ = 0;
  planeid_ = 0u;
}

PlaneDieMsg::~PlaneDieMsg() {
  // @@protoc_insertion_point(destructor:plane.PlaneDieMsg)
  SharedDtor();
}

void PlaneDieMsg::SharedDtor() {
}

void PlaneDieMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaneDieMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[11].descriptor;
}

const PlaneDieMsg& PlaneDieMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaneDieMsg* PlaneDieMsg::New(::google::protobuf::Arena* arena) const {
  PlaneDieMsg* n = new PlaneDieMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaneDieMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.PlaneDieMsg)
  planeid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlaneDieMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.PlaneDieMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 planeid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_planeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &planeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.PlaneDieMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.PlaneDieMsg)
  return false;
#undef DO_
}

void PlaneDieMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.PlaneDieMsg)
  // optional uint32 planeid = 1;
  if (has_planeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->planeid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.PlaneDieMsg)
}

::google::protobuf::uint8* PlaneDieMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.PlaneDieMsg)
  // optional uint32 planeid = 1;
  if (has_planeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->planeid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.PlaneDieMsg)
  return target;
}

size_t PlaneDieMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.PlaneDieMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 planeid = 1;
  if (has_planeid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->planeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaneDieMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.PlaneDieMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneDieMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaneDieMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.PlaneDieMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.PlaneDieMsg)
    MergeFrom(*source);
  }
}

void PlaneDieMsg::MergeFrom(const PlaneDieMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.PlaneDieMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planeid()) {
    set_planeid(from.planeid());
  }
}

void PlaneDieMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.PlaneDieMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneDieMsg::CopyFrom(const PlaneDieMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.PlaneDieMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneDieMsg::IsInitialized() const {
  return true;
}

void PlaneDieMsg::Swap(PlaneDieMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaneDieMsg::InternalSwap(PlaneDieMsg* other) {
  std::swap(planeid_, other->planeid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaneDieMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaneDieMsg

// optional uint32 planeid = 1;
bool PlaneDieMsg::has_planeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaneDieMsg::set_has_planeid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaneDieMsg::clear_has_planeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaneDieMsg::clear_planeid() {
  planeid_ = 0u;
  clear_has_planeid();
}
::google::protobuf::uint32 PlaneDieMsg::planeid() const {
  // @@protoc_insertion_point(field_get:plane.PlaneDieMsg.planeid)
  return planeid_;
}
void PlaneDieMsg::set_planeid(::google::protobuf::uint32 value) {
  set_has_planeid();
  planeid_ = value;
  // @@protoc_insertion_point(field_set:plane.PlaneDieMsg.planeid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameHitBcMsg::kHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameHitBcMsg::FrameHitBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.FrameHitBcMsg)
}
FrameHitBcMsg::FrameHitBcMsg(const FrameHitBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plane.FrameHitBcMsg)
}

void FrameHitBcMsg::SharedCtor() {
  _cached_size_ = 0;
}

FrameHitBcMsg::~FrameHitBcMsg() {
  // @@protoc_insertion_point(destructor:plane.FrameHitBcMsg)
  SharedDtor();
}

void FrameHitBcMsg::SharedDtor() {
}

void FrameHitBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameHitBcMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[12].descriptor;
}

const FrameHitBcMsg& FrameHitBcMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameHitBcMsg* FrameHitBcMsg::New(::google::protobuf::Arena* arena) const {
  FrameHitBcMsg* n = new FrameHitBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameHitBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.FrameHitBcMsg)
  hits_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameHitBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.FrameHitBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .plane.OneBulletGroupHit hits = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hits()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.FrameHitBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.FrameHitBcMsg)
  return false;
#undef DO_
}

void FrameHitBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.FrameHitBcMsg)
  // repeated .plane.OneBulletGroupHit hits = 1;
  for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.FrameHitBcMsg)
}

::google::protobuf::uint8* FrameHitBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.FrameHitBcMsg)
  // repeated .plane.OneBulletGroupHit hits = 1;
  for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->hits(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.FrameHitBcMsg)
  return target;
}

size_t FrameHitBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.FrameHitBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.OneBulletGroupHit hits = 1;
  {
    unsigned int count = this->hits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hits(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameHitBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.FrameHitBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameHitBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameHitBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.FrameHitBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.FrameHitBcMsg)
    MergeFrom(*source);
  }
}

void FrameHitBcMsg::MergeFrom(const FrameHitBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.FrameHitBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hits_.MergeFrom(from.hits_);
}

void FrameHitBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.FrameHitBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameHitBcMsg::CopyFrom(const FrameHitBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.FrameHitBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameHitBcMsg::IsInitialized() const {
  return true;
}

void FrameHitBcMsg::Swap(FrameHitBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameHitBcMsg::InternalSwap(FrameHitBcMsg* other) {
  hits_.UnsafeArenaSwap(&other->hits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameHitBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameHitBcMsg

// repeated .plane.OneBulletGroupHit hits = 1;
int FrameHitBcMsg::hits_size() const {
  return hits_.size();
}
void FrameHitBcMsg::clear_hits() {
  hits_.Clear();
}
const ::plane::OneBulletGroupHit& FrameHitBcMsg::hits(int index) const {
  // @@protoc_insertion_point(field_get:plane.FrameHitBcMsg.hits)
  return hits_.Get(index);
}
::plane::OneBulletGroupHit* FrameHitBcMsg::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:plane.FrameHitBcMsg.hits)
  return hits_.Mutable(index);
}
::plane::OneBulletGroupHit* FrameHitBcMsg::add_hits() {
  // @@protoc_insertion_point(field_add:plane.FrameHitBcMsg.hits)
  return hits_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::OneBulletGroupHit >*
FrameHitBcMsg::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:plane.FrameHitBcMsg.hits)
  return &hits_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::OneBulletGroupHit >&
FrameHitBcMsg::hits() const {
  // @@protoc_insertion_point(field_list:plane.FrameHitBcMsg.hits)
  return hits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneBulletGroupHit::kBulletgroupidFieldNumber;
const int OneBulletGroupHit::kEneryhitsFieldNumber;
const int OneBulletGroupHit::kPlanehitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneBulletGroupHit::OneBulletGroupHit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.OneBulletGroupHit)
}
OneBulletGroupHit::OneBulletGroupHit(const OneBulletGroupHit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      eneryhits_(from.eneryhits_),
      planehits_(from.planehits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bulletgroupid_ = from.bulletgroupid_;
  // @@protoc_insertion_point(copy_constructor:plane.OneBulletGroupHit)
}

void OneBulletGroupHit::SharedCtor() {
  _cached_size_ = 0;
  bulletgroupid_ = 0u;
}

OneBulletGroupHit::~OneBulletGroupHit() {
  // @@protoc_insertion_point(destructor:plane.OneBulletGroupHit)
  SharedDtor();
}

void OneBulletGroupHit::SharedDtor() {
}

void OneBulletGroupHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneBulletGroupHit::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[13].descriptor;
}

const OneBulletGroupHit& OneBulletGroupHit::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneBulletGroupHit* OneBulletGroupHit::New(::google::protobuf::Arena* arena) const {
  OneBulletGroupHit* n = new OneBulletGroupHit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneBulletGroupHit::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.OneBulletGroupHit)
  eneryhits_.Clear();
  planehits_.Clear();
  bulletgroupid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneBulletGroupHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.OneBulletGroupHit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bulletgroupid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_bulletgroupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletgroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .plane.OneEnergyHit eneryhits = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_eneryhits()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .plane.OnePlaneHit planehits = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_planehits()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.OneBulletGroupHit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.OneBulletGroupHit)
  return false;
#undef DO_
}

void OneBulletGroupHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.OneBulletGroupHit)
  // optional uint32 bulletgroupid = 1;
  if (has_bulletgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bulletgroupid(), output);
  }

  // repeated .plane.OneEnergyHit eneryhits = 2;
  for (unsigned int i = 0, n = this->eneryhits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eneryhits(i), output);
  }

  // repeated .plane.OnePlaneHit planehits = 3;
  for (unsigned int i = 0, n = this->planehits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planehits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.OneBulletGroupHit)
}

::google::protobuf::uint8* OneBulletGroupHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.OneBulletGroupHit)
  // optional uint32 bulletgroupid = 1;
  if (has_bulletgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bulletgroupid(), target);
  }

  // repeated .plane.OneEnergyHit eneryhits = 2;
  for (unsigned int i = 0, n = this->eneryhits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->eneryhits(i), false, target);
  }

  // repeated .plane.OnePlaneHit planehits = 3;
  for (unsigned int i = 0, n = this->planehits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->planehits(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.OneBulletGroupHit)
  return target;
}

size_t OneBulletGroupHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.OneBulletGroupHit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.OneEnergyHit eneryhits = 2;
  {
    unsigned int count = this->eneryhits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eneryhits(i));
    }
  }

  // repeated .plane.OnePlaneHit planehits = 3;
  {
    unsigned int count = this->planehits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planehits(i));
    }
  }

  // optional uint32 bulletgroupid = 1;
  if (has_bulletgroupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bulletgroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneBulletGroupHit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.OneBulletGroupHit)
  GOOGLE_DCHECK_NE(&from, this);
  const OneBulletGroupHit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneBulletGroupHit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.OneBulletGroupHit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.OneBulletGroupHit)
    MergeFrom(*source);
  }
}

void OneBulletGroupHit::MergeFrom(const OneBulletGroupHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.OneBulletGroupHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eneryhits_.MergeFrom(from.eneryhits_);
  planehits_.MergeFrom(from.planehits_);
  if (from.has_bulletgroupid()) {
    set_bulletgroupid(from.bulletgroupid());
  }
}

void OneBulletGroupHit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.OneBulletGroupHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneBulletGroupHit::CopyFrom(const OneBulletGroupHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.OneBulletGroupHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBulletGroupHit::IsInitialized() const {
  return true;
}

void OneBulletGroupHit::Swap(OneBulletGroupHit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneBulletGroupHit::InternalSwap(OneBulletGroupHit* other) {
  eneryhits_.UnsafeArenaSwap(&other->eneryhits_);
  planehits_.UnsafeArenaSwap(&other->planehits_);
  std::swap(bulletgroupid_, other->bulletgroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneBulletGroupHit::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneBulletGroupHit

// optional uint32 bulletgroupid = 1;
bool OneBulletGroupHit::has_bulletgroupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneBulletGroupHit::set_has_bulletgroupid() {
  _has_bits_[0] |= 0x00000001u;
}
void OneBulletGroupHit::clear_has_bulletgroupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneBulletGroupHit::clear_bulletgroupid() {
  bulletgroupid_ = 0u;
  clear_has_bulletgroupid();
}
::google::protobuf::uint32 OneBulletGroupHit::bulletgroupid() const {
  // @@protoc_insertion_point(field_get:plane.OneBulletGroupHit.bulletgroupid)
  return bulletgroupid_;
}
void OneBulletGroupHit::set_bulletgroupid(::google::protobuf::uint32 value) {
  set_has_bulletgroupid();
  bulletgroupid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneBulletGroupHit.bulletgroupid)
}

// repeated .plane.OneEnergyHit eneryhits = 2;
int OneBulletGroupHit::eneryhits_size() const {
  return eneryhits_.size();
}
void OneBulletGroupHit::clear_eneryhits() {
  eneryhits_.Clear();
}
const ::plane::OneEnergyHit& OneBulletGroupHit::eneryhits(int index) const {
  // @@protoc_insertion_point(field_get:plane.OneBulletGroupHit.eneryhits)
  return eneryhits_.Get(index);
}
::plane::OneEnergyHit* OneBulletGroupHit::mutable_eneryhits(int index) {
  // @@protoc_insertion_point(field_mutable:plane.OneBulletGroupHit.eneryhits)
  return eneryhits_.Mutable(index);
}
::plane::OneEnergyHit* OneBulletGroupHit::add_eneryhits() {
  // @@protoc_insertion_point(field_add:plane.OneBulletGroupHit.eneryhits)
  return eneryhits_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::OneEnergyHit >*
OneBulletGroupHit::mutable_eneryhits() {
  // @@protoc_insertion_point(field_mutable_list:plane.OneBulletGroupHit.eneryhits)
  return &eneryhits_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::OneEnergyHit >&
OneBulletGroupHit::eneryhits() const {
  // @@protoc_insertion_point(field_list:plane.OneBulletGroupHit.eneryhits)
  return eneryhits_;
}

// repeated .plane.OnePlaneHit planehits = 3;
int OneBulletGroupHit::planehits_size() const {
  return planehits_.size();
}
void OneBulletGroupHit::clear_planehits() {
  planehits_.Clear();
}
const ::plane::OnePlaneHit& OneBulletGroupHit::planehits(int index) const {
  // @@protoc_insertion_point(field_get:plane.OneBulletGroupHit.planehits)
  return planehits_.Get(index);
}
::plane::OnePlaneHit* OneBulletGroupHit::mutable_planehits(int index) {
  // @@protoc_insertion_point(field_mutable:plane.OneBulletGroupHit.planehits)
  return planehits_.Mutable(index);
}
::plane::OnePlaneHit* OneBulletGroupHit::add_planehits() {
  // @@protoc_insertion_point(field_add:plane.OneBulletGroupHit.planehits)
  return planehits_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::OnePlaneHit >*
OneBulletGroupHit::mutable_planehits() {
  // @@protoc_insertion_point(field_mutable_list:plane.OneBulletGroupHit.planehits)
  return &planehits_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::OnePlaneHit >&
OneBulletGroupHit::planehits() const {
  // @@protoc_insertion_point(field_list:plane.OneBulletGroupHit.planehits)
  return planehits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneEnergyHit::kBulletidFieldNumber;
const int OneEnergyHit::kIdFieldNumber;
const int OneEnergyHit::kTypeFieldNumber;
const int OneEnergyHit::kPlayeridFieldNumber;
const int OneEnergyHit::kPlaneidFieldNumber;
const int OneEnergyHit::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneEnergyHit::OneEnergyHit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.OneEnergyHit)
}
OneEnergyHit::OneEnergyHit(const OneEnergyHit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bulletid_, &from.bulletid_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&bulletid_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:plane.OneEnergyHit)
}

void OneEnergyHit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bulletid_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&bulletid_) + sizeof(speed_));
}

OneEnergyHit::~OneEnergyHit() {
  // @@protoc_insertion_point(destructor:plane.OneEnergyHit)
  SharedDtor();
}

void OneEnergyHit::SharedDtor() {
}

void OneEnergyHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneEnergyHit::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[14].descriptor;
}

const OneEnergyHit& OneEnergyHit::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneEnergyHit* OneEnergyHit::New(::google::protobuf::Arena* arena) const {
  OneEnergyHit* n = new OneEnergyHit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneEnergyHit::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.OneEnergyHit)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&bulletid_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&bulletid_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneEnergyHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.OneEnergyHit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bulletid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_bulletid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playerid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 planeid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_planeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &planeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.OneEnergyHit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.OneEnergyHit)
  return false;
#undef DO_
}

void OneEnergyHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.OneEnergyHit)
  // optional uint32 bulletid = 1;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bulletid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // optional uint32 planeid = 5;
  if (has_planeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->planeid(), output);
  }

  // optional uint32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.OneEnergyHit)
}

::google::protobuf::uint8* OneEnergyHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.OneEnergyHit)
  // optional uint32 bulletid = 1;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bulletid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  // optional uint32 planeid = 5;
  if (has_planeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->planeid(), target);
  }

  // optional uint32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.OneEnergyHit)
  return target;
}

size_t OneEnergyHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.OneEnergyHit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 bulletid = 1;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 planeid = 5;
    if (has_planeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->planeid());
    }

    // optional uint32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneEnergyHit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.OneEnergyHit)
  GOOGLE_DCHECK_NE(&from, this);
  const OneEnergyHit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneEnergyHit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.OneEnergyHit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.OneEnergyHit)
    MergeFrom(*source);
  }
}

void OneEnergyHit::MergeFrom(const OneEnergyHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.OneEnergyHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_planeid()) {
      set_planeid(from.planeid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
}

void OneEnergyHit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.OneEnergyHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneEnergyHit::CopyFrom(const OneEnergyHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.OneEnergyHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneEnergyHit::IsInitialized() const {
  return true;
}

void OneEnergyHit::Swap(OneEnergyHit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneEnergyHit::InternalSwap(OneEnergyHit* other) {
  std::swap(bulletid_, other->bulletid_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(playerid_, other->playerid_);
  std::swap(planeid_, other->planeid_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneEnergyHit::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneEnergyHit

// optional uint32 bulletid = 1;
bool OneEnergyHit::has_bulletid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneEnergyHit::set_has_bulletid() {
  _has_bits_[0] |= 0x00000001u;
}
void OneEnergyHit::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneEnergyHit::clear_bulletid() {
  bulletid_ = 0u;
  clear_has_bulletid();
}
::google::protobuf::uint32 OneEnergyHit::bulletid() const {
  // @@protoc_insertion_point(field_get:plane.OneEnergyHit.bulletid)
  return bulletid_;
}
void OneEnergyHit::set_bulletid(::google::protobuf::uint32 value) {
  set_has_bulletid();
  bulletid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneEnergyHit.bulletid)
}

// optional uint32 id = 2;
bool OneEnergyHit::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneEnergyHit::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OneEnergyHit::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneEnergyHit::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 OneEnergyHit::id() const {
  // @@protoc_insertion_point(field_get:plane.OneEnergyHit.id)
  return id_;
}
void OneEnergyHit::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:plane.OneEnergyHit.id)
}

// optional uint32 type = 3;
bool OneEnergyHit::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneEnergyHit::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void OneEnergyHit::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneEnergyHit::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 OneEnergyHit::type() const {
  // @@protoc_insertion_point(field_get:plane.OneEnergyHit.type)
  return type_;
}
void OneEnergyHit::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:plane.OneEnergyHit.type)
}

// optional uint32 playerid = 4;
bool OneEnergyHit::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneEnergyHit::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
void OneEnergyHit::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneEnergyHit::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 OneEnergyHit::playerid() const {
  // @@protoc_insertion_point(field_get:plane.OneEnergyHit.playerid)
  return playerid_;
}
void OneEnergyHit::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneEnergyHit.playerid)
}

// optional uint32 planeid = 5;
bool OneEnergyHit::has_planeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OneEnergyHit::set_has_planeid() {
  _has_bits_[0] |= 0x00000010u;
}
void OneEnergyHit::clear_has_planeid() {
  _has_bits_[0] &= ~0x00000010u;
}
void OneEnergyHit::clear_planeid() {
  planeid_ = 0u;
  clear_has_planeid();
}
::google::protobuf::uint32 OneEnergyHit::planeid() const {
  // @@protoc_insertion_point(field_get:plane.OneEnergyHit.planeid)
  return planeid_;
}
void OneEnergyHit::set_planeid(::google::protobuf::uint32 value) {
  set_has_planeid();
  planeid_ = value;
  // @@protoc_insertion_point(field_set:plane.OneEnergyHit.planeid)
}

// optional uint32 speed = 6;
bool OneEnergyHit::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OneEnergyHit::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void OneEnergyHit::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void OneEnergyHit::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 OneEnergyHit::speed() const {
  // @@protoc_insertion_point(field_get:plane.OneEnergyHit.speed)
  return speed_;
}
void OneEnergyHit::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:plane.OneEnergyHit.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnePlaneHit::kBulletidFieldNumber;
const int OnePlaneHit::kHitPlayeridFieldNumber;
const int OnePlaneHit::kHitPlaneidFieldNumber;
const int OnePlaneHit::kOwnerspeedFieldNumber;
const int OnePlaneHit::kAttackeridFieldNumber;
const int OnePlaneHit::kAddplaneidFieldNumber;
const int OnePlaneHit::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnePlaneHit::OnePlaneHit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.OnePlaneHit)
}
OnePlaneHit::OnePlaneHit(const OnePlaneHit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bulletid_, &from.bulletid_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&bulletid_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:plane.OnePlaneHit)
}

void OnePlaneHit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bulletid_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&bulletid_) + sizeof(speed_));
}

OnePlaneHit::~OnePlaneHit() {
  // @@protoc_insertion_point(destructor:plane.OnePlaneHit)
  SharedDtor();
}

void OnePlaneHit::SharedDtor() {
}

void OnePlaneHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnePlaneHit::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[15].descriptor;
}

const OnePlaneHit& OnePlaneHit::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnePlaneHit* OnePlaneHit::New(::google::protobuf::Arena* arena) const {
  OnePlaneHit* n = new OnePlaneHit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnePlaneHit::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.OnePlaneHit)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&bulletid_, 0, reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&bulletid_) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OnePlaneHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.OnePlaneHit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bulletid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_bulletid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hit_playerid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_hit_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hit_planeid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_hit_planeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_planeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ownerspeed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_ownerspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attackerid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_attackerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 addplaneid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_addplaneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addplaneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.OnePlaneHit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.OnePlaneHit)
  return false;
#undef DO_
}

void OnePlaneHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.OnePlaneHit)
  // optional uint32 bulletid = 1;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bulletid(), output);
  }

  // optional uint32 hit_playerid = 2;
  if (has_hit_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hit_playerid(), output);
  }

  // optional uint32 hit_planeid = 3;
  if (has_hit_planeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hit_planeid(), output);
  }

  // optional uint32 ownerspeed = 4;
  if (has_ownerspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ownerspeed(), output);
  }

  // optional uint32 attackerid = 5;
  if (has_attackerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attackerid(), output);
  }

  // optional uint32 addplaneid = 6;
  if (has_addplaneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addplaneid(), output);
  }

  // optional uint32 speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.OnePlaneHit)
}

::google::protobuf::uint8* OnePlaneHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.OnePlaneHit)
  // optional uint32 bulletid = 1;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bulletid(), target);
  }

  // optional uint32 hit_playerid = 2;
  if (has_hit_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hit_playerid(), target);
  }

  // optional uint32 hit_planeid = 3;
  if (has_hit_planeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hit_planeid(), target);
  }

  // optional uint32 ownerspeed = 4;
  if (has_ownerspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ownerspeed(), target);
  }

  // optional uint32 attackerid = 5;
  if (has_attackerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attackerid(), target);
  }

  // optional uint32 addplaneid = 6;
  if (has_addplaneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addplaneid(), target);
  }

  // optional uint32 speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.OnePlaneHit)
  return target;
}

size_t OnePlaneHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.OnePlaneHit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 bulletid = 1;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletid());
    }

    // optional uint32 hit_playerid = 2;
    if (has_hit_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_playerid());
    }

    // optional uint32 hit_planeid = 3;
    if (has_hit_planeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_planeid());
    }

    // optional uint32 ownerspeed = 4;
    if (has_ownerspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerspeed());
    }

    // optional uint32 attackerid = 5;
    if (has_attackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackerid());
    }

    // optional uint32 addplaneid = 6;
    if (has_addplaneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addplaneid());
    }

    // optional uint32 speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnePlaneHit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.OnePlaneHit)
  GOOGLE_DCHECK_NE(&from, this);
  const OnePlaneHit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnePlaneHit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.OnePlaneHit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.OnePlaneHit)
    MergeFrom(*source);
  }
}

void OnePlaneHit::MergeFrom(const OnePlaneHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.OnePlaneHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_hit_playerid()) {
      set_hit_playerid(from.hit_playerid());
    }
    if (from.has_hit_planeid()) {
      set_hit_planeid(from.hit_planeid());
    }
    if (from.has_ownerspeed()) {
      set_ownerspeed(from.ownerspeed());
    }
    if (from.has_attackerid()) {
      set_attackerid(from.attackerid());
    }
    if (from.has_addplaneid()) {
      set_addplaneid(from.addplaneid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
}

void OnePlaneHit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.OnePlaneHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnePlaneHit::CopyFrom(const OnePlaneHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.OnePlaneHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnePlaneHit::IsInitialized() const {
  return true;
}

void OnePlaneHit::Swap(OnePlaneHit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnePlaneHit::InternalSwap(OnePlaneHit* other) {
  std::swap(bulletid_, other->bulletid_);
  std::swap(hit_playerid_, other->hit_playerid_);
  std::swap(hit_planeid_, other->hit_planeid_);
  std::swap(ownerspeed_, other->ownerspeed_);
  std::swap(attackerid_, other->attackerid_);
  std::swap(addplaneid_, other->addplaneid_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnePlaneHit::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnePlaneHit

// optional uint32 bulletid = 1;
bool OnePlaneHit::has_bulletid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OnePlaneHit::set_has_bulletid() {
  _has_bits_[0] |= 0x00000001u;
}
void OnePlaneHit::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OnePlaneHit::clear_bulletid() {
  bulletid_ = 0u;
  clear_has_bulletid();
}
::google::protobuf::uint32 OnePlaneHit::bulletid() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.bulletid)
  return bulletid_;
}
void OnePlaneHit::set_bulletid(::google::protobuf::uint32 value) {
  set_has_bulletid();
  bulletid_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.bulletid)
}

// optional uint32 hit_playerid = 2;
bool OnePlaneHit::has_hit_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OnePlaneHit::set_has_hit_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
void OnePlaneHit::clear_has_hit_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OnePlaneHit::clear_hit_playerid() {
  hit_playerid_ = 0u;
  clear_has_hit_playerid();
}
::google::protobuf::uint32 OnePlaneHit::hit_playerid() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.hit_playerid)
  return hit_playerid_;
}
void OnePlaneHit::set_hit_playerid(::google::protobuf::uint32 value) {
  set_has_hit_playerid();
  hit_playerid_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.hit_playerid)
}

// optional uint32 hit_planeid = 3;
bool OnePlaneHit::has_hit_planeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OnePlaneHit::set_has_hit_planeid() {
  _has_bits_[0] |= 0x00000004u;
}
void OnePlaneHit::clear_has_hit_planeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void OnePlaneHit::clear_hit_planeid() {
  hit_planeid_ = 0u;
  clear_has_hit_planeid();
}
::google::protobuf::uint32 OnePlaneHit::hit_planeid() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.hit_planeid)
  return hit_planeid_;
}
void OnePlaneHit::set_hit_planeid(::google::protobuf::uint32 value) {
  set_has_hit_planeid();
  hit_planeid_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.hit_planeid)
}

// optional uint32 ownerspeed = 4;
bool OnePlaneHit::has_ownerspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OnePlaneHit::set_has_ownerspeed() {
  _has_bits_[0] |= 0x00000008u;
}
void OnePlaneHit::clear_has_ownerspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
void OnePlaneHit::clear_ownerspeed() {
  ownerspeed_ = 0u;
  clear_has_ownerspeed();
}
::google::protobuf::uint32 OnePlaneHit::ownerspeed() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.ownerspeed)
  return ownerspeed_;
}
void OnePlaneHit::set_ownerspeed(::google::protobuf::uint32 value) {
  set_has_ownerspeed();
  ownerspeed_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.ownerspeed)
}

// optional uint32 attackerid = 5;
bool OnePlaneHit::has_attackerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OnePlaneHit::set_has_attackerid() {
  _has_bits_[0] |= 0x00000010u;
}
void OnePlaneHit::clear_has_attackerid() {
  _has_bits_[0] &= ~0x00000010u;
}
void OnePlaneHit::clear_attackerid() {
  attackerid_ = 0u;
  clear_has_attackerid();
}
::google::protobuf::uint32 OnePlaneHit::attackerid() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.attackerid)
  return attackerid_;
}
void OnePlaneHit::set_attackerid(::google::protobuf::uint32 value) {
  set_has_attackerid();
  attackerid_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.attackerid)
}

// optional uint32 addplaneid = 6;
bool OnePlaneHit::has_addplaneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OnePlaneHit::set_has_addplaneid() {
  _has_bits_[0] |= 0x00000020u;
}
void OnePlaneHit::clear_has_addplaneid() {
  _has_bits_[0] &= ~0x00000020u;
}
void OnePlaneHit::clear_addplaneid() {
  addplaneid_ = 0u;
  clear_has_addplaneid();
}
::google::protobuf::uint32 OnePlaneHit::addplaneid() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.addplaneid)
  return addplaneid_;
}
void OnePlaneHit::set_addplaneid(::google::protobuf::uint32 value) {
  set_has_addplaneid();
  addplaneid_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.addplaneid)
}

// optional uint32 speed = 7;
bool OnePlaneHit::has_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OnePlaneHit::set_has_speed() {
  _has_bits_[0] |= 0x00000040u;
}
void OnePlaneHit::clear_has_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
void OnePlaneHit::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 OnePlaneHit::speed() const {
  // @@protoc_insertion_point(field_get:plane.OnePlaneHit.speed)
  return speed_;
}
void OnePlaneHit::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:plane.OnePlaneHit.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchAddFoodBcMsg::kFoodsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchAddFoodBcMsg::BatchAddFoodBcMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.BatchAddFoodBcMsg)
}
BatchAddFoodBcMsg::BatchAddFoodBcMsg(const BatchAddFoodBcMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      foods_(from.foods_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plane.BatchAddFoodBcMsg)
}

void BatchAddFoodBcMsg::SharedCtor() {
  _cached_size_ = 0;
}

BatchAddFoodBcMsg::~BatchAddFoodBcMsg() {
  // @@protoc_insertion_point(destructor:plane.BatchAddFoodBcMsg)
  SharedDtor();
}

void BatchAddFoodBcMsg::SharedDtor() {
}

void BatchAddFoodBcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchAddFoodBcMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[16].descriptor;
}

const BatchAddFoodBcMsg& BatchAddFoodBcMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchAddFoodBcMsg* BatchAddFoodBcMsg::New(::google::protobuf::Arena* arena) const {
  BatchAddFoodBcMsg* n = new BatchAddFoodBcMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchAddFoodBcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.BatchAddFoodBcMsg)
  foods_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchAddFoodBcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.BatchAddFoodBcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .plane.FoodMsg foods = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_foods()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.BatchAddFoodBcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.BatchAddFoodBcMsg)
  return false;
#undef DO_
}

void BatchAddFoodBcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.BatchAddFoodBcMsg)
  // repeated .plane.FoodMsg foods = 1;
  for (unsigned int i = 0, n = this->foods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->foods(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.BatchAddFoodBcMsg)
}

::google::protobuf::uint8* BatchAddFoodBcMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.BatchAddFoodBcMsg)
  // repeated .plane.FoodMsg foods = 1;
  for (unsigned int i = 0, n = this->foods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->foods(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.BatchAddFoodBcMsg)
  return target;
}

size_t BatchAddFoodBcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.BatchAddFoodBcMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .plane.FoodMsg foods = 1;
  {
    unsigned int count = this->foods_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foods(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchAddFoodBcMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.BatchAddFoodBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAddFoodBcMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchAddFoodBcMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.BatchAddFoodBcMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.BatchAddFoodBcMsg)
    MergeFrom(*source);
  }
}

void BatchAddFoodBcMsg::MergeFrom(const BatchAddFoodBcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.BatchAddFoodBcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foods_.MergeFrom(from.foods_);
}

void BatchAddFoodBcMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.BatchAddFoodBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAddFoodBcMsg::CopyFrom(const BatchAddFoodBcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.BatchAddFoodBcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAddFoodBcMsg::IsInitialized() const {
  return true;
}

void BatchAddFoodBcMsg::Swap(BatchAddFoodBcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchAddFoodBcMsg::InternalSwap(BatchAddFoodBcMsg* other) {
  foods_.UnsafeArenaSwap(&other->foods_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchAddFoodBcMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchAddFoodBcMsg

// repeated .plane.FoodMsg foods = 1;
int BatchAddFoodBcMsg::foods_size() const {
  return foods_.size();
}
void BatchAddFoodBcMsg::clear_foods() {
  foods_.Clear();
}
const ::plane::FoodMsg& BatchAddFoodBcMsg::foods(int index) const {
  // @@protoc_insertion_point(field_get:plane.BatchAddFoodBcMsg.foods)
  return foods_.Get(index);
}
::plane::FoodMsg* BatchAddFoodBcMsg::mutable_foods(int index) {
  // @@protoc_insertion_point(field_mutable:plane.BatchAddFoodBcMsg.foods)
  return foods_.Mutable(index);
}
::plane::FoodMsg* BatchAddFoodBcMsg::add_foods() {
  // @@protoc_insertion_point(field_add:plane.BatchAddFoodBcMsg.foods)
  return foods_.Add();
}
::google::protobuf::RepeatedPtrField< ::plane::FoodMsg >*
BatchAddFoodBcMsg::mutable_foods() {
  // @@protoc_insertion_point(field_mutable_list:plane.BatchAddFoodBcMsg.foods)
  return &foods_;
}
const ::google::protobuf::RepeatedPtrField< ::plane::FoodMsg >&
BatchAddFoodBcMsg::foods() const {
  // @@protoc_insertion_point(field_list:plane.BatchAddFoodBcMsg.foods)
  return foods_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UidMsg::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UidMsg::UidMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.UidMsg)
}
UidMsg::UidMsg(const UidMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:plane.UidMsg)
}

void UidMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
}

UidMsg::~UidMsg() {
  // @@protoc_insertion_point(destructor:plane.UidMsg)
  SharedDtor();
}

void UidMsg::SharedDtor() {
}

void UidMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UidMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[17].descriptor;
}

const UidMsg& UidMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

UidMsg* UidMsg::New(::google::protobuf::Arena* arena) const {
  UidMsg* n = new UidMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UidMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.UidMsg)
  uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UidMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.UidMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.UidMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.UidMsg)
  return false;
#undef DO_
}

void UidMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.UidMsg)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.UidMsg)
}

::google::protobuf::uint8* UidMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.UidMsg)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.UidMsg)
  return target;
}

size_t UidMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.UidMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UidMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.UidMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const UidMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UidMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.UidMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.UidMsg)
    MergeFrom(*source);
  }
}

void UidMsg::MergeFrom(const UidMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.UidMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void UidMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.UidMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidMsg::CopyFrom(const UidMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.UidMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidMsg::IsInitialized() const {
  return true;
}

void UidMsg::Swap(UidMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UidMsg::InternalSwap(UidMsg* other) {
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UidMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UidMsg

// optional uint32 uid = 1;
bool UidMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UidMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void UidMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UidMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 UidMsg::uid() const {
  // @@protoc_insertion_point(field_get:plane.UidMsg.uid)
  return uid_;
}
void UidMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:plane.UidMsg.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UidListMsg::kUidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UidListMsg::UidListMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:plane.UidListMsg)
}
UidListMsg::UidListMsg(const UidListMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plane.UidListMsg)
}

void UidListMsg::SharedCtor() {
  _cached_size_ = 0;
}

UidListMsg::~UidListMsg() {
  // @@protoc_insertion_point(destructor:plane.UidListMsg)
  SharedDtor();
}

void UidListMsg::SharedDtor() {
}

void UidListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UidListMsg::descriptor() {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[18].descriptor;
}

const UidListMsg& UidListMsg::default_instance() {
  protobuf_plane_2fplane_5fmsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

UidListMsg* UidListMsg::New(::google::protobuf::Arena* arena) const {
  UidListMsg* n = new UidListMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UidListMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:plane.UidListMsg)
  uids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UidListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plane.UidListMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_uids())));
        } else if (static_cast<::google::protobuf::uint8>(tag) ==
                   static_cast<::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plane.UidListMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plane.UidListMsg)
  return false;
#undef DO_
}

void UidListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plane.UidListMsg)
  // repeated uint32 uids = 1;
  for (int i = 0, n = this->uids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plane.UidListMsg)
}

::google::protobuf::uint8* UidListMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:plane.UidListMsg)
  // repeated uint32 uids = 1;
  for (int i = 0, n = this->uids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plane.UidListMsg)
  return target;
}

size_t UidListMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plane.UidListMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 uids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->uids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UidListMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plane.UidListMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const UidListMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UidListMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plane.UidListMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plane.UidListMsg)
    MergeFrom(*source);
  }
}

void UidListMsg::MergeFrom(const UidListMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plane.UidListMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uids_.MergeFrom(from.uids_);
}

void UidListMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plane.UidListMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidListMsg::CopyFrom(const UidListMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plane.UidListMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidListMsg::IsInitialized() const {
  return true;
}

void UidListMsg::Swap(UidListMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UidListMsg::InternalSwap(UidListMsg* other) {
  uids_.UnsafeArenaSwap(&other->uids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UidListMsg::GetMetadata() const {
  protobuf_plane_2fplane_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plane_2fplane_5fmsg_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UidListMsg

// repeated uint32 uids = 1;
int UidListMsg::uids_size() const {
  return uids_.size();
}
void UidListMsg::clear_uids() {
  uids_.Clear();
}
::google::protobuf::uint32 UidListMsg::uids(int index) const {
  // @@protoc_insertion_point(field_get:plane.UidListMsg.uids)
  return uids_.Get(index);
}
void UidListMsg::set_uids(int index, ::google::protobuf::uint32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:plane.UidListMsg.uids)
}
void UidListMsg::add_uids(::google::protobuf::uint32 value) {
  uids_.Add(value);
  // @@protoc_insertion_point(field_add:plane.UidListMsg.uids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UidListMsg::uids() const {
  // @@protoc_insertion_point(field_list:plane.UidListMsg.uids)
  return uids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UidListMsg::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:plane.UidListMsg.uids)
  return &uids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace plane

// @@protoc_insertion_point(global_scope)
