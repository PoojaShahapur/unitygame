// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hall {
class RoomSimpleInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomSimpleInfo> {
} _RoomSimpleInfo_default_instance_;
class HallListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HallListResponse> {
} _HallListResponse_default_instance_;

namespace protobuf_hall_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSimpleInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSimpleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSimpleInfo, room_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSimpleInfo, room_left_can_in_num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallListResponse, room_list_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(RoomSimpleInfo)},
  { 8, 13, sizeof(HallListResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomSimpleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HallListResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hall.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _RoomSimpleInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HallListResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::rpc::protobuf_empty_5fmsg_2eproto::InitDefaults();
  _RoomSimpleInfo_default_instance_.DefaultConstruct();
  _HallListResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nhall.proto\022\004hall\032\017empty_msg.proto\"@\n\016R"
      "oomSimpleInfo\022\020\n\010room_key\030\001 \001(\r\022\034\n\024room_"
      "left_can_in_num\030\002 \001(\r\";\n\020HallListRespons"
      "e\022\'\n\troom_list\030\001 \003(\0132\024.hall.RoomSimpleIn"
      "fo29\n\004Hall\0221\n\010HallList\022\r.rpc.EmptyMsg\032\026."
      "hall.HallListResponse"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hall.proto", &protobuf_RegisterTypes);
  ::rpc::protobuf_empty_5fmsg_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_hall_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomSimpleInfo::kRoomKeyFieldNumber;
const int RoomSimpleInfo::kRoomLeftCanInNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomSimpleInfo::RoomSimpleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hall.RoomSimpleInfo)
}
RoomSimpleInfo::RoomSimpleInfo(const RoomSimpleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_key_, &from.room_key_,
    reinterpret_cast<char*>(&room_left_can_in_num_) -
    reinterpret_cast<char*>(&room_key_) + sizeof(room_left_can_in_num_));
  // @@protoc_insertion_point(copy_constructor:hall.RoomSimpleInfo)
}

void RoomSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&room_key_, 0, reinterpret_cast<char*>(&room_left_can_in_num_) -
    reinterpret_cast<char*>(&room_key_) + sizeof(room_left_can_in_num_));
}

RoomSimpleInfo::~RoomSimpleInfo() {
  // @@protoc_insertion_point(destructor:hall.RoomSimpleInfo)
  SharedDtor();
}

void RoomSimpleInfo::SharedDtor() {
}

void RoomSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomSimpleInfo::descriptor() {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hall_2eproto::file_level_metadata[0].descriptor;
}

const RoomSimpleInfo& RoomSimpleInfo::default_instance() {
  protobuf_hall_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomSimpleInfo* RoomSimpleInfo::New(::google::protobuf::Arena* arena) const {
  RoomSimpleInfo* n = new RoomSimpleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomSimpleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hall.RoomSimpleInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&room_key_, 0, reinterpret_cast<char*>(&room_left_can_in_num_) -
      reinterpret_cast<char*>(&room_key_) + sizeof(room_left_can_in_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hall.RoomSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_room_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 room_left_can_in_num = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u)) {
          set_has_room_left_can_in_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_left_can_in_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hall.RoomSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hall.RoomSimpleInfo)
  return false;
#undef DO_
}

void RoomSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hall.RoomSimpleInfo)
  // optional uint32 room_key = 1;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_key(), output);
  }

  // optional uint32 room_left_can_in_num = 2;
  if (has_room_left_can_in_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_left_can_in_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hall.RoomSimpleInfo)
}

::google::protobuf::uint8* RoomSimpleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hall.RoomSimpleInfo)
  // optional uint32 room_key = 1;
  if (has_room_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_key(), target);
  }

  // optional uint32 room_left_can_in_num = 2;
  if (has_room_left_can_in_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_left_can_in_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hall.RoomSimpleInfo)
  return target;
}

size_t RoomSimpleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hall.RoomSimpleInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 room_key = 1;
    if (has_room_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_key());
    }

    // optional uint32 room_left_can_in_num = 2;
    if (has_room_left_can_in_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_left_can_in_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hall.RoomSimpleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomSimpleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomSimpleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.RoomSimpleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.RoomSimpleInfo)
    MergeFrom(*source);
  }
}

void RoomSimpleInfo::MergeFrom(const RoomSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hall.RoomSimpleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_room_key()) {
      set_room_key(from.room_key());
    }
    if (from.has_room_left_can_in_num()) {
      set_room_left_can_in_num(from.room_left_can_in_num());
    }
  }
}

void RoomSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hall.RoomSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomSimpleInfo::CopyFrom(const RoomSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hall.RoomSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomSimpleInfo::IsInitialized() const {
  return true;
}

void RoomSimpleInfo::Swap(RoomSimpleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomSimpleInfo::InternalSwap(RoomSimpleInfo* other) {
  std::swap(room_key_, other->room_key_);
  std::swap(room_left_can_in_num_, other->room_left_can_in_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomSimpleInfo::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hall_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomSimpleInfo

// optional uint32 room_key = 1;
bool RoomSimpleInfo::has_room_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomSimpleInfo::set_has_room_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomSimpleInfo::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomSimpleInfo::clear_room_key() {
  room_key_ = 0u;
  clear_has_room_key();
}
::google::protobuf::uint32 RoomSimpleInfo::room_key() const {
  // @@protoc_insertion_point(field_get:hall.RoomSimpleInfo.room_key)
  return room_key_;
}
void RoomSimpleInfo::set_room_key(::google::protobuf::uint32 value) {
  set_has_room_key();
  room_key_ = value;
  // @@protoc_insertion_point(field_set:hall.RoomSimpleInfo.room_key)
}

// optional uint32 room_left_can_in_num = 2;
bool RoomSimpleInfo::has_room_left_can_in_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomSimpleInfo::set_has_room_left_can_in_num() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomSimpleInfo::clear_has_room_left_can_in_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomSimpleInfo::clear_room_left_can_in_num() {
  room_left_can_in_num_ = 0u;
  clear_has_room_left_can_in_num();
}
::google::protobuf::uint32 RoomSimpleInfo::room_left_can_in_num() const {
  // @@protoc_insertion_point(field_get:hall.RoomSimpleInfo.room_left_can_in_num)
  return room_left_can_in_num_;
}
void RoomSimpleInfo::set_room_left_can_in_num(::google::protobuf::uint32 value) {
  set_has_room_left_can_in_num();
  room_left_can_in_num_ = value;
  // @@protoc_insertion_point(field_set:hall.RoomSimpleInfo.room_left_can_in_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HallListResponse::kRoomListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HallListResponse::HallListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hall.HallListResponse)
}
HallListResponse::HallListResponse(const HallListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      room_list_(from.room_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hall.HallListResponse)
}

void HallListResponse::SharedCtor() {
  _cached_size_ = 0;
}

HallListResponse::~HallListResponse() {
  // @@protoc_insertion_point(destructor:hall.HallListResponse)
  SharedDtor();
}

void HallListResponse::SharedDtor() {
}

void HallListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallListResponse::descriptor() {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hall_2eproto::file_level_metadata[1].descriptor;
}

const HallListResponse& HallListResponse::default_instance() {
  protobuf_hall_2eproto::InitDefaults();
  return *internal_default_instance();
}

HallListResponse* HallListResponse::New(::google::protobuf::Arena* arena) const {
  HallListResponse* n = new HallListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HallListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hall.HallListResponse)
  room_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HallListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hall.HallListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hall.RoomSimpleInfo room_list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_room_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hall.HallListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hall.HallListResponse)
  return false;
#undef DO_
}

void HallListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hall.HallListResponse)
  // repeated .hall.RoomSimpleInfo room_list = 1;
  for (unsigned int i = 0, n = this->room_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hall.HallListResponse)
}

::google::protobuf::uint8* HallListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hall.HallListResponse)
  // repeated .hall.RoomSimpleInfo room_list = 1;
  for (unsigned int i = 0, n = this->room_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->room_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hall.HallListResponse)
  return target;
}

size_t HallListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hall.HallListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .hall.RoomSimpleInfo room_list = 1;
  {
    unsigned int count = this->room_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hall.HallListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HallListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HallListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hall.HallListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hall.HallListResponse)
    MergeFrom(*source);
  }
}

void HallListResponse::MergeFrom(const HallListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hall.HallListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_list_.MergeFrom(from.room_list_);
}

void HallListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hall.HallListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallListResponse::CopyFrom(const HallListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hall.HallListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallListResponse::IsInitialized() const {
  return true;
}

void HallListResponse::Swap(HallListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HallListResponse::InternalSwap(HallListResponse* other) {
  room_list_.UnsafeArenaSwap(&other->room_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HallListResponse::GetMetadata() const {
  protobuf_hall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hall_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HallListResponse

// repeated .hall.RoomSimpleInfo room_list = 1;
int HallListResponse::room_list_size() const {
  return room_list_.size();
}
void HallListResponse::clear_room_list() {
  room_list_.Clear();
}
const ::hall::RoomSimpleInfo& HallListResponse::room_list(int index) const {
  // @@protoc_insertion_point(field_get:hall.HallListResponse.room_list)
  return room_list_.Get(index);
}
::hall::RoomSimpleInfo* HallListResponse::mutable_room_list(int index) {
  // @@protoc_insertion_point(field_mutable:hall.HallListResponse.room_list)
  return room_list_.Mutable(index);
}
::hall::RoomSimpleInfo* HallListResponse::add_room_list() {
  // @@protoc_insertion_point(field_add:hall.HallListResponse.room_list)
  return room_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::hall::RoomSimpleInfo >*
HallListResponse::mutable_room_list() {
  // @@protoc_insertion_point(field_mutable_list:hall.HallListResponse.room_list)
  return &room_list_;
}
const ::google::protobuf::RepeatedPtrField< ::hall::RoomSimpleInfo >&
HallListResponse::room_list() const {
  // @@protoc_insertion_point(field_list:hall.HallListResponse.room_list)
  return room_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hall

// @@protoc_insertion_point(global_scope)
