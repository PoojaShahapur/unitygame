// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {
class LoginRequest_GiantDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest_Giant> {
} _LoginRequest_Giant_default_instance_;
class LoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> {
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> {
} _LoginResponse_default_instance_;
class SwitchAccMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SwitchAccMsg> {
} _SwitchAccMsg_default_instance_;
class SwitchAccResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SwitchAccResponse> {
} _SwitchAccResponse_default_instance_;
class HeartBeatMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatMsg> {
} _HeartBeatMsg_default_instance_;

namespace protobuf_login_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, entities_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, majorv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, secondv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest_Giant, patchv_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, error_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, header_imgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, header_imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, short_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, is_purgatory_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, is_team_unlock_),
  4,
  0,
  1,
  5,
  2,
  6,
  3,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccMsg, entities_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccMsg, sign_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, header_imgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, header_imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, short_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, is_purgatory_unlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchAccResponse, is_team_unlock_),
  3,
  0,
  4,
  1,
  5,
  2,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(LoginRequest_Giant)},
  { 14, 20, sizeof(LoginRequest)},
  { 22, 36, sizeof(LoginResponse)},
  { 46, 52, sizeof(SwitchAccMsg)},
  { 54, 67, sizeof(SwitchAccResponse)},
  { 76, 80, sizeof(HeartBeatMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRequest_Giant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SwitchAccMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SwitchAccResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _LoginRequest_Giant_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LoginResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SwitchAccMsg_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SwitchAccResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _HeartBeatMsg_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LoginRequest_Giant_default_instance_.DefaultConstruct();
  _LoginRequest_default_instance_.DefaultConstruct();
  _LoginResponse_default_instance_.DefaultConstruct();
  _SwitchAccMsg_default_instance_.DefaultConstruct();
  _SwitchAccResponse_default_instance_.DefaultConstruct();
  _HeartBeatMsg_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013login.proto\022\003rpc\"i\n\022LoginRequest_Giant"
      "\022\024\n\014entities_str\030\001 \001(\t\022\014\n\004sign\030\002 \001(\t\022\016\n\006"
      "majorv\030\003 \001(\r\022\017\n\007secondv\030\004 \001(\r\022\016\n\006patchv\030"
      "\005 \001(\r\"1\n\014LoginRequest\022\017\n\007account\030\001 \001(\t\022\020"
      "\n\010password\030\002 \001(\t\"\312\002\n\rLoginResponse\022.\n\006re"
      "sult\030\001 \001(\0162\036.rpc.LoginResponse.LoginResu"
      "lt\022\021\n\terror_str\030\002 \001(\t\022\017\n\007account\030\003 \001(\t\022\024"
      "\n\014header_imgid\030\004 \001(\r\022\025\n\rheader_imgurl\030\005 "
      "\001(\t\022\r\n\005level\030\006 \001(\r\022\021\n\tshort_url\030\007 \001(\t\022\033\n"
      "\023is_purgatory_unlock\030\010 \001(\r\022\013\n\003uid\030\t \001(\r\022"
      "\026\n\016is_team_unlock\030\n \001(\r\"T\n\013LoginResult\022\006"
      "\n\002OK\020\000\022\023\n\017ERR_SERVER_FULL\020\001\022\023\n\017ERR_VERIF"
      "Y_FAIL\020\002\022\023\n\017ERR_MULTI_LOGIN\020\003\"2\n\014SwitchA"
      "ccMsg\022\024\n\014entities_str\030\001 \001(\t\022\014\n\004sign\030\002 \001("
      "\t\"\305\001\n\021SwitchAccResponse\022\016\n\006result\030\001 \001(\r\022"
      "\017\n\007account\030\002 \001(\t\022\024\n\014header_imgid\030\003 \001(\r\022\025"
      "\n\rheader_imgurl\030\004 \001(\t\022\r\n\005level\030\005 \001(\r\022\021\n\t"
      "short_url\030\006 \001(\t\022\033\n\023is_purgatory_unlock\030\007"
      " \001(\r\022\013\n\003uid\030\010 \001(\r\022\026\n\016is_team_unlock\030\t \001("
      "\r\"\016\n\014HeartBeatMsg2\336\001\n\005Login\022.\n\005Login\022\021.r"
      "pc.LoginRequest\032\022.rpc.LoginResponse\022:\n\013L"
      "ogin_Giant\022\027.rpc.LoginRequest_Giant\032\022.rp"
      "c.LoginResponse\0226\n\tSwitchAcc\022\021.rpc.Switc"
      "hAccMsg\032\026.rpc.SwitchAccResponse\0221\n\tHeart"
      "Beat\022\021.rpc.HeartBeatMsg\032\021.rpc.HeartBeatM"
      "sg"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1002);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_login_2eproto

const ::google::protobuf::EnumDescriptor* LoginResponse_LoginResult_descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_enum_descriptors[0];
}
bool LoginResponse_LoginResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoginResponse_LoginResult LoginResponse::OK;
const LoginResponse_LoginResult LoginResponse::ERR_SERVER_FULL;
const LoginResponse_LoginResult LoginResponse::ERR_VERIFY_FAIL;
const LoginResponse_LoginResult LoginResponse::ERR_MULTI_LOGIN;
const LoginResponse_LoginResult LoginResponse::LoginResult_MIN;
const LoginResponse_LoginResult LoginResponse::LoginResult_MAX;
const int LoginResponse::LoginResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest_Giant::kEntitiesStrFieldNumber;
const int LoginRequest_Giant::kSignFieldNumber;
const int LoginRequest_Giant::kMajorvFieldNumber;
const int LoginRequest_Giant::kSecondvFieldNumber;
const int LoginRequest_Giant::kPatchvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest_Giant::LoginRequest_Giant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_login_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.LoginRequest_Giant)
}
LoginRequest_Giant::LoginRequest_Giant(const LoginRequest_Giant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entities_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entities_str()) {
    entities_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entities_str_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign()) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  ::memcpy(&majorv_, &from.majorv_,
    reinterpret_cast<char*>(&patchv_) -
    reinterpret_cast<char*>(&majorv_) + sizeof(patchv_));
  // @@protoc_insertion_point(copy_constructor:rpc.LoginRequest_Giant)
}

void LoginRequest_Giant::SharedCtor() {
  _cached_size_ = 0;
  entities_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&majorv_, 0, reinterpret_cast<char*>(&patchv_) -
    reinterpret_cast<char*>(&majorv_) + sizeof(patchv_));
}

LoginRequest_Giant::~LoginRequest_Giant() {
  // @@protoc_insertion_point(destructor:rpc.LoginRequest_Giant)
  SharedDtor();
}

void LoginRequest_Giant::SharedDtor() {
  entities_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest_Giant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest_Giant::descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[0].descriptor;
}

const LoginRequest_Giant& LoginRequest_Giant::default_instance() {
  protobuf_login_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRequest_Giant* LoginRequest_Giant::New(::google::protobuf::Arena* arena) const {
  LoginRequest_Giant* n = new LoginRequest_Giant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest_Giant::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.LoginRequest_Giant)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_entities_str()) {
      GOOGLE_DCHECK(!entities_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*entities_str_.UnsafeRawStringPointer())->clear();
    }
    if (has_sign()) {
      GOOGLE_DCHECK(!sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sign_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&majorv_, 0, reinterpret_cast<char*>(&patchv_) -
      reinterpret_cast<char*>(&majorv_) + sizeof(patchv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRequest_Giant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.LoginRequest_Giant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entities_str = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entities_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entities_str().data(), this->entities_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginRequest_Giant.entities_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sign = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginRequest_Giant.sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 majorv = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_majorv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &majorv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondv = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_secondv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 patchv = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_patchv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patchv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.LoginRequest_Giant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.LoginRequest_Giant)
  return false;
#undef DO_
}

void LoginRequest_Giant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.LoginRequest_Giant)
  // optional string entities_str = 1;
  if (has_entities_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entities_str().data(), this->entities_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest_Giant.entities_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entities_str(), output);
  }

  // optional string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest_Giant.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign(), output);
  }

  // optional uint32 majorv = 3;
  if (has_majorv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->majorv(), output);
  }

  // optional uint32 secondv = 4;
  if (has_secondv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->secondv(), output);
  }

  // optional uint32 patchv = 5;
  if (has_patchv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->patchv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.LoginRequest_Giant)
}

::google::protobuf::uint8* LoginRequest_Giant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.LoginRequest_Giant)
  // optional string entities_str = 1;
  if (has_entities_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entities_str().data(), this->entities_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest_Giant.entities_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entities_str(), target);
  }

  // optional string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest_Giant.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  // optional uint32 majorv = 3;
  if (has_majorv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->majorv(), target);
  }

  // optional uint32 secondv = 4;
  if (has_secondv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->secondv(), target);
  }

  // optional uint32 patchv = 5;
  if (has_patchv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->patchv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.LoginRequest_Giant)
  return target;
}

size_t LoginRequest_Giant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.LoginRequest_Giant)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string entities_str = 1;
    if (has_entities_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entities_str());
    }

    // optional string sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 majorv = 3;
    if (has_majorv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->majorv());
    }

    // optional uint32 secondv = 4;
    if (has_secondv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondv());
    }

    // optional uint32 patchv = 5;
    if (has_patchv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patchv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest_Giant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.LoginRequest_Giant)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest_Giant* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest_Giant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.LoginRequest_Giant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.LoginRequest_Giant)
    MergeFrom(*source);
  }
}

void LoginRequest_Giant::MergeFrom(const LoginRequest_Giant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.LoginRequest_Giant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_entities_str()) {
      set_has_entities_str();
      entities_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entities_str_);
    }
    if (from.has_sign()) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
    if (from.has_majorv()) {
      set_majorv(from.majorv());
    }
    if (from.has_secondv()) {
      set_secondv(from.secondv());
    }
    if (from.has_patchv()) {
      set_patchv(from.patchv());
    }
  }
}

void LoginRequest_Giant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.LoginRequest_Giant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest_Giant::CopyFrom(const LoginRequest_Giant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.LoginRequest_Giant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest_Giant::IsInitialized() const {
  return true;
}

void LoginRequest_Giant::Swap(LoginRequest_Giant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest_Giant::InternalSwap(LoginRequest_Giant* other) {
  entities_str_.Swap(&other->entities_str_);
  sign_.Swap(&other->sign_);
  std::swap(majorv_, other->majorv_);
  std::swap(secondv_, other->secondv_);
  std::swap(patchv_, other->patchv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest_Giant::GetMetadata() const {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest_Giant

// optional string entities_str = 1;
bool LoginRequest_Giant::has_entities_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRequest_Giant::set_has_entities_str() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRequest_Giant::clear_has_entities_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRequest_Giant::clear_entities_str() {
  entities_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entities_str();
}
const ::std::string& LoginRequest_Giant::entities_str() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest_Giant.entities_str)
  return entities_str_.GetNoArena();
}
void LoginRequest_Giant::set_entities_str(const ::std::string& value) {
  set_has_entities_str();
  entities_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginRequest_Giant.entities_str)
}
#if LANG_CXX11
void LoginRequest_Giant::set_entities_str(::std::string&& value) {
  set_has_entities_str();
  entities_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginRequest_Giant.entities_str)
}
#endif
void LoginRequest_Giant::set_entities_str(const char* value) {
  set_has_entities_str();
  entities_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginRequest_Giant.entities_str)
}
void LoginRequest_Giant::set_entities_str(const char* value, size_t size) {
  set_has_entities_str();
  entities_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginRequest_Giant.entities_str)
}
::std::string* LoginRequest_Giant::mutable_entities_str() {
  set_has_entities_str();
  // @@protoc_insertion_point(field_mutable:rpc.LoginRequest_Giant.entities_str)
  return entities_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest_Giant::release_entities_str() {
  // @@protoc_insertion_point(field_release:rpc.LoginRequest_Giant.entities_str)
  clear_has_entities_str();
  return entities_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest_Giant::set_allocated_entities_str(::std::string* entities_str) {
  if (entities_str != NULL) {
    set_has_entities_str();
  } else {
    clear_has_entities_str();
  }
  entities_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entities_str);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginRequest_Giant.entities_str)
}

// optional string sign = 2;
bool LoginRequest_Giant::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRequest_Giant::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRequest_Giant::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRequest_Giant::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
const ::std::string& LoginRequest_Giant::sign() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest_Giant.sign)
  return sign_.GetNoArena();
}
void LoginRequest_Giant::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginRequest_Giant.sign)
}
#if LANG_CXX11
void LoginRequest_Giant::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginRequest_Giant.sign)
}
#endif
void LoginRequest_Giant::set_sign(const char* value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginRequest_Giant.sign)
}
void LoginRequest_Giant::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginRequest_Giant.sign)
}
::std::string* LoginRequest_Giant::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:rpc.LoginRequest_Giant.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest_Giant::release_sign() {
  // @@protoc_insertion_point(field_release:rpc.LoginRequest_Giant.sign)
  clear_has_sign();
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest_Giant::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginRequest_Giant.sign)
}

// optional uint32 majorv = 3;
bool LoginRequest_Giant::has_majorv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginRequest_Giant::set_has_majorv() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginRequest_Giant::clear_has_majorv() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginRequest_Giant::clear_majorv() {
  majorv_ = 0u;
  clear_has_majorv();
}
::google::protobuf::uint32 LoginRequest_Giant::majorv() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest_Giant.majorv)
  return majorv_;
}
void LoginRequest_Giant::set_majorv(::google::protobuf::uint32 value) {
  set_has_majorv();
  majorv_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginRequest_Giant.majorv)
}

// optional uint32 secondv = 4;
bool LoginRequest_Giant::has_secondv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginRequest_Giant::set_has_secondv() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginRequest_Giant::clear_has_secondv() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginRequest_Giant::clear_secondv() {
  secondv_ = 0u;
  clear_has_secondv();
}
::google::protobuf::uint32 LoginRequest_Giant::secondv() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest_Giant.secondv)
  return secondv_;
}
void LoginRequest_Giant::set_secondv(::google::protobuf::uint32 value) {
  set_has_secondv();
  secondv_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginRequest_Giant.secondv)
}

// optional uint32 patchv = 5;
bool LoginRequest_Giant::has_patchv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginRequest_Giant::set_has_patchv() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginRequest_Giant::clear_has_patchv() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginRequest_Giant::clear_patchv() {
  patchv_ = 0u;
  clear_has_patchv();
}
::google::protobuf::uint32 LoginRequest_Giant::patchv() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest_Giant.patchv)
  return patchv_;
}
void LoginRequest_Giant::set_patchv(::google::protobuf::uint32 value) {
  set_has_patchv();
  patchv_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginRequest_Giant.patchv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kAccountFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_login_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:rpc.LoginRequest)
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:rpc.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[1].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_login_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.LoginRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginRequest.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.LoginRequest)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.LoginRequest)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.LoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string account = 1;
bool LoginRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest.account)
  return account_.GetNoArena();
}
void LoginRequest::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginRequest.account)
}
#if LANG_CXX11
void LoginRequest::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginRequest.account)
}
#endif
void LoginRequest::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginRequest.account)
}
void LoginRequest::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginRequest.account)
}
::std::string* LoginRequest::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:rpc.LoginRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:rpc.LoginRequest.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginRequest.account)
}

// optional string password = 2;
bool LoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:rpc.LoginRequest.password)
  return password_.GetNoArena();
}
void LoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginRequest.password)
}
#if LANG_CXX11
void LoginRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginRequest.password)
}
#endif
void LoginRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginRequest.password)
}
void LoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginRequest.password)
}
::std::string* LoginRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:rpc.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:rpc.LoginRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kResultFieldNumber;
const int LoginResponse::kErrorStrFieldNumber;
const int LoginResponse::kAccountFieldNumber;
const int LoginResponse::kHeaderImgidFieldNumber;
const int LoginResponse::kHeaderImgurlFieldNumber;
const int LoginResponse::kLevelFieldNumber;
const int LoginResponse::kShortUrlFieldNumber;
const int LoginResponse::kIsPurgatoryUnlockFieldNumber;
const int LoginResponse::kUidFieldNumber;
const int LoginResponse::kIsTeamUnlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_login_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_str()) {
    error_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_str_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  header_imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_imgurl()) {
    header_imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_imgurl_);
  }
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_url()) {
    short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&is_team_unlock_) -
    reinterpret_cast<char*>(&result_) + sizeof(is_team_unlock_));
  // @@protoc_insertion_point(copy_constructor:rpc.LoginResponse)
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  error_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&is_team_unlock_) -
    reinterpret_cast<char*>(&result_) + sizeof(is_team_unlock_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:rpc.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  error_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[2].descriptor;
}

const LoginResponse& LoginResponse::default_instance() {
  protobuf_login_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.LoginResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_error_str()) {
      GOOGLE_DCHECK(!error_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_str_.UnsafeRawStringPointer())->clear();
    }
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_header_imgurl()) {
      GOOGLE_DCHECK(!header_imgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*header_imgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_short_url()) {
      GOOGLE_DCHECK(!short_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*short_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&is_purgatory_unlock_) -
      reinterpret_cast<char*>(&result_) + sizeof(is_purgatory_unlock_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&is_team_unlock_) -
      reinterpret_cast<char*>(&uid_) + sizeof(is_team_unlock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.LoginResponse.LoginResult result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::LoginResponse_LoginResult_IsValid(value)) {
            set_result(static_cast< ::rpc::LoginResponse_LoginResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_str = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_str().data(), this->error_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginResponse.error_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginResponse.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_imgid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(32u)) {
          set_has_header_imgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_imgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header_imgurl = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_imgurl().data(), this->header_imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginResponse.header_imgurl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(48u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string short_url = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_url().data(), this->short_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.LoginResponse.short_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_purgatory_unlock = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(64u)) {
          set_has_is_purgatory_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_purgatory_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uid = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(72u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_team_unlock = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(80u)) {
          set_has_is_team_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_team_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.LoginResponse)
  // optional .rpc.LoginResponse.LoginResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string error_str = 2;
  if (has_error_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_str().data(), this->error_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.error_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_str(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // optional uint32 header_imgid = 4;
  if (has_header_imgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->header_imgid(), output);
  }

  // optional string header_imgurl = 5;
  if (has_header_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_imgurl().data(), this->header_imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.header_imgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->header_imgurl(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional string short_url = 7;
  if (has_short_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_url().data(), this->short_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.short_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->short_url(), output);
  }

  // optional uint32 is_purgatory_unlock = 8;
  if (has_is_purgatory_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_purgatory_unlock(), output);
  }

  // optional uint32 uid = 9;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uid(), output);
  }

  // optional uint32 is_team_unlock = 10;
  if (has_is_team_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->is_team_unlock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.LoginResponse)
  // optional .rpc.LoginResponse.LoginResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string error_str = 2;
  if (has_error_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_str().data(), this->error_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.error_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_str(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 header_imgid = 4;
  if (has_header_imgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->header_imgid(), target);
  }

  // optional string header_imgurl = 5;
  if (has_header_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_imgurl().data(), this->header_imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.header_imgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->header_imgurl(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional string short_url = 7;
  if (has_short_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_url().data(), this->short_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.LoginResponse.short_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->short_url(), target);
  }

  // optional uint32 is_purgatory_unlock = 8;
  if (has_is_purgatory_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_purgatory_unlock(), target);
  }

  // optional uint32 uid = 9;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uid(), target);
  }

  // optional uint32 is_team_unlock = 10;
  if (has_is_team_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->is_team_unlock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.LoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string error_str = 2;
    if (has_error_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_str());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string header_imgurl = 5;
    if (has_header_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header_imgurl());
    }

    // optional string short_url = 7;
    if (has_short_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_url());
    }

    // optional .rpc.LoginResponse.LoginResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 header_imgid = 4;
    if (has_header_imgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->header_imgid());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 is_purgatory_unlock = 8;
    if (has_is_purgatory_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_purgatory_unlock());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 uid = 9;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 is_team_unlock = 10;
    if (has_is_team_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_team_unlock());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_error_str()) {
      set_has_error_str();
      error_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_str_);
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_header_imgurl()) {
      set_has_header_imgurl();
      header_imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_imgurl_);
    }
    if (from.has_short_url()) {
      set_has_short_url();
      short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_header_imgid()) {
      set_header_imgid(from.header_imgid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_purgatory_unlock()) {
      set_is_purgatory_unlock(from.is_purgatory_unlock());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_is_team_unlock()) {
      set_is_team_unlock(from.is_team_unlock());
    }
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  error_str_.Swap(&other->error_str_);
  account_.Swap(&other->account_);
  header_imgurl_.Swap(&other->header_imgurl_);
  short_url_.Swap(&other->short_url_);
  std::swap(result_, other->result_);
  std::swap(header_imgid_, other->header_imgid_);
  std::swap(level_, other->level_);
  std::swap(is_purgatory_unlock_, other->is_purgatory_unlock_);
  std::swap(uid_, other->uid_);
  std::swap(is_team_unlock_, other->is_team_unlock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional .rpc.LoginResponse.LoginResult result = 1;
bool LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::rpc::LoginResponse_LoginResult LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.result)
  return static_cast< ::rpc::LoginResponse_LoginResult >(result_);
}
void LoginResponse::set_result(::rpc::LoginResponse_LoginResult value) {
  assert(::rpc::LoginResponse_LoginResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.result)
}

// optional string error_str = 2;
bool LoginResponse::has_error_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResponse::set_has_error_str() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResponse::clear_has_error_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResponse::clear_error_str() {
  error_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_str();
}
const ::std::string& LoginResponse::error_str() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.error_str)
  return error_str_.GetNoArena();
}
void LoginResponse::set_error_str(const ::std::string& value) {
  set_has_error_str();
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.error_str)
}
#if LANG_CXX11
void LoginResponse::set_error_str(::std::string&& value) {
  set_has_error_str();
  error_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginResponse.error_str)
}
#endif
void LoginResponse::set_error_str(const char* value) {
  set_has_error_str();
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginResponse.error_str)
}
void LoginResponse::set_error_str(const char* value, size_t size) {
  set_has_error_str();
  error_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginResponse.error_str)
}
::std::string* LoginResponse::mutable_error_str() {
  set_has_error_str();
  // @@protoc_insertion_point(field_mutable:rpc.LoginResponse.error_str)
  return error_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_error_str() {
  // @@protoc_insertion_point(field_release:rpc.LoginResponse.error_str)
  clear_has_error_str();
  return error_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_error_str(::std::string* error_str) {
  if (error_str != NULL) {
    set_has_error_str();
  } else {
    clear_has_error_str();
  }
  error_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_str);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginResponse.error_str)
}

// optional string account = 3;
bool LoginResponse::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginResponse::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginResponse::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginResponse::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& LoginResponse::account() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.account)
  return account_.GetNoArena();
}
void LoginResponse::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.account)
}
#if LANG_CXX11
void LoginResponse::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginResponse.account)
}
#endif
void LoginResponse::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginResponse.account)
}
void LoginResponse::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginResponse.account)
}
::std::string* LoginResponse::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:rpc.LoginResponse.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_account() {
  // @@protoc_insertion_point(field_release:rpc.LoginResponse.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginResponse.account)
}

// optional uint32 header_imgid = 4;
bool LoginResponse::has_header_imgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginResponse::set_has_header_imgid() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginResponse::clear_has_header_imgid() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginResponse::clear_header_imgid() {
  header_imgid_ = 0u;
  clear_has_header_imgid();
}
::google::protobuf::uint32 LoginResponse::header_imgid() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.header_imgid)
  return header_imgid_;
}
void LoginResponse::set_header_imgid(::google::protobuf::uint32 value) {
  set_has_header_imgid();
  header_imgid_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.header_imgid)
}

// optional string header_imgurl = 5;
bool LoginResponse::has_header_imgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginResponse::set_has_header_imgurl() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginResponse::clear_has_header_imgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginResponse::clear_header_imgurl() {
  header_imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_imgurl();
}
const ::std::string& LoginResponse::header_imgurl() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.header_imgurl)
  return header_imgurl_.GetNoArena();
}
void LoginResponse::set_header_imgurl(const ::std::string& value) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.header_imgurl)
}
#if LANG_CXX11
void LoginResponse::set_header_imgurl(::std::string&& value) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginResponse.header_imgurl)
}
#endif
void LoginResponse::set_header_imgurl(const char* value) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginResponse.header_imgurl)
}
void LoginResponse::set_header_imgurl(const char* value, size_t size) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginResponse.header_imgurl)
}
::std::string* LoginResponse::mutable_header_imgurl() {
  set_has_header_imgurl();
  // @@protoc_insertion_point(field_mutable:rpc.LoginResponse.header_imgurl)
  return header_imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_header_imgurl() {
  // @@protoc_insertion_point(field_release:rpc.LoginResponse.header_imgurl)
  clear_has_header_imgurl();
  return header_imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_header_imgurl(::std::string* header_imgurl) {
  if (header_imgurl != NULL) {
    set_has_header_imgurl();
  } else {
    clear_has_header_imgurl();
  }
  header_imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_imgurl);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginResponse.header_imgurl)
}

// optional uint32 level = 6;
bool LoginResponse::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginResponse::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginResponse::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 LoginResponse::level() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.level)
  return level_;
}
void LoginResponse::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.level)
}

// optional string short_url = 7;
bool LoginResponse::has_short_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginResponse::set_has_short_url() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginResponse::clear_has_short_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginResponse::clear_short_url() {
  short_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_url();
}
const ::std::string& LoginResponse::short_url() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.short_url)
  return short_url_.GetNoArena();
}
void LoginResponse::set_short_url(const ::std::string& value) {
  set_has_short_url();
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.short_url)
}
#if LANG_CXX11
void LoginResponse::set_short_url(::std::string&& value) {
  set_has_short_url();
  short_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.LoginResponse.short_url)
}
#endif
void LoginResponse::set_short_url(const char* value) {
  set_has_short_url();
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.LoginResponse.short_url)
}
void LoginResponse::set_short_url(const char* value, size_t size) {
  set_has_short_url();
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.LoginResponse.short_url)
}
::std::string* LoginResponse::mutable_short_url() {
  set_has_short_url();
  // @@protoc_insertion_point(field_mutable:rpc.LoginResponse.short_url)
  return short_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_short_url() {
  // @@protoc_insertion_point(field_release:rpc.LoginResponse.short_url)
  clear_has_short_url();
  return short_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_short_url(::std::string* short_url) {
  if (short_url != NULL) {
    set_has_short_url();
  } else {
    clear_has_short_url();
  }
  short_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_url);
  // @@protoc_insertion_point(field_set_allocated:rpc.LoginResponse.short_url)
}

// optional uint32 is_purgatory_unlock = 8;
bool LoginResponse::has_is_purgatory_unlock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LoginResponse::set_has_is_purgatory_unlock() {
  _has_bits_[0] |= 0x00000080u;
}
void LoginResponse::clear_has_is_purgatory_unlock() {
  _has_bits_[0] &= ~0x00000080u;
}
void LoginResponse::clear_is_purgatory_unlock() {
  is_purgatory_unlock_ = 0u;
  clear_has_is_purgatory_unlock();
}
::google::protobuf::uint32 LoginResponse::is_purgatory_unlock() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.is_purgatory_unlock)
  return is_purgatory_unlock_;
}
void LoginResponse::set_is_purgatory_unlock(::google::protobuf::uint32 value) {
  set_has_is_purgatory_unlock();
  is_purgatory_unlock_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.is_purgatory_unlock)
}

// optional uint32 uid = 9;
bool LoginResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LoginResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000100u;
}
void LoginResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000100u;
}
void LoginResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 LoginResponse::uid() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.uid)
  return uid_;
}
void LoginResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.uid)
}

// optional uint32 is_team_unlock = 10;
bool LoginResponse::has_is_team_unlock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LoginResponse::set_has_is_team_unlock() {
  _has_bits_[0] |= 0x00000200u;
}
void LoginResponse::clear_has_is_team_unlock() {
  _has_bits_[0] &= ~0x00000200u;
}
void LoginResponse::clear_is_team_unlock() {
  is_team_unlock_ = 0u;
  clear_has_is_team_unlock();
}
::google::protobuf::uint32 LoginResponse::is_team_unlock() const {
  // @@protoc_insertion_point(field_get:rpc.LoginResponse.is_team_unlock)
  return is_team_unlock_;
}
void LoginResponse::set_is_team_unlock(::google::protobuf::uint32 value) {
  set_has_is_team_unlock();
  is_team_unlock_ = value;
  // @@protoc_insertion_point(field_set:rpc.LoginResponse.is_team_unlock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchAccMsg::kEntitiesStrFieldNumber;
const int SwitchAccMsg::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchAccMsg::SwitchAccMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_login_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.SwitchAccMsg)
}
SwitchAccMsg::SwitchAccMsg(const SwitchAccMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entities_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entities_str()) {
    entities_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entities_str_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign()) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  // @@protoc_insertion_point(copy_constructor:rpc.SwitchAccMsg)
}

void SwitchAccMsg::SharedCtor() {
  _cached_size_ = 0;
  entities_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SwitchAccMsg::~SwitchAccMsg() {
  // @@protoc_insertion_point(destructor:rpc.SwitchAccMsg)
  SharedDtor();
}

void SwitchAccMsg::SharedDtor() {
  entities_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SwitchAccMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchAccMsg::descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[3].descriptor;
}

const SwitchAccMsg& SwitchAccMsg::default_instance() {
  protobuf_login_2eproto::InitDefaults();
  return *internal_default_instance();
}

SwitchAccMsg* SwitchAccMsg::New(::google::protobuf::Arena* arena) const {
  SwitchAccMsg* n = new SwitchAccMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SwitchAccMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.SwitchAccMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_entities_str()) {
      GOOGLE_DCHECK(!entities_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*entities_str_.UnsafeRawStringPointer())->clear();
    }
    if (has_sign()) {
      GOOGLE_DCHECK(!sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sign_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchAccMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.SwitchAccMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entities_str = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entities_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entities_str().data(), this->entities_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.SwitchAccMsg.entities_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sign = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.SwitchAccMsg.sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.SwitchAccMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.SwitchAccMsg)
  return false;
#undef DO_
}

void SwitchAccMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.SwitchAccMsg)
  // optional string entities_str = 1;
  if (has_entities_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entities_str().data(), this->entities_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccMsg.entities_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entities_str(), output);
  }

  // optional string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccMsg.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.SwitchAccMsg)
}

::google::protobuf::uint8* SwitchAccMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.SwitchAccMsg)
  // optional string entities_str = 1;
  if (has_entities_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entities_str().data(), this->entities_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccMsg.entities_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entities_str(), target);
  }

  // optional string sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccMsg.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.SwitchAccMsg)
  return target;
}

size_t SwitchAccMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.SwitchAccMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string entities_str = 1;
    if (has_entities_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entities_str());
    }

    // optional string sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchAccMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.SwitchAccMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchAccMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SwitchAccMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.SwitchAccMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.SwitchAccMsg)
    MergeFrom(*source);
  }
}

void SwitchAccMsg::MergeFrom(const SwitchAccMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.SwitchAccMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_entities_str()) {
      set_has_entities_str();
      entities_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entities_str_);
    }
    if (from.has_sign()) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
  }
}

void SwitchAccMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.SwitchAccMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchAccMsg::CopyFrom(const SwitchAccMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.SwitchAccMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchAccMsg::IsInitialized() const {
  return true;
}

void SwitchAccMsg::Swap(SwitchAccMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchAccMsg::InternalSwap(SwitchAccMsg* other) {
  entities_str_.Swap(&other->entities_str_);
  sign_.Swap(&other->sign_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SwitchAccMsg::GetMetadata() const {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SwitchAccMsg

// optional string entities_str = 1;
bool SwitchAccMsg::has_entities_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SwitchAccMsg::set_has_entities_str() {
  _has_bits_[0] |= 0x00000001u;
}
void SwitchAccMsg::clear_has_entities_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void SwitchAccMsg::clear_entities_str() {
  entities_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entities_str();
}
const ::std::string& SwitchAccMsg::entities_str() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccMsg.entities_str)
  return entities_str_.GetNoArena();
}
void SwitchAccMsg::set_entities_str(const ::std::string& value) {
  set_has_entities_str();
  entities_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SwitchAccMsg.entities_str)
}
#if LANG_CXX11
void SwitchAccMsg::set_entities_str(::std::string&& value) {
  set_has_entities_str();
  entities_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.SwitchAccMsg.entities_str)
}
#endif
void SwitchAccMsg::set_entities_str(const char* value) {
  set_has_entities_str();
  entities_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SwitchAccMsg.entities_str)
}
void SwitchAccMsg::set_entities_str(const char* value, size_t size) {
  set_has_entities_str();
  entities_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SwitchAccMsg.entities_str)
}
::std::string* SwitchAccMsg::mutable_entities_str() {
  set_has_entities_str();
  // @@protoc_insertion_point(field_mutable:rpc.SwitchAccMsg.entities_str)
  return entities_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SwitchAccMsg::release_entities_str() {
  // @@protoc_insertion_point(field_release:rpc.SwitchAccMsg.entities_str)
  clear_has_entities_str();
  return entities_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SwitchAccMsg::set_allocated_entities_str(::std::string* entities_str) {
  if (entities_str != NULL) {
    set_has_entities_str();
  } else {
    clear_has_entities_str();
  }
  entities_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entities_str);
  // @@protoc_insertion_point(field_set_allocated:rpc.SwitchAccMsg.entities_str)
}

// optional string sign = 2;
bool SwitchAccMsg::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SwitchAccMsg::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
void SwitchAccMsg::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
void SwitchAccMsg::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
const ::std::string& SwitchAccMsg::sign() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccMsg.sign)
  return sign_.GetNoArena();
}
void SwitchAccMsg::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SwitchAccMsg.sign)
}
#if LANG_CXX11
void SwitchAccMsg::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.SwitchAccMsg.sign)
}
#endif
void SwitchAccMsg::set_sign(const char* value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SwitchAccMsg.sign)
}
void SwitchAccMsg::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SwitchAccMsg.sign)
}
::std::string* SwitchAccMsg::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:rpc.SwitchAccMsg.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SwitchAccMsg::release_sign() {
  // @@protoc_insertion_point(field_release:rpc.SwitchAccMsg.sign)
  clear_has_sign();
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SwitchAccMsg::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:rpc.SwitchAccMsg.sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchAccResponse::kResultFieldNumber;
const int SwitchAccResponse::kAccountFieldNumber;
const int SwitchAccResponse::kHeaderImgidFieldNumber;
const int SwitchAccResponse::kHeaderImgurlFieldNumber;
const int SwitchAccResponse::kLevelFieldNumber;
const int SwitchAccResponse::kShortUrlFieldNumber;
const int SwitchAccResponse::kIsPurgatoryUnlockFieldNumber;
const int SwitchAccResponse::kUidFieldNumber;
const int SwitchAccResponse::kIsTeamUnlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchAccResponse::SwitchAccResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_login_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.SwitchAccResponse)
}
SwitchAccResponse::SwitchAccResponse(const SwitchAccResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  header_imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_imgurl()) {
    header_imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_imgurl_);
  }
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_url()) {
    short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&is_team_unlock_) -
    reinterpret_cast<char*>(&result_) + sizeof(is_team_unlock_));
  // @@protoc_insertion_point(copy_constructor:rpc.SwitchAccResponse)
}

void SwitchAccResponse::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&is_team_unlock_) -
    reinterpret_cast<char*>(&result_) + sizeof(is_team_unlock_));
}

SwitchAccResponse::~SwitchAccResponse() {
  // @@protoc_insertion_point(destructor:rpc.SwitchAccResponse)
  SharedDtor();
}

void SwitchAccResponse::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SwitchAccResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchAccResponse::descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[4].descriptor;
}

const SwitchAccResponse& SwitchAccResponse::default_instance() {
  protobuf_login_2eproto::InitDefaults();
  return *internal_default_instance();
}

SwitchAccResponse* SwitchAccResponse::New(::google::protobuf::Arena* arena) const {
  SwitchAccResponse* n = new SwitchAccResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SwitchAccResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.SwitchAccResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_header_imgurl()) {
      GOOGLE_DCHECK(!header_imgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*header_imgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_short_url()) {
      GOOGLE_DCHECK(!short_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*short_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&result_) + sizeof(uid_));
  }
  is_team_unlock_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchAccResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.SwitchAccResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.SwitchAccResponse.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_imgid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u)) {
          set_has_header_imgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_imgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header_imgurl = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_imgurl().data(), this->header_imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.SwitchAccResponse.header_imgurl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(40u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string short_url = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_url().data(), this->short_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.SwitchAccResponse.short_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_purgatory_unlock = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(56u)) {
          set_has_is_purgatory_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_purgatory_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uid = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(64u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_team_unlock = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(72u)) {
          set_has_is_team_unlock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_team_unlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.SwitchAccResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.SwitchAccResponse)
  return false;
#undef DO_
}

void SwitchAccResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.SwitchAccResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccResponse.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional uint32 header_imgid = 3;
  if (has_header_imgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->header_imgid(), output);
  }

  // optional string header_imgurl = 4;
  if (has_header_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_imgurl().data(), this->header_imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccResponse.header_imgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->header_imgurl(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional string short_url = 6;
  if (has_short_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_url().data(), this->short_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccResponse.short_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->short_url(), output);
  }

  // optional uint32 is_purgatory_unlock = 7;
  if (has_is_purgatory_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_purgatory_unlock(), output);
  }

  // optional uint32 uid = 8;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uid(), output);
  }

  // optional uint32 is_team_unlock = 9;
  if (has_is_team_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->is_team_unlock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.SwitchAccResponse)
}

::google::protobuf::uint8* SwitchAccResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.SwitchAccResponse)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccResponse.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 header_imgid = 3;
  if (has_header_imgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->header_imgid(), target);
  }

  // optional string header_imgurl = 4;
  if (has_header_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_imgurl().data(), this->header_imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccResponse.header_imgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->header_imgurl(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional string short_url = 6;
  if (has_short_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_url().data(), this->short_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.SwitchAccResponse.short_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->short_url(), target);
  }

  // optional uint32 is_purgatory_unlock = 7;
  if (has_is_purgatory_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_purgatory_unlock(), target);
  }

  // optional uint32 uid = 8;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uid(), target);
  }

  // optional uint32 is_team_unlock = 9;
  if (has_is_team_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->is_team_unlock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.SwitchAccResponse)
  return target;
}

size_t SwitchAccResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.SwitchAccResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string header_imgurl = 4;
    if (has_header_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header_imgurl());
    }

    // optional string short_url = 6;
    if (has_short_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_url());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 header_imgid = 3;
    if (has_header_imgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->header_imgid());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 is_purgatory_unlock = 7;
    if (has_is_purgatory_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_purgatory_unlock());
    }

    // optional uint32 uid = 8;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // optional uint32 is_team_unlock = 9;
  if (has_is_team_unlock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_team_unlock());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchAccResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.SwitchAccResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchAccResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SwitchAccResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.SwitchAccResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.SwitchAccResponse)
    MergeFrom(*source);
  }
}

void SwitchAccResponse::MergeFrom(const SwitchAccResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.SwitchAccResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_header_imgurl()) {
      set_has_header_imgurl();
      header_imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_imgurl_);
    }
    if (from.has_short_url()) {
      set_has_short_url();
      short_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_url_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_header_imgid()) {
      set_header_imgid(from.header_imgid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_purgatory_unlock()) {
      set_is_purgatory_unlock(from.is_purgatory_unlock());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from.has_is_team_unlock()) {
    set_is_team_unlock(from.is_team_unlock());
  }
}

void SwitchAccResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.SwitchAccResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchAccResponse::CopyFrom(const SwitchAccResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.SwitchAccResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchAccResponse::IsInitialized() const {
  return true;
}

void SwitchAccResponse::Swap(SwitchAccResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchAccResponse::InternalSwap(SwitchAccResponse* other) {
  account_.Swap(&other->account_);
  header_imgurl_.Swap(&other->header_imgurl_);
  short_url_.Swap(&other->short_url_);
  std::swap(result_, other->result_);
  std::swap(header_imgid_, other->header_imgid_);
  std::swap(level_, other->level_);
  std::swap(is_purgatory_unlock_, other->is_purgatory_unlock_);
  std::swap(uid_, other->uid_);
  std::swap(is_team_unlock_, other->is_team_unlock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SwitchAccResponse::GetMetadata() const {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SwitchAccResponse

// optional uint32 result = 1;
bool SwitchAccResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SwitchAccResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void SwitchAccResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void SwitchAccResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 SwitchAccResponse::result() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.result)
  return result_;
}
void SwitchAccResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.result)
}

// optional string account = 2;
bool SwitchAccResponse::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SwitchAccResponse::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void SwitchAccResponse::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void SwitchAccResponse::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& SwitchAccResponse::account() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.account)
  return account_.GetNoArena();
}
void SwitchAccResponse::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.account)
}
#if LANG_CXX11
void SwitchAccResponse::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.SwitchAccResponse.account)
}
#endif
void SwitchAccResponse::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SwitchAccResponse.account)
}
void SwitchAccResponse::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SwitchAccResponse.account)
}
::std::string* SwitchAccResponse::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:rpc.SwitchAccResponse.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SwitchAccResponse::release_account() {
  // @@protoc_insertion_point(field_release:rpc.SwitchAccResponse.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SwitchAccResponse::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:rpc.SwitchAccResponse.account)
}

// optional uint32 header_imgid = 3;
bool SwitchAccResponse::has_header_imgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SwitchAccResponse::set_has_header_imgid() {
  _has_bits_[0] |= 0x00000010u;
}
void SwitchAccResponse::clear_has_header_imgid() {
  _has_bits_[0] &= ~0x00000010u;
}
void SwitchAccResponse::clear_header_imgid() {
  header_imgid_ = 0u;
  clear_has_header_imgid();
}
::google::protobuf::uint32 SwitchAccResponse::header_imgid() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.header_imgid)
  return header_imgid_;
}
void SwitchAccResponse::set_header_imgid(::google::protobuf::uint32 value) {
  set_has_header_imgid();
  header_imgid_ = value;
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.header_imgid)
}

// optional string header_imgurl = 4;
bool SwitchAccResponse::has_header_imgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SwitchAccResponse::set_has_header_imgurl() {
  _has_bits_[0] |= 0x00000002u;
}
void SwitchAccResponse::clear_has_header_imgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void SwitchAccResponse::clear_header_imgurl() {
  header_imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_imgurl();
}
const ::std::string& SwitchAccResponse::header_imgurl() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.header_imgurl)
  return header_imgurl_.GetNoArena();
}
void SwitchAccResponse::set_header_imgurl(const ::std::string& value) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.header_imgurl)
}
#if LANG_CXX11
void SwitchAccResponse::set_header_imgurl(::std::string&& value) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.SwitchAccResponse.header_imgurl)
}
#endif
void SwitchAccResponse::set_header_imgurl(const char* value) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SwitchAccResponse.header_imgurl)
}
void SwitchAccResponse::set_header_imgurl(const char* value, size_t size) {
  set_has_header_imgurl();
  header_imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SwitchAccResponse.header_imgurl)
}
::std::string* SwitchAccResponse::mutable_header_imgurl() {
  set_has_header_imgurl();
  // @@protoc_insertion_point(field_mutable:rpc.SwitchAccResponse.header_imgurl)
  return header_imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SwitchAccResponse::release_header_imgurl() {
  // @@protoc_insertion_point(field_release:rpc.SwitchAccResponse.header_imgurl)
  clear_has_header_imgurl();
  return header_imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SwitchAccResponse::set_allocated_header_imgurl(::std::string* header_imgurl) {
  if (header_imgurl != NULL) {
    set_has_header_imgurl();
  } else {
    clear_has_header_imgurl();
  }
  header_imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_imgurl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SwitchAccResponse.header_imgurl)
}

// optional uint32 level = 5;
bool SwitchAccResponse::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SwitchAccResponse::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
void SwitchAccResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void SwitchAccResponse::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 SwitchAccResponse::level() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.level)
  return level_;
}
void SwitchAccResponse::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.level)
}

// optional string short_url = 6;
bool SwitchAccResponse::has_short_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SwitchAccResponse::set_has_short_url() {
  _has_bits_[0] |= 0x00000004u;
}
void SwitchAccResponse::clear_has_short_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void SwitchAccResponse::clear_short_url() {
  short_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_url();
}
const ::std::string& SwitchAccResponse::short_url() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.short_url)
  return short_url_.GetNoArena();
}
void SwitchAccResponse::set_short_url(const ::std::string& value) {
  set_has_short_url();
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.short_url)
}
#if LANG_CXX11
void SwitchAccResponse::set_short_url(::std::string&& value) {
  set_has_short_url();
  short_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.SwitchAccResponse.short_url)
}
#endif
void SwitchAccResponse::set_short_url(const char* value) {
  set_has_short_url();
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SwitchAccResponse.short_url)
}
void SwitchAccResponse::set_short_url(const char* value, size_t size) {
  set_has_short_url();
  short_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SwitchAccResponse.short_url)
}
::std::string* SwitchAccResponse::mutable_short_url() {
  set_has_short_url();
  // @@protoc_insertion_point(field_mutable:rpc.SwitchAccResponse.short_url)
  return short_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SwitchAccResponse::release_short_url() {
  // @@protoc_insertion_point(field_release:rpc.SwitchAccResponse.short_url)
  clear_has_short_url();
  return short_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SwitchAccResponse::set_allocated_short_url(::std::string* short_url) {
  if (short_url != NULL) {
    set_has_short_url();
  } else {
    clear_has_short_url();
  }
  short_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_url);
  // @@protoc_insertion_point(field_set_allocated:rpc.SwitchAccResponse.short_url)
}

// optional uint32 is_purgatory_unlock = 7;
bool SwitchAccResponse::has_is_purgatory_unlock() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SwitchAccResponse::set_has_is_purgatory_unlock() {
  _has_bits_[0] |= 0x00000040u;
}
void SwitchAccResponse::clear_has_is_purgatory_unlock() {
  _has_bits_[0] &= ~0x00000040u;
}
void SwitchAccResponse::clear_is_purgatory_unlock() {
  is_purgatory_unlock_ = 0u;
  clear_has_is_purgatory_unlock();
}
::google::protobuf::uint32 SwitchAccResponse::is_purgatory_unlock() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.is_purgatory_unlock)
  return is_purgatory_unlock_;
}
void SwitchAccResponse::set_is_purgatory_unlock(::google::protobuf::uint32 value) {
  set_has_is_purgatory_unlock();
  is_purgatory_unlock_ = value;
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.is_purgatory_unlock)
}

// optional uint32 uid = 8;
bool SwitchAccResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SwitchAccResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000080u;
}
void SwitchAccResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000080u;
}
void SwitchAccResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 SwitchAccResponse::uid() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.uid)
  return uid_;
}
void SwitchAccResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.uid)
}

// optional uint32 is_team_unlock = 9;
bool SwitchAccResponse::has_is_team_unlock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SwitchAccResponse::set_has_is_team_unlock() {
  _has_bits_[0] |= 0x00000100u;
}
void SwitchAccResponse::clear_has_is_team_unlock() {
  _has_bits_[0] &= ~0x00000100u;
}
void SwitchAccResponse::clear_is_team_unlock() {
  is_team_unlock_ = 0u;
  clear_has_is_team_unlock();
}
::google::protobuf::uint32 SwitchAccResponse::is_team_unlock() const {
  // @@protoc_insertion_point(field_get:rpc.SwitchAccResponse.is_team_unlock)
  return is_team_unlock_;
}
void SwitchAccResponse::set_is_team_unlock(::google::protobuf::uint32 value) {
  set_has_is_team_unlock();
  is_team_unlock_ = value;
  // @@protoc_insertion_point(field_set:rpc.SwitchAccResponse.is_team_unlock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatMsg::HeartBeatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_login_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.HeartBeatMsg)
}
HeartBeatMsg::HeartBeatMsg(const HeartBeatMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.HeartBeatMsg)
}

void HeartBeatMsg::SharedCtor() {
  _cached_size_ = 0;
}

HeartBeatMsg::~HeartBeatMsg() {
  // @@protoc_insertion_point(destructor:rpc.HeartBeatMsg)
  SharedDtor();
}

void HeartBeatMsg::SharedDtor() {
}

void HeartBeatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatMsg::descriptor() {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[5].descriptor;
}

const HeartBeatMsg& HeartBeatMsg::default_instance() {
  protobuf_login_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatMsg* HeartBeatMsg::New(::google::protobuf::Arena* arena) const {
  HeartBeatMsg* n = new HeartBeatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.HeartBeatMsg)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.HeartBeatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.HeartBeatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.HeartBeatMsg)
  return false;
#undef DO_
}

void HeartBeatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.HeartBeatMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.HeartBeatMsg)
}

::google::protobuf::uint8* HeartBeatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rpc.HeartBeatMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.HeartBeatMsg)
  return target;
}

size_t HeartBeatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.HeartBeatMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.HeartBeatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.HeartBeatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.HeartBeatMsg)
    MergeFrom(*source);
  }
}

void HeartBeatMsg::MergeFrom(const HeartBeatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.HeartBeatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void HeartBeatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.HeartBeatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatMsg::CopyFrom(const HeartBeatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.HeartBeatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatMsg::IsInitialized() const {
  return true;
}

void HeartBeatMsg::Swap(HeartBeatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatMsg::InternalSwap(HeartBeatMsg* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatMsg::GetMetadata() const {
  protobuf_login_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_login_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
