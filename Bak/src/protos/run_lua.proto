syntax = "proto3";

package svr;
import "server_empty_msg.proto";

// 服务器内部跨服调用Lua
service RunLua {
    // Todo: 改为 RunMfa(), 更安全
    rpc Run(RunLuaRequest) returns (RunLuaResponse);
    // 运行 module.function(...arguments...)
    rpc RunMfa(RunLuaMfaRequest) returns (RunLuaMfaResponse);
    // 我是否嫩登录
    rpc CanILogin(LoginRequest) returns (CanILoginResponse);

    // 玩家退出游戏
    rpc ExitRoom(ExitRoomMsg) returns (svr.EmptyMsg);
}

message RunLuaRequest {
    // 例如："return add(1, 2)"
    // 应答则返回："return 3"
    string codes = 1;
}

message RunLuaResponse {
    // 运行 assert(load(codes))() 来获取返回结果
    string codes = 1;
}

message RunLuaMfaRequest {
    string module_name = 1;
    string function_name = 2;
    // arguments_dump = serpent.dump({1,2,3})
    string arguments_dump = 3;
}

message RunLuaMfaResponse {
    // Get returned table copy:
    // local ok, copy = serpent.load(returned_dump)
    string returned_dump = 1;
}

// 检查是否能登录
message LoginRequest{
    uint32 svrid = 1;
    string openid = 2;
}

message CanILoginResponse{
    uint32 ok = 1;
}

// 已经登陆过的Openid列表
message AllOpenids {
    uint32 is_sync_complete = 1;//是否同步完成
    repeated string openids = 2;
}

//2017-07-13 先放这里,后续添加单独文件
message ExitRoomMsg{
    string account = 1;
    uint32 player_server_id = 2;
    uint32 room_id = 3;
    uint32 uid = 4;
}

message UidListMsg{
    repeated uint32 uids = 1;
}

message UidStateMsg{
    uint32 uid = 1;
    uint32 state = 2;
}

message AllUidStateMsg{
    repeated UidStateMsg datas = 1;
}

message OneMemberData{
    uint32 uid = 1;
    string account = 2;
    string nickname = 3;
    uint32 bulletid = 4;
};

message TeamData{
    uint32 teamid = 1;
    uint32 leaderid = 2;
    uint32 total_num = 3;
    uint32 current_num = 4;
    uint64 voice_token = 5;
    repeated OneMemberData members = 6;
}
